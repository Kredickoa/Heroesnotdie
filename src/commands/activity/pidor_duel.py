import discord
from discord.ext import commands
from discord import app_commands
from datetime import datetime, timedelta
import random
import asyncio
from typing import Optional, Dict, List
from modules.db import get_database

db = get_database()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ —Å–∏—Å—Ç–µ–º–∏
RANKS = [
    {"name": "–©–æ–π–Ω–æ –∑ –ø–æ–ª–æ–≥–æ–≤–æ–≥–æ", "emoji": "üë∂", "min_wins": 0, "max_wins": 9, "win_reward": 8, "loss_penalty": 2},
    {"name": "–ü—Ä–∏–∑–æ–≤–Ω–∏–∫ –ó–°–£", "emoji": "ü™ñ", "min_wins": 10, "max_wins": 19, "win_reward": 7, "loss_penalty": 5},
    {"name": "–í–µ—Ç–µ—Ä–∞–Ω –∑ 2014-–≥–æ", "emoji": "üíÄ", "min_wins": 20, "max_wins": 49, "win_reward": 6, "loss_penalty": 8},
    {"name": "–ë–æ–≥ –ª–æ–∫–∞–ª–∫–∏", "emoji": "üëë", "min_wins": 50, "max_wins": 999999, "win_reward": 5, "loss_penalty": 10},
]

RANK_DESCRIPTIONS = [
    "—Ö–æ–¥–∏—Ç—å –∑ –¥–µ—Ä–µ–≤'—è–Ω–∏–º –º–µ—á–µ–º —ñ –≤–ø–µ–≤–Ω–µ–Ω–∏–π, —â–æ —Ç–æ–ø-1 —á–µ—Ä–µ–∑ —Ç–∏–∂–¥–µ–Ω—å",
    "–≤–∂–µ –∑–Ω–∞—î, —â–æ —Ç–∞–∫–µ –ø–æ—Ä–∞–∑–∫–∞, –∞–ª–µ –≤—Å–µ —â–µ –±—ñ–∂–∏—Ç—å –∑ –≥–æ–ª–∏–º–∏ —Ä—É–∫–∞–º–∏ –Ω–∞ –±–æ—Å—ñ–≤",
    "–ø–∞–º'—è—Ç–∞—î —Å—Ç–∞—Ä—ñ –ø–∞—Ç—á—ñ, –∫–æ–ª–∏ +10 –ü–ö –¥–∞–≤–∞–ª–∏ –∑–∞ —á–∏—Ö, —ñ —Ä–æ–∑–∫–∞–∑—É—î –ø—Ä–æ —Ü–µ –≤—Å—ñ–º",
    "—É—Å—ñ –±–æ—è—Ç—å—Å—è –∫–∏–¥–∞—Ç–∏ –π–æ–º—É –¥—É–µ–ª—å, –∞ –≤—ñ–Ω –±–æ—ó—Ç—å—Å—è –ø—Ä–æ–≥—Ä–∞—Ç–∏ —Ä–∞–Ω–¥–æ–º—É –∑ –ø–∞–ª–∫–æ—é"
]

SHOP_ITEMS = {
    "armor": {"name": "–ë—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç", "price": 45, "buff": "+1 –∂–∏—Ç—Ç—è", "debuff": "-10% —Ç–æ—á–Ω–æ—Å—Ç—ñ"},
    "golden_bullet": {"name": "–ó–æ–ª–æ—Ç–∞ –∫—É–ª—è", "price": 80, "buff": "100% –≤–ª—É—á–∞–Ω–Ω—è", "debuff": "-20% —Ç–æ—á–Ω–æ—Å—Ç—ñ –ø—ñ—Å–ª—è"},
    "vodka": {"name": "–ì–æ—Ä—ñ–ª–∫–∞", "price": 25, "buff": "–ó–Ω—ñ–º–∞—î –¥–µ–±–∞—Ñ–∏", "debuff": "30% —à–∞–Ω—Å —Ç—Ä–µ–º—Ç—ñ–Ω–Ω—è —Ä—É–∫"},
    "machinegun": {"name": "–ö—É–ª–µ–º–µ—Ç", "price": 120, "buff": "3 –ø–æ—Å—Ç—Ä—ñ–ª–∏ –ø—ñ–¥—Ä—è–¥", "debuff": "-40% —Ç–æ—á–Ω–æ—Å—Ç—ñ –ø—ñ—Å–ª—è"},
    "casino": {"name": "–ö–∞–∑–∏–Ω–æ-—Ä—É–ª–µ—Ç–∫–∞", "price": 15, "buff": "50% —à–∞–Ω—Å –Ω–∞ –±–∞—Ñ", "debuff": "50% —à–∞–Ω—Å –Ω–∞ –¥–µ–±–∞—Ñ"},
    "admin_bribe": {"name": "–ü—ñ–¥–∫—É–ø –∞–¥–º—ñ–Ω–∞", "price": 200, "buff": "–ê–≤—Ç–æ–ø–µ—Ä–µ–º–æ–≥–∞", "debuff": "-50% —Ç–æ—á–Ω–æ—Å—Ç—ñ 3 –±–æ—ó"}
}

RANDOM_EVENTS = [
    {"name": "–õ–∞–≥ —Å–µ—Ä–≤–µ—Ä–∞", "description": "–û–±–∏–¥–≤–∞ –≥—Ä–∞–≤—Ü—ñ –æ—Ç—Ä–∏–º—É—é—Ç—å +20% —à–∞–Ω—Å –Ω–∞ –ø–µ—Ä–µ–º–æ–≥—É", "chance": 1},
    {"name": "–ß–∏—Ç–µ—Ä—Å—å–∫–∏–π —Å–æ—Ñ—Ç", "description": "–û–¥–∏–Ω –≥—Ä–∞–≤–µ—Ü—å –æ—Ç—Ä–∏–º—É—î +25% –¥–æ –≤–ª—É—á–∞–Ω–Ω—è", "chance": 1.5},
    {"name": "–ê–ª–∫–æ–≥–æ–ª—å–Ω–µ –æ—Ç—Ä—É—î–Ω–Ω—è", "description": "–û–¥–∏–Ω –≥—Ä–∞–≤–µ—Ü—å –æ—Ç—Ä–∏–º—É—î —Ç—Ä–µ–º—Ç—ñ–Ω–Ω—è —Ä—É–∫", "chance": 1.5},
    {"name": "–í—Ç—Ä—É—á–∞–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", "description": "–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è –≤–∏–ø–∞–¥–∫–æ–≤–æ", "chance": 1},
    {"name": "DDoS –∞—Ç–∞–∫–∞", "description": "–î—É–µ–ª—å –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥", "chance": 1}
]

class DuelRequestView(discord.ui.View):
    def __init__(self, challenger, target, timeout=60):
        super().__init__(timeout=timeout)
        self.challenger = challenger
        self.target = target

    @discord.ui.button(label="‚öîÔ∏è –ü—Ä–∏–π–Ω—è—Ç–∏ –¥—É–µ–ª—å", style=discord.ButtonStyle.success)
    async def accept(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.target:
            await interaction.response.send_message("‚ùå –¶–µ –Ω–µ —Ç–≤—ñ–π –¥—É–µ–ª—å!", ephemeral=True)
            return
        
        await interaction.response.edit_message(
            content="‚öîÔ∏è **–î—É–µ–ª—å —Ä–æ–∑–ø–æ—á–∞—Ç–æ!** –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞...",
            view=None
        )
        
        # –ó–∞–ø—É—Å–∫ –¥—É–µ–ª—ñ
        duel_cog = interaction.client.get_cog("DuelSystem")
        if duel_cog:
            await duel_cog.execute_duel(interaction, self.challenger, self.target)

    @discord.ui.button(label="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", style=discord.ButtonStyle.danger)
    async def decline(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.target:
            await interaction.response.send_message("‚ùå –¶–µ –Ω–µ —Ç–≤—ñ–π –¥—É–µ–ª—å!", ephemeral=True)
            return

        await interaction.response.edit_message(
            content=f"‚ùå {self.target.mention} –≤—ñ–¥—Ö–∏–ª–∏–≤ –¥—É–µ–ª—å –≤—ñ–¥ {self.challenger.mention}. –°–ª–∞–±–∞–∫!",
            view=None
        )

class ProfileView(discord.ui.View):
    def __init__(self, user, target_user=None):
        super().__init__(timeout=300)
        self.user = user
        self.target_user = target_user or user
        self.current_page = "profile"  # profile, inventory, shop

    async def get_profile_embed(self, interaction):
        duel_cog = interaction.client.get_cog("DuelSystem")
        stats = await duel_cog.get_user_stats(self.target_user.id, interaction.guild.id)
        rank_info = duel_cog.get_rank_info(stats['wins'])
        
        embed = discord.Embed(
            title=f"{rank_info['emoji']} –ü—Ä–æ—Ñ—ñ–ª—å {self.target_user.display_name}",
            color=discord.Color.blue()
        )
        
        embed.add_field(
            name="üèÜ –†–∞–Ω–≥",
            value=f"**{rank_info['name']}**\n*{rank_info['description']}*",
            inline=False
        )
        
        win_rate = (stats['wins'] / max(stats['wins'] + stats['losses'], 1)) * 100
        
        embed.add_field(
            name="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            value=f"–ü–µ—Ä–µ–º–æ–≥–∏: **{stats['wins']}**\n–ü–æ—Ä–∞–∑–∫–∏: **{stats['losses']}**\n–í—ñ–Ω-—Ä–µ–π—Ç: **{win_rate:.1f}%**",
            inline=True
        )
        
        embed.add_field(
            name="üí∞ –ë–∞–ª–∞–Ω—Å",
            value=f"**{stats['pk_balance']}** –ü–ö\n(–º–∞–∫—Å. 1000)",
            inline=True
        )
        
        max_slots = 1 + (stats['wins'] // 10)
        embed.add_field(
            name=f"üéí –Ü–Ω–≤–µ–Ω—Ç–∞—Ä ({len(stats['items'])}/{max_slots})",
            value=f"–ü—Ä–µ–¥–º–µ—Ç—ñ–≤: {len(stats['items'])}\n*(–Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏)*",
            inline=True
        )
        
        embed.set_thumbnail(url=self.target_user.display_avatar.url)
        return embed

    async def get_inventory_embed(self, interaction):
        duel_cog = interaction.client.get_cog("DuelSystem")
        stats = await duel_cog.get_user_stats(self.target_user.id, interaction.guild.id)
        
        embed = discord.Embed(
            title=f"üéí –Ü–Ω–≤–µ–Ω—Ç–∞—Ä {self.target_user.display_name}",
            color=discord.Color.purple()
        )
        
        if not stats['items']:
            embed.description = "–Ü–Ω–≤–µ–Ω—Ç–∞—Ä –ø–æ—Ä–æ–∂–Ω—ñ–π."
            if self.target_user == self.user:
                embed.description += " –ö—É–ø—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ!"
        else:
            items_text = ""
            for i, item_id in enumerate(stats['items'], 1):
                if item_id in SHOP_ITEMS:
                    item = SHOP_ITEMS[item_id]
                    items_text += f"**{i}.** {item['name']}\n"
                    items_text += f"   ‚úÖ {item['buff']}\n"
                    items_text += f"   ‚ùå {item['debuff']}\n\n"
            embed.description = items_text
        
        max_slots = 1 + (stats['wins'] // 10)
        embed.set_footer(text=f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ —Å–ª–æ—Ç—ñ–≤: {len(stats['items'])}/{max_slots}")
        embed.set_thumbnail(url=self.target_user.display_avatar.url)
        return embed

    async def get_shop_embed(self, interaction):
        duel_cog = interaction.client.get_cog("DuelSystem")
        stats = await duel_cog.get_user_stats(self.user.id, interaction.guild.id)
        
        embed = discord.Embed(
            title="üõçÔ∏è –ú–ê–ì–ê–ó–ò–ù –ü–†–ï–î–ú–ï–¢–Ü–í",
            description=f"–í–∞—à –±–∞–ª–∞–Ω—Å: **{stats['pk_balance']} –ü–ö**",
            color=discord.Color.gold()
        )
        
        shop_text = ""
        for item_id, item in SHOP_ITEMS.items():
            affordable = "‚úÖ" if stats['pk_balance'] >= item['price'] else "‚ùå"
            shop_text += f"{affordable} **{item['name']}** - {item['price']} –ü–ö\n"
            shop_text += f"   ‚úÖ {item['buff']}\n"
            shop_text += f"   ‚ùå {item['debuff']}\n\n"
        
        embed.description += f"\n\n{shop_text}"
        
        max_slots = 1 + (stats['wins'] // 10)
        embed.set_footer(text=f"–°–ª–æ—Ç—ñ–≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é: {len(stats['items'])}/{max_slots}")
        return embed

    async def update_view(self, interaction):
        self.clear_items()
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó (–∑–∞–≤–∂–¥–∏ –ø–æ–∫–∞–∑—É—î–º–æ)
        profile_btn = discord.ui.Button(
            label="üë§ –ü—Ä–æ—Ñ—ñ–ª—å",
            style=discord.ButtonStyle.primary if self.current_page == "profile" else discord.ButtonStyle.secondary,
            disabled=self.current_page == "profile"
        )
        profile_btn.callback = self.show_profile
        self.add_item(profile_btn)

        inventory_btn = discord.ui.Button(
            label="üéí –Ü–Ω–≤–µ–Ω—Ç–∞—Ä", 
            style=discord.ButtonStyle.primary if self.current_page == "inventory" else discord.ButtonStyle.secondary,
            disabled=self.current_page == "inventory"
        )
        inventory_btn.callback = self.show_inventory
        self.add_item(inventory_btn)

        # –ú–∞–≥–∞–∑–∏–Ω —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–ª–∞—Å–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é
        if self.target_user == self.user:
            shop_btn = discord.ui.Button(
                label="üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω",
                style=discord.ButtonStyle.primary if self.current_page == "shop" else discord.ButtonStyle.secondary,
                disabled=self.current_page == "shop"
            )
            shop_btn.callback = self.show_shop
            self.add_item(shop_btn)

        # –ö–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω—É
        if self.current_page == "shop" and self.target_user == self.user:
            # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ —É –¥—Ä—É–≥–æ–º—É —Ä—è–¥—ñ
            item_buttons = []
            for item_id, item in list(SHOP_ITEMS.items())[:5]:  # –ü–µ—Ä—à—ñ 5 –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
                btn = discord.ui.Button(
                    label=f"{item['name']} ({item['price']} –ü–ö)",
                    custom_id=f"buy_{item_id}",
                    style=discord.ButtonStyle.success,
                    row=1
                )
                btn.callback = self.create_buy_callback(item_id)
                self.add_item(btn)
            
            # –û—Å—Ç–∞–Ω–Ω—ñ–π –ø—Ä–µ–¥–º–µ—Ç –≤ —Ç—Ä–µ—Ç—å–æ–º—É —Ä—è–¥—ñ
            if len(SHOP_ITEMS) > 5:
                for item_id, item in list(SHOP_ITEMS.items())[5:]:
                    btn = discord.ui.Button(
                        label=f"{item['name']} ({item['price']} –ü–ö)",
                        custom_id=f"buy_{item_id}",
                        style=discord.ButtonStyle.success,
                        row=2
                    )
                    btn.callback = self.create_buy_callback(item_id)
                    self.add_item(btn)

    def create_buy_callback(self, item_id):
        async def buy_callback(interaction):
            if interaction.user != self.user:
                await interaction.response.send_message("‚ùå –¶–µ –Ω–µ –≤–∞—à –º–∞–≥–∞–∑–∏–Ω!", ephemeral=True)
                return

            duel_cog = interaction.client.get_cog("DuelSystem")
            if duel_cog:
                success = await duel_cog.buy_item_inline(interaction, item_id)
                if success:
                    # –û–Ω–æ–≤–∏—Ç–∏ –≤–∏–≥–ª—è–¥ –ø—ñ—Å–ª—è –ø–æ–∫—É–ø–∫–∏
                    embed = await self.get_shop_embed(interaction)
                    await self.update_view(interaction)
                    await interaction.edit_original_response(embed=embed, view=self)
        
        return buy_callback

    async def show_profile(self, interaction):
        if interaction.user != self.user:
            await interaction.response.send_message("‚ùå –¶–µ –Ω–µ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å!", ephemeral=True)
            return
            
        self.current_page = "profile"
        embed = await self.get_profile_embed(interaction)
        await self.update_view(interaction)
        await interaction.response.edit_message(embed=embed, view=self)

    async def show_inventory(self, interaction):
        if interaction.user != self.user:
            await interaction.response.send_message("‚ùå –¶–µ –Ω–µ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å!", ephemeral=True)
            return
            
        self.current_page = "inventory"
        embed = await self.get_inventory_embed(interaction)
        await self.update_view(interaction)
        await interaction.response.edit_message(embed=embed, view=self)

    async def show_shop(self, interaction):
        if interaction.user != self.user or self.target_user != self.user:
            await interaction.response.send_message("‚ùå –ú–∞–≥–∞–∑–∏–Ω –¥–æ—Å—Ç—É–ø–Ω–∏–π —Ç—ñ–ª—å–∫–∏ —É –≤–ª–∞—Å–Ω–æ–º—É –ø—Ä–æ—Ñ—ñ–ª—ñ!", ephemeral=True)
            return
            
        self.current_page = "shop"
        embed = await self.get_shop_embed(interaction)
        await self.update_view(interaction)
        await interaction.response.edit_message(embed=embed, view=self)

class DuelSystem(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.cooldowns = {}  # user_id: last_duel_time
        self.daily_limits = {}  # user_id: {date: earned_pk}

    async def get_user_stats(self, user_id: int, guild_id: int) -> Dict:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        stats = await db.duel_stats.find_one({"user_id": str(user_id), "guild_id": guild_id})
        if not stats:
            stats = {
                "user_id": str(user_id),
                "guild_id": guild_id,
                "wins": 0,
                "losses": 0,
                "pk_balance": 0,
                "items": [],
                "debuffs": {},
                "daily_pk": 0,
                "last_pk_date": None
            }
            await db.duel_stats.insert_one(stats)
        return stats

    def get_rank_info(self, wins: int) -> Dict:
        """–í–∏–∑–Ω–∞—á–∏—Ç–∏ —Ä–∞–Ω–≥ –≥—Ä–∞–≤—Ü—è –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø–µ—Ä–µ–º–æ–≥"""
        for i, rank in enumerate(RANKS):
            if rank["min_wins"] <= wins <= rank["max_wins"]:
                rank_copy = rank.copy()
                rank_copy["description"] = RANK_DESCRIPTIONS[i]
                return rank_copy
        return RANKS[-1]

    def check_cooldown(self, user_id: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫—É–ª–¥–∞—É–Ω –≥—Ä–∞–≤—Ü—è"""
        if user_id in self.cooldowns:
            time_diff = datetime.now() - self.cooldowns[user_id]
            return time_diff.total_seconds() >= 30
        return True

    async def check_daily_limit(self, user_id: int, guild_id: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç –ü–ö"""
        today = datetime.now().date().isoformat()
        stats = await self.get_user_stats(user_id, guild_id)
        
        if stats.get("last_pk_date") != today:
            # –ù–æ–≤–∏–π –¥–µ–Ω—å - —Å–∫–∏–¥–∞—î–º–æ –ª—ñ–º—ñ—Ç
            await db.duel_stats.update_one(
                {"user_id": str(user_id), "guild_id": guild_id},
                {"$set": {"daily_pk": 0, "last_pk_date": today}}
            )
            return True
        
        return stats.get("daily_pk", 0) < 100

    async def execute_duel(self, interaction, challenger, target):
        """–í–∏–∫–æ–Ω–∞—Ç–∏ –¥—É–µ–ª—å –º—ñ–∂ –¥–≤–æ–º–∞ –≥—Ä–∞–≤—Ü—è–º–∏"""
        guild_id = interaction.guild.id
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä–∞–≤—Ü—ñ–≤
        challenger_stats = await self.get_user_stats(challenger.id, guild_id)
        target_stats = await self.get_user_stats(target.id, guild_id)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤—É –ø–æ–¥—ñ—é (5-7% —à–∞–Ω—Å)
        event_chance = random.uniform(5, 7)
        random_event = None
        event_effects = {}
        
        if random.random() * 100 < event_chance:
            random_event = random.choice(RANDOM_EVENTS)
            await interaction.edit_original_response(
                content=f"üé≤ **–í–∏–ø–∞–¥–∫–æ–≤–∞ –ø–æ–¥—ñ—è:** {random_event['name']}\n{random_event['description']}\n\n–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –±–æ—é..."
            )
            await asyncio.sleep(3)
            
            # –û–±—Ä–æ–±–∏—Ç–∏ –µ—Ñ–µ–∫—Ç–∏ –ø–æ–¥—ñ—ó
            if random_event["name"] == "DDoS –∞—Ç–∞–∫–∞":
                await interaction.edit_original_response(
                    content="üí• **DDoS –∞—Ç–∞–∫–∞!** –î—É–µ–ª—å –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥..."
                )
                await asyncio.sleep(10)
                return await self.execute_duel(interaction, challenger, target)
            
            elif random_event["name"] == "–í—Ç—Ä—É—á–∞–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞":
                event_effects["random_winner"] = True
            
            elif random_event["name"] == "–ß–∏—Ç–µ—Ä—Å—å–∫–∏–π —Å–æ—Ñ—Ç":
                lucky_player = random.choice([challenger, target])
                event_effects["accuracy_boost"] = {lucky_player.id: 25}
            
            elif random_event["name"] == "–ê–ª–∫–æ–≥–æ–ª—å–Ω–µ –æ—Ç—Ä—É—î–Ω–Ω—è":
                unlucky_player = random.choice([challenger, target])
                event_effects["accuracy_penalty"] = {unlucky_player.id: 15}

        # –†–∞–Ω–¥–æ–º–Ω–∞ –∑–∞–¥–∏—à–∫–∞
        luck_bonus = random.choice([challenger, target])
        
        # –ü–æ—á–∞—Ç–æ–∫ –¥—É–µ–ª—ñ
        embed = discord.Embed(
            title="‚öîÔ∏è –î–£–ï–õ–¨ –†–û–ó–ü–û–ß–ê–¢–û!",
            color=discord.Color.red()
        )
        embed.add_field(
            name=f"{self.get_rank_info(challenger_stats['wins'])['emoji']} {challenger.display_name}",
            value=f"–ü–µ—Ä–µ–º–æ–≥–∏: {challenger_stats['wins']}\n–ü–ö: {challenger_stats['pk_balance']}",
            inline=True
        )
        embed.add_field(
            name="üÜö",
            value="VS",
            inline=True
        )
        embed.add_field(
            name=f"{self.get_rank_info(target_stats['wins'])['emoji']} {target.display_name}",
            value=f"–ü–µ—Ä–µ–º–æ–≥–∏: {target_stats['wins']}\n–ü–ö: {target_stats['pk_balance']}",
            inline=True
        )
        
        if random_event:
            embed.add_field(
                name="üé≤ –í–∏–ø–∞–¥–∫–æ–≤–∞ –ø–æ–¥—ñ—è",
                value=f"**{random_event['name']}**\n{random_event['description']}",
                inline=False
            )
        
        embed.add_field(
            name="üçÄ –†–∞–Ω–¥–æ–º–Ω–∞ –∑–∞–¥–∏—à–∫–∞",
            value=f"{luck_bonus.mention} –æ—Ç—Ä–∏–º—É—î +10% –¥–æ —à–∞–Ω—Å—É –ø–µ—Ä–µ–º–æ–≥–∏!",
            inline=False
        )
        
        await interaction.edit_original_response(content=None, embed=embed)
        await asyncio.sleep(3)

        # –í–∏–∑–Ω–∞—á–∏—Ç–∏ –ø–µ—Ä–µ–º–æ–∂—Ü—è
        winner = None
        loser = None
        
        if event_effects.get("random_winner"):
            # –í–∏–ø–∞–¥–∫–æ–≤–∏–π –ø–µ—Ä–µ–º–æ–∂–µ—Ü—å —á–µ—Ä–µ–∑ –≤—Ç—Ä—É—á–∞–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            winner, loser = random.choice([(challenger, target), (target, challenger)])
            battle_text = "üèõÔ∏è **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤—Ç—Ä—É—Ç–∏–≤—Å—è!** –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –≤–∏–ø–∞–¥–∫–æ–≤–æ!"
        
        else:
            # –ù–æ—Ä–º–∞–ª—å–Ω–∞ –¥—É–µ–ª—å –∑ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–º —à–∞–Ω—Å—ñ–≤
            challenger_accuracy = 50
            target_accuracy = 50
            
            # –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –µ—Ñ–µ–∫—Ç–∏ –ø–æ–¥—ñ–π
            if "accuracy_boost" in event_effects:
                for user_id, boost in event_effects["accuracy_boost"].items():
                    if user_id == challenger.id:
                        challenger_accuracy += boost
                    elif user_id == target.id:
                        target_accuracy += boost
            
            if "accuracy_penalty" in event_effects:
                for user_id, penalty in event_effects["accuracy_penalty"].items():
                    if user_id == challenger.id:
                        challenger_accuracy -= penalty
                    elif user_id == target.id:
                        target_accuracy -= penalty
            
            # –ó–∞–¥–∏—à–∫–∞
            if luck_bonus == challenger:
                challenger_accuracy += 10
            else:
                target_accuracy += 10
            
            # –í–∏–∑–Ω–∞—á–∏—Ç–∏ —á–µ—Ä–≥–æ–≤—ñ—Å—Ç—å –ø–æ—Å—Ç—Ä—ñ–ª—ñ–≤
            first_shooter = random.choice([challenger, target])
            second_shooter = target if first_shooter == challenger else challenger
            
            first_accuracy = challenger_accuracy if first_shooter == challenger else target_accuracy
            second_accuracy = target_accuracy if first_shooter == challenger else challenger_accuracy
            
            # –ü–µ—Ä—à–∏–π –ø–æ—Å—Ç—Ä—ñ–ª
            if random.random() * 100 < first_accuracy:
                winner = first_shooter
                loser = second_shooter
                battle_text = f"üéØ **{first_shooter.mention}** –≤–ª—É—á–Ω–æ —Å—Ç—Ä—ñ–ª—è—î –ø–µ—Ä—à–∏–º!"
            else:
                # –î—Ä—É–≥–∏–π –ø–æ—Å—Ç—Ä—ñ–ª
                if random.random() * 100 < second_accuracy:
                    winner = second_shooter
                    loser = first_shooter
                    battle_text = f"üí• **{first_shooter.mention}** –ø—Ä–æ–º–∞—Ö–Ω—É–≤—Å—è! **{second_shooter.mention}** –Ω–µ –¥–∞–≤ –¥—Ä—É–≥–æ–≥–æ —à–∞–Ω—Å—É!"
                else:
                    # –û–±–∏–¥–≤–∞ –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—è - –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –ø–µ—Ä–µ–º–æ–∂–µ—Ü—å
                    winner, loser = random.choice([(challenger, target), (target, challenger)])
                    battle_text = f"üòÖ **–û–±–∏–¥–≤–∞ –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—è!** –ê–ª–µ **{winner.mention}** –≤–∏—è–≤–∏–≤—Å—è —Å–ø—Ä–∏—Ç–Ω—ñ—à–∏–º!"

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ü–ö
        winner_stats = await self.get_user_stats(winner.id, guild_id)
        loser_stats = await self.get_user_stats(loser.id, guild_id)
        
        winner_rank = self.get_rank_info(winner_stats['wins'])
        loser_rank = self.get_rank_info(loser_stats['wins'])
        
        pk_gained = winner_rank['win_reward']
        pk_lost = loser_rank['loss_penalty']
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç
        winner_can_earn = await self.check_daily_limit(winner.id, guild_id)
        if not winner_can_earn:
            pk_gained = 0

        # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        new_winner_balance = min(winner_stats['pk_balance'] + pk_gained, 1000)
        new_loser_balance = max(loser_stats['pk_balance'] - pk_lost, 0)
        
        await db.duel_stats.update_one(
            {"user_id": str(winner.id), "guild_id": guild_id},
            {
                "$inc": {"wins": 1, "daily_pk": pk_gained},
                "$set": {"pk_balance": new_winner_balance}
            }
        )
        
        await db.duel_stats.update_one(
            {"user_id": str(loser.id), "guild_id": guild_id},
            {
                "$inc": {"losses": 1},
                "$set": {"pk_balance": new_loser_balance}
            }
        )
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –¥—É–µ–ª—ñ
        await db.duel_history.insert_one({
            "guild_id": guild_id,
            "winner": str(winner.id),
            "loser": str(loser.id),
            "pk_change": {"winner": pk_gained, "loser": pk_lost},
            "event": random_event["name"] if random_event else None,
            "timestamp": datetime.utcnow()
        })
        
        # –û–Ω–æ–≤–∏—Ç–∏ –∫—É–ª–¥–∞—É–Ω–∏
        self.cooldowns[challenger.id] = datetime.now()
        self.cooldowns[target.id] = datetime.now()

        # –†–µ–∑—É–ª—å—Ç–∞—Ç –¥—É–µ–ª—ñ
        result_embed = discord.Embed(
            title="üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢ –î–£–ï–õ–Ü",
            description=battle_text,
            color=discord.Color.green()
        )
        
        result_embed.add_field(
            name="ü•á –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å",
            value=f"**{winner.mention}**\n+{pk_gained} –ü–ö (–ë–∞–ª–∞–Ω—Å: {new_winner_balance})",
            inline=True
        )
        
        result_embed.add_field(
            name="üíÄ –ü–µ—Ä–µ–º–æ–∂–µ–Ω–∏–π",
            value=f"**{loser.mention}**\n-{pk_lost} –ü–ö (–ë–∞–ª–∞–Ω—Å: {new_loser_balance})",
            inline=True
        )
        
        # –ú–µ–º–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
        meme_comments = [
            "–ï–ø—ñ—á–Ω–∞ –±–∏—Ç–≤–∞ –≤—ñ–∫—ñ–≤!",
            "–¶–µ –±—É–ª–æ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–æ!",
            "–•—Ç–æ—Å—å –≤–∏–∫–ª–∏–∫–∞—î —à–≤–∏–¥–∫—É?",
            "–ú–∞–º–∞, —è –≤ —Ç–µ–ª–µ–≤—ñ–∑–æ—Ä—ñ!",
            "–ö—Ä–∞—Å–∏–≤–æ –∑—ñ–≥—Ä–∞–≤!",
            "–ß–µ–∫–∞–π —Ä–µ–≤–∞–Ω—à!"
        ]
        
        result_embed.set_footer(text=random.choice(meme_comments))
        
        await interaction.edit_original_response(content=None, embed=result_embed)

    async def buy_item_inline(self, interaction, item_id: str):
        """–ö—É–ø–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω—ñ (–¥–ª—è inline –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è)"""
        user_stats = await self.get_user_stats(interaction.user.id, interaction.guild.id)
        item = SHOP_ITEMS[item_id]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å
        if user_stats['pk_balance'] < item['price']:
            await interaction.response.send_message(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ü–ö! –ü–æ—Ç—Ä—ñ–±–Ω–æ {item['price']} –ü–ö, –∞ —É –≤–∞—Å {user_stats['pk_balance']} –ü–ö.",
                ephemeral=True
            )
            return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–ª–æ—Ç–∏ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é
        max_slots = 1 + (user_stats['wins'] // 10)
        if len(user_stats['items']) >= max_slots:
            await interaction.response.send_message(
                f"‚ùå –Ü–Ω–≤–µ–Ω—Ç–∞—Ä –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π! –î–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ—Ç—ñ–≤: {max_slots}",
                ephemeral=True
            )
            return False
        
        # –ö—É–ø–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç
        new_balance = user_stats['pk_balance'] - item['price']
        new_items = user_stats['items'] + [item_id]
        
        await db.duel_stats.update_one(
            {"user_id": str(interaction.user.id), "guild_id": interaction.guild.id},
            {
                "$set": {
                    "pk_balance": new_balance,
                    "items": new_items
                }
            }
        )
        
        await interaction.followup.send(
            f"‚úÖ –ö—É–ø–ª–µ–Ω–æ **{item['name']}** –∑–∞ {item['price']} –ü–ö!\n"
            f"–ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} –ü–ö",
            ephemeral=True
        )
        return True

    @app_commands.command(name="pidor_duel", description="–í–∏–∫–ª–∏–∫–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –¥—É–µ–ª—å")
    @app_commands.describe(user="–ö–æ–≥–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –Ω–∞ –¥—É–µ–ª—å (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ - –±—É–¥–µ –æ–±—Ä–∞–Ω–æ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è)")
    async def pidor_duel_command(self, interaction: discord.Interaction, user: Optional[discord.Member] = None):
        challenger = interaction.user
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫—É–ª–¥–∞—É–Ω
        if not self.check_cooldown(challenger.id):
            remaining = 30 - (datetime.now() - self.cooldowns[challenger.id]).total_seconds()
            await interaction.response.send_message(
                f"‚è∞ –ö—É–ª–¥–∞—É–Ω! –ü–æ—á–µ–∫–∞–π —â–µ {int(remaining)} —Å–µ–∫—É–Ω–¥.",
                ephemeral=True
            )
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç
        if not await self.check_daily_limit(challenger.id, interaction.guild.id):
            await interaction.response.send_message(
                "üìà –î–æ—Å—è–≥–Ω—É—Ç–æ —â–æ–¥–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç –ü–ö (100/–¥–µ–Ω—å). –°–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞!",
                ephemeral=True
            )
            return
        
        # –í–∏–∑–Ω–∞—á–∏—Ç–∏ –æ–ø–æ–Ω–µ–Ω—Ç–∞
        if user:
            target = user
        else:
            # –†–∞–Ω–¥–æ–º–Ω–∏–π –æ–ø–æ–Ω–µ–Ω—Ç
            candidates = [
                m for m in interaction.guild.members 
                if not m.bot and m != challenger and m.status != discord.Status.offline
            ]
            if not candidates:
                await interaction.response.send_message(
                    "üò¥ –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤ –¥–ª—è –¥—É–µ–ª—ñ.",
                    ephemeral=True
                )
                return
            target = random.choice(candidates)
        
        if target == challenger:
            await interaction.response.send_message(
                "ü§° –ù–µ –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Å–µ–±–µ –Ω–∞ –¥—É–µ–ª—å, –≥–µ–Ω—ñ—é!",
                ephemeral=True
            )
            return
        
        if target.bot:
            await interaction.response.send_message(
                "ü§ñ –ë–æ—Ç–∏ –Ω–µ –¥—É–µ–ª—é—é—Ç—å—Å—è. –í–æ–Ω–∏ –∑–∞–π–Ω—è—Ç—ñ —Ä–æ–∑—É–º–Ω–æ—é –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—é.",
                ephemeral=True
            )
            return
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –¥—É–µ–ª—å
        view = DuelRequestView(challenger, target)
        
        challenger_stats = await self.get_user_stats(challenger.id, interaction.guild.id)
        target_stats = await self.get_user_stats(target.id, interaction.guild.id)
        
        challenger_rank = self.get_rank_info(challenger_stats['wins'])
        target_rank = self.get_rank_info(target_stats['wins'])
        
        embed = discord.Embed(
            title="‚öîÔ∏è –í–ò–ö–õ–ò–ö –ù–ê –î–£–ï–õ–¨!",
            description=f"{challenger.mention} –≤–∏–∫–ª–∏–∫–∞—î {target.mention} –Ω–∞ –¥—É–µ–ª—å!",
            color=discord.Color.orange()
        )
        
        embed.add_field(
            name=f"{challenger_rank['emoji']} –ß–µ–ª–ª–µ–Ω–¥–∂–µ—Ä",
            value=f"**{challenger.display_name}**\n{challenger_rank['name']}\n–ü–µ—Ä–µ–º–æ–≥–∏: {challenger_stats['wins']}",
            inline=True
        )
        
        embed.add_field(
            name=f"{target_rank['emoji']} –û–ø–æ–Ω–µ–Ω—Ç", 
            value=f"**{target.display_name}**\n{target_rank['name']}\n–ü–µ—Ä–µ–º–æ–≥–∏: {target_stats['wins']}",
            inline=True
        )
        
        embed.set_footer(text="–£ –æ–ø–æ–Ω–µ–Ω—Ç–∞ —î 60 —Å–µ–∫—É–Ω–¥ —â–æ–± –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏!")
        
        await interaction.response.send_message(
            content=f"{target.mention}, —Ç–µ–±–µ –≤–∏–∫–ª–∏–∫–∞—é—Ç—å –Ω–∞ –¥—É–µ–ª—å!",
            embed=embed,
            view=view
        )

    @app_commands.command(name="pidor_profile", description="–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –≥—Ä–∞–≤—Ü—è –∑ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º —Ç–∞ –º–∞–≥–∞–∑–∏–Ω–æ–º")
    @app_commands.describe(user="–ß–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –ø–æ–∫–∞–∑–∞—Ç–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - —Å–≤—ñ–π)")
    async def pidor_profile_command(self, interaction: discord.Interaction, user: Optional[discord.Member] = None):
        target_user = user or interaction.user
        
        view = ProfileView(interaction.user, target_user)
        embed = await view.get_profile_embed(interaction)
        await view.update_view(interaction)
        
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

    @app_commands.command(name="pidor_shop", description="–í—ñ–¥–∫—Ä–∏—Ç–∏ –º–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–¥–º–µ—Ç—ñ–≤")
    async def pidor_shop_command(self, interaction: discord.Interaction):
        stats = await self.get_user_stats(interaction.user.id, interaction.guild.id)
        
        embed = discord.Embed(
            title="üõçÔ∏è –ú–ê–ì–ê–ó–ò–ù –ü–†–ï–î–ú–ï–¢–Ü–í",
            description=f"–í–∞—à –±–∞–ª–∞–Ω—Å: **{stats['pk_balance']} –ü–ö**",
            color=discord.Color.gold()
        )
        
        for item_id, item in SHOP_ITEMS.items():
            embed.add_field(
                name=f"{item['name']} - {item['price']} –ü–ö",
                value=f"‚úÖ {item['buff']}\n‚ùå {item['debuff']}",
                inline=True
            )
        
        max_slots = 1 + (stats['wins'] // 10)
        embed.set_footer(text=f"–°–ª–æ—Ç—ñ–≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é: {len(stats['items'])}/{max_slots}")
        
        view = ShopView(interaction.user)
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

    @app_commands.command(name="pidor_leaderboard", description="–ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤")
    async def pidor_leaderboard_command(self, interaction: discord.Interaction):
        # –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–ø-10 –≥—Ä–∞–≤—Ü—ñ–≤
        top_players = await db.duel_stats.find(
            {"guild_id": interaction.guild.id}
        ).sort("wins", -1).limit(10).to_list(length=10)
        
        if not top_players:
            await interaction.response.send_message(
                "üìä –©–µ –Ω—ñ—Ö—Ç–æ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–≤ –¥—É–µ–ª–µ–π –Ω–∞ —Ü—å–æ–º—É —Å–µ—Ä–≤–µ—Ä—ñ!",
                ephemeral=True
            )
            return
        
        embed = discord.Embed(
            title="üèÜ –¢–ê–ë–õ–ò–¶–Ø –õ–Ü–î–ï–†–Ü–í",
            color=discord.Color.gold()
        )
        
        medals = ["ü•á", "ü•à", "ü•â"] + ["üèÖ"] * 7
        
        leaderboard_text = ""
        for i, player_stats in enumerate(top_players):
            try:
                user = interaction.guild.get_member(int(player_stats['user_id']))
                if user:
                    rank_info = self.get_rank_info(player_stats['wins'])
                    win_rate = (player_stats['wins'] / max(player_stats['wins'] + player_stats['losses'], 1)) * 100
                    
                    leaderboard_text += (
                        f"{medals[i]} **{user.display_name}** {rank_info['emoji']}\n"
                        f"   –ü–µ—Ä–µ–º–æ–≥–∏: {player_stats['wins']} | "
                        f"–í—ñ–Ω-—Ä–µ–π—Ç: {win_rate:.1f}% | "
                        f"–ü–ö: {player_stats['pk_balance']}\n\n"
                    )
            except (ValueError, AttributeError):
                continue
        
        embed.description = leaderboard_text or "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤"
        
        await interaction.response.send_message(embed=embed)

        # –î–æ–¥–∞–º–æ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é
        
    @app_commands.command(name="pidor_inventory", description="–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–≤—ñ–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –ø—Ä–µ–¥–º–µ—Ç—ñ–≤")
    async def pidor_inventory_command(self, interaction: discord.Interaction):
        stats = await self.get_user_stats(interaction.user.id, interaction.guild.id)
        
        embed = discord.Embed(
            title="üéí –í–ê–® –Ü–ù–í–ï–ù–¢–ê–†",
            color=discord.Color.purple()
        )
        
        if not stats['items']:
            embed.description = "–í–∞—à —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –ø–æ—Ä–æ–∂–Ω—ñ–π. –ö—É–ø—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∏ –≤ `/pidor_shop`!"
        else:
            items_text = ""
            for i, item_id in enumerate(stats['items'], 1):
                item = SHOP_ITEMS[item_id]
                items_text += f"**{i}.** {item['name']}\n"
                items_text += f"   ‚úÖ {item['buff']}\n"
                items_text += f"   ‚ùå {item['debuff']}\n\n"
            embed.description = items_text
        
        max_slots = 1 + (stats['wins'] // 10)
        embed.set_footer(text=f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ —Å–ª–æ—Ç—ñ–≤: {len(stats['items'])}/{max_slots}")
        
        await interaction.response.send_message(embed=embed, ephemeral=True)
    
    @app_commands.command(name="pidor_stats", description="–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥—É–µ–ª–µ–π —Å–µ—Ä–≤–µ—Ä–∞")
    async def pidor_stats_command(self, interaction: discord.Interaction):
        # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        total_duels = await db.duel_history.count_documents({"guild_id": interaction.guild.id})
        total_players = await db.duel_stats.count_documents({"guild_id": interaction.guild.id})
        
        # –ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à–∏–π –≥—Ä–∞–≤–µ—Ü—å
        most_active = await db.duel_stats.find_one(
            {"guild_id": interaction.guild.id},
            sort=[("wins", -1), ("losses", -1)]
        )
        
        embed = discord.Embed(
            title="üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–£–ï–õ–ï–ô –°–ï–†–í–ï–†–ê",
            color=discord.Color.blue()
        )
        
        embed.add_field(
            name="üéØ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            value=f"–í—Å—å–æ–≥–æ –¥—É–µ–ª–µ–π: **{total_duels}**\n–ê–∫—Ç–∏–≤–Ω–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤: **{total_players}**",
            inline=False
        )
        
        if most_active:
            try:
                user = interaction.guild.get_member(int(most_active['user_id']))
                if user:
                    rank_info = self.get_rank_info(most_active['wins'])
                    embed.add_field(
                        name="üëë –ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à–∏–π –≥—Ä–∞–≤–µ—Ü—å",
                        value=f"**{user.display_name}** {rank_info['emoji']}\n"
                              f"–ü–µ—Ä–µ–º–æ–≥–∏: {most_active['wins']}\n"
                              f"–ü–æ—Ä–∞–∑–∫–∏: {most_active['losses']}",
                        inline=True
                    )
            except:
                pass
        
        # –û—Å—Ç–∞–Ω–Ω—ñ –¥—É–µ–ª—ñ
        recent_duels = await db.duel_history.find(
            {"guild_id": interaction.guild.id}
        ).sort("timestamp", -1).limit(5).to_list(length=5)
        
        if recent_duels:
            recent_text = ""
            for duel in recent_duels:
                try:
                    winner = interaction.guild.get_member(int(duel['winner']))
                    loser = interaction.guild.get_member(int(duel['loser']))
                    if winner and loser:
                        recent_text += f"‚Ä¢ **{winner.display_name}** –ø–µ—Ä–µ–º—ñ–≥ **{loser.display_name}**\n"
                except:
                    continue
            
            if recent_text:
                embed.add_field(
                    name="üïê –û—Å—Ç–∞–Ω–Ω—ñ 5 –¥—É–µ–ª–µ–π",
                    value=recent_text,
                    inline=False
                )
        
        await interaction.response.send_message(embed=embed)

async def setup(bot):
    await bot.add_cog(DuelSystem(bot))