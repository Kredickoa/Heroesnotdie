import discord
from discord.ext import commands
from discord import app_commands
from datetime import datetime, timedelta
import random
import asyncio
from typing import Optional, Dict, List
from modules.db import get_database
from ._constants import RANKS, RANK_DESCRIPTIONS, SHOP_ITEMS, RANDOM_EVENTS
from .views import DuelRequestView, DuelBattleView

db = get_database()

class PidorDuelCommand(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.cooldowns = {}
        self.daily_limits = {}

    async def get_user_stats(self, user_id: int, guild_id: int) -> Dict:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        stats = await db.duel_stats.find_one({"user_id": str(user_id), "guild_id": guild_id})
        if not stats:
            stats = {
                "user_id": str(user_id),
                "guild_id": guild_id,
                "wins": 0,
                "losses": 0,
                "pk_balance": 0,
                "items": [],
                "debuffs": {},
                "daily_pk": 0,
                "last_pk_date": None
            }
            await db.duel_stats.insert_one(stats)
        return stats

    def get_rank_info(self, wins: int) -> Dict:
        """–í–∏–∑–Ω–∞—á–∏—Ç–∏ —Ä–∞–Ω–≥ –≥—Ä–∞–≤—Ü—è –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø–µ—Ä–µ–º–æ–≥"""
        for i, rank in enumerate(RANKS):
            if rank["min_wins"] <= wins <= rank["max_wins"]:
                rank_copy = rank.copy()
                rank_copy["description"] = RANK_DESCRIPTIONS[i]
                return rank_copy
        return RANKS[-1]

    def check_cooldown(self, user_id: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫—É–ª–¥–∞—É–Ω –≥—Ä–∞–≤—Ü—è"""
        if user_id in self.cooldowns:
            time_diff = datetime.now() - self.cooldowns[user_id]
            return time_diff.total_seconds() >= 30
        return True

    async def check_daily_limit(self, user_id: int, guild_id: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç –ü–ö"""
        today = datetime.now().date().isoformat()
        stats = await self.get_user_stats(user_id, guild_id)
        
        if stats.get("last_pk_date") != today:
            await db.duel_stats.update_one(
                {"user_id": str(user_id), "guild_id": guild_id},
                {"$set": {"daily_pk": 0, "last_pk_date": today}}
            )
            return True
        
        return stats.get("daily_pk", 0) < 100

    async def execute_duel(self, interaction, challenger, target):
        """–í–∏–∫–æ–Ω–∞—Ç–∏ –¥—É–µ–ª—å –º—ñ–∂ –¥–≤–æ–º–∞ –≥—Ä–∞–≤—Ü—è–º–∏"""
        guild_id = interaction.guild.id
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä–∞–≤—Ü—ñ–≤
        challenger_stats = await self.get_user_stats(challenger.id, guild_id)
        target_stats = await self.get_user_stats(target.id, guild_id)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤—É –ø–æ–¥—ñ—é (5-7% —à–∞–Ω—Å)
        event_chance = random.uniform(5, 7)
        random_event = None
        event_effects = {}
        
        if random.random() * 100 < event_chance:
            random_event = random.choice(RANDOM_EVENTS)
            
            # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–¥—ñ—é
            event_embed = discord.Embed(
                title="üé≤ –í–ò–ü–ê–î–ö–û–í–ê –ü–û–î–Ü–Ø!",
                description=f"**{random_event['name']}**\n{random_event['description']}",
                color=0xE67E22
            )
            await interaction.edit_original_response(embed=event_embed)
            await asyncio.sleep(3)
            
            # –û–±—Ä–æ–±–∏—Ç–∏ –µ—Ñ–µ–∫—Ç–∏ –ø–æ–¥—ñ—ó
            if random_event["name"] == "DDoS –∞—Ç–∞–∫–∞":
                await interaction.edit_original_response(
                    embed=discord.Embed(
                        title="üí• DDoS –ê–¢–ê–ö!",
                        description="–î—É–µ–ª—å –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...",
                        color=0xE74C3C
                    )
                )
                await asyncio.sleep(10)
                return await self.execute_duel(interaction, challenger, target)
            
            elif random_event["name"] == "–í—Ç—Ä—É—á–∞–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞":
                event_effects["random_winner"] = True
            elif random_event["name"] == "–ß–∏—Ç–µ—Ä—Å—å–∫–∏–π —Å–æ—Ñ—Ç":
                lucky_player = random.choice([challenger, target])
                event_effects["accuracy_boost"] = {lucky_player.id: 25}
            elif random_event["name"] == "–ê–ª–∫–æ–≥–æ–ª—å–Ω–µ –æ—Ç—Ä—É—î–Ω–Ω—è":
                unlucky_player = random.choice([challenger, target])
                event_effects["accuracy_penalty"] = {unlucky_player.id: 15}

        # –í–∏–∑–Ω–∞—á–∏—Ç–∏ –ø–µ—Ä—à–æ–≥–æ —Å—Ç—Ä—ñ–ª—å—Ü—è
        first_shooter = random.choice([challenger, target])
        second_shooter = target if first_shooter == challenger else challenger
        luck_bonus = random.choice([challenger, target])
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—á–∞—Ç–æ–∫ –¥—É–µ–ª—ñ
        battle_embed = discord.Embed(
            title="‚öîÔ∏è –î–£–ï–õ–¨ –†–û–ó–ü–û–ß–ê–¢–û!",
            description=f"<:dart:1405489296411988040> **{first_shooter.mention}** —Å—Ç—Ä—ñ–ª—è—î –ø–µ—Ä—à–∏–º!",
            color=0xE74C3C
        )
        
        challenger_rank = self.get_rank_info(challenger_stats['wins'])
        target_rank = self.get_rank_info(target_stats['wins'])
        
        battle_embed.add_field(
            name=f"{challenger_rank['emoji']} –ß–µ–ª–ª–µ–Ω–¥–∂–µ—Ä",
            value=f"**{challenger.display_name}**\n<:trophy:1405488585372860517> –ü–µ—Ä–µ–º–æ–≥–∏: {challenger_stats['wins']}",
            inline=True
        )
        
        battle_embed.add_field(
            name="üÜö", 
            value="**VS**", 
            inline=True
        )
        
        battle_embed.add_field(
            name=f"{target_rank['emoji']} –û–ø–æ–Ω–µ–Ω—Ç",
            value=f"**{target.display_name}**\n<:trophy:1405488585372860517> –ü–µ—Ä–µ–º–æ–≥–∏: {target_stats['wins']}",
            inline=True
        )
        
        if random_event:
            battle_embed.add_field(
                name="üé≤ –ê–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥—ñ—è",
                value=f"**{random_event['name']}**",
                inline=False
            )
        
        battle_embed.add_field(
            name="üçÄ –†–∞–Ω–¥–æ–º–Ω–∞ –∑–∞–¥–∏—à–∫–∞",
            value=f"{luck_bonus.mention} –æ—Ç—Ä–∏–º—É—î +10% –¥–æ —à–∞–Ω—Å—É!",
            inline=False
        )
        
        battle_embed.set_footer(text="–°—Ç—Ä—ñ–ª—è–π –ø–æ–∫–∏ –Ω–µ –ø—ñ–∑–Ω–æ!")
        
        # –ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –±–æ—é
        battle_info = {
            "challenger": challenger,
            "target": target, 
            "first_shooter": first_shooter,
            "second_shooter": second_shooter,
            "event_effects": event_effects,
            "luck_bonus": luck_bonus,
            "random_event": random_event,
            "guild_id": guild_id
        }
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ view –∑ –∫–Ω–æ–ø–∫–æ—é –ø–æ—Å—Ç—Ä—ñ–ª—É
        view = DuelBattleView(first_shooter, second_shooter, battle_info, self, interaction)
        
        await interaction.edit_original_response(embed=battle_embed, view=view)

    async def process_shot(self, interaction, shooter, opponent, battle_info, first_shot=True, auto_miss=False):
        """–û–±—Ä–æ–±–∏—Ç–∏ –ø–æ—Å—Ç—Ä—ñ–ª –≥—Ä–∞–≤—Ü—è"""
        
        # –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ç–æ—á–Ω—ñ—Å—Ç—å
        accuracy = 50
        
        # –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –µ—Ñ–µ–∫—Ç–∏ –ø–æ–¥—ñ–π
        event_effects = battle_info.get("event_effects", {})
        if "accuracy_boost" in event_effects and shooter.id in event_effects["accuracy_boost"]:
            accuracy += event_effects["accuracy_boost"][shooter.id]
        if "accuracy_penalty" in event_effects and shooter.id in event_effects["accuracy_penalty"]:
            accuracy -= event_effects["accuracy_penalty"][shooter.id]
        
        # –ó–∞–¥–∏—à–∫–∞
        if battle_info.get("luck_bonus") == shooter:
            accuracy += 10
        
        # –í–∏–∑–Ω–∞—á–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å—Ç—Ä—ñ–ª—É
        hit = not auto_miss and random.random() * 100 < accuracy
        
        if hit or event_effects.get("random_winner"):
            # –í–ª—É—á–∞–Ω–Ω—è - –≥—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞
            winner = shooter
            loser = opponent
            
            if event_effects.get("random_winner"):
                winner, loser = random.choice([(battle_info["challenger"], battle_info["target"]), 
                                             (battle_info["target"], battle_info["challenger"])])
                result_text = f"üõ°Ô∏è **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤—Ç—Ä—É—Ç–∏–≤—Å—è!** {winner.mention} –ø–µ—Ä–µ–ºi–≥!"
            else:
                result_text = f"<:dart:1405489296411988040> **{winner.mention}** –≤–ª—É—á–Ω–æ —Å—Ç—Ä—ñ–ª—è–≤! –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π!"
            
            await self.finish_duel(interaction, winner, loser, battle_info, result_text)
            
        else:
            # –ü—Ä–æ–º–∞—Ö - —á–µ—Ä–≥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–æ —ñ–Ω—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è
            if first_shot:
                miss_embed = discord.Embed(
                    title="üí• –ü–†–û–ú–ê–•!",
                    description=f"**{shooter.mention}** –ø—Ä–æ–º–∞—Ö–Ω—É–≤—Å—è!\n–ß–µ—Ä–≥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–æ **{opponent.mention}**!",
                    color=0xF39C12
                )
                
                # –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∫–Ω–æ–ø–∫—É –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —Å—Ç—Ä—ñ–ª—å—Ü—è
                view = DuelBattleView(opponent, shooter, battle_info, self, interaction)
                await interaction.edit_original_response(embed=miss_embed, view=view)
            else:
                # –û–±–∏–¥–≤–∞ –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—è - –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –ø–µ—Ä–µ–º–æ–∂–µ—Ü—å
                winner, loser = random.choice([(battle_info["challenger"], battle_info["target"]),
                                             (battle_info["target"], battle_info["challenger"])])
                result_text = f"üòÖ **–û–±–∏–¥–≤–∞ –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—è!** –ê–ª–µ **{winner.mention}** –≤–∏—è–≤–∏–≤—Å—è —Å–ø—Ä–∏—Ç–Ω—ñ—à–∏–º!"
                
                await self.finish_duel(interaction, winner, loser, battle_info, result_text)

    async def finish_duel(self, interaction, winner, loser, battle_info, battle_text):
        """–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—É–µ–ª—å —Ç–∞ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        guild_id = battle_info["guild_id"]
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        winner_stats = await self.get_user_stats(winner.id, guild_id)
        loser_stats = await self.get_user_stats(loser.id, guild_id)
        
        winner_rank = self.get_rank_info(winner_stats['wins'])
        loser_rank = self.get_rank_info(loser_stats['wins'])
        
        # –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –ü–ö
        pk_gained = winner_rank['win_reward']
        pk_lost = loser_rank['loss_penalty']
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç
        winner_can_earn = await self.check_daily_limit(winner.id, guild_id)
        if not winner_can_earn:
            pk_gained = 0

        # –û–Ω–æ–≤–∏—Ç–∏ –±–∞–ª–∞–Ω—Å
        new_winner_balance = min(winner_stats['pk_balance'] + pk_gained, 1000)
        new_loser_balance = max(loser_stats['pk_balance'] - pk_lost, 0)
        
        # –û–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        await db.duel_stats.update_one(
            {"user_id": str(winner.id), "guild_id": guild_id},
            {
                "$inc": {"wins": 1, "daily_pk": pk_gained},
                "$set": {"pk_balance": new_winner_balance}
            }
        )
        
        await db.duel_stats.update_one(
            {"user_id": str(loser.id), "guild_id": guild_id},
            {
                "$inc": {"losses": 1},
                "$set": {"pk_balance": new_loser_balance}
            }
        )
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é
        await db.duel_history.insert_one({
            "guild_id": guild_id,
            "winner": str(winner.id),
            "loser": str(loser.id),
            "pk_change": {"winner": pk_gained, "loser": pk_lost},
            "event": battle_info.get("random_event", {}).get("name") if battle_info.get("random_event") else None,
            "timestamp": datetime.utcnow()
        })
        
        # –û–Ω–æ–≤–∏—Ç–∏ –∫—É–ª–¥–∞—É–Ω–∏
        self.cooldowns[battle_info["challenger"].id] = datetime.now()
        self.cooldowns[battle_info["target"].id] = datetime.now()

        # –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_embed = discord.Embed(
            title="üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢ –î–£–ï–õ–Ü",
            description=battle_text,
            color=0x2ECC71
        )
        
        result_embed.add_field(
            name="ü•á –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å",
            value=f"**{winner.mention}**\n+{pk_gained} –ü–ö\n<:bank:1405489965244088340> –ë–∞–ª–∞–Ω—Å: {new_winner_balance} –ü–ö",
            inline=True
        )
        
        result_embed.add_field(
            name="üíÄ –ü–µ—Ä–µ–º–æ–∂–µ–Ω–∏–π",
            value=f"**{loser.mention}**\n-{pk_lost} –ü–ö\n<:bank:1405489965244088340> –ë–∞–ª–∞–Ω—Å: {new_loser_balance} –ü–ö",
            inline=True
        )
        
        meme_comments = [
            "–ï–ø—ñ—á–Ω–∞ –±–∏—Ç–≤–∞ –≤—ñ–∫—ñ–≤!",
            "–¶–µ –±—É–ª–æ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–æ!",
            "–•—Ç–æ—Å—å –≤–∏–∫–ª–∏–∫–∞—î —à–≤–∏–¥–∫—É?",
            "–ú–∞–º–∞, —è –≤ —Ç–µ–ª–µ–≤—ñ–∑–æ—Ä—ñ!",
            "–ö—Ä–∞—Å–∏–≤–æ –∑—ñ–≥—Ä–∞–≤!",
            "–ß–µ–∫–∞–π —Ä–µ–≤–∞–Ω—à!",
            "–¶–µ –±—É–ª–∞ –ª–µ–≥–∫–∞ –ø–µ—Ä–µ–º–æ–≥–∞!",
            "–ü–æ–≤–Ω–∏–π —Ä–æ–∑–≥—Ä–æ–º!",
            "–ú–∞–π–∂–µ —è–∫ —É –∫—ñ–Ω–æ!",
            "–ü—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª —É –¥—ñ—ó!"
        ]
        
        result_embed.set_footer(text=random.choice(meme_comments))
        
        await interaction.edit_original_response(embed=result_embed, view=None)

    @app_commands.command(name="pidor_duel", description="–í–∏–∫–ª–∏–∫–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –¥—É–µ–ª—å")
    @app_commands.describe(user="–ö–æ–≥–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –Ω–∞ –¥—É–µ–ª—å (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ - –±—É–¥–µ –æ–±—Ä–∞–Ω–æ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è)")
    async def pidor_duel_command(self, interaction: discord.Interaction, user: Optional[discord.Member] = None):
        challenger = interaction.user
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫—É–ª–¥–∞—É–Ω
        if not self.check_cooldown(challenger.id):
            remaining = 30 - (datetime.now() - self.cooldowns[challenger.id]).total_seconds()
            await interaction.response.send_message(
                f"‚è∞ –ö—É–ª–¥–∞—É–Ω! –ü–æ—á–µ–∫–∞–π —â–µ {int(remaining)} —Å–µ–∫—É–Ω–¥.",
                ephemeral=True
            )
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç
        if not await self.check_daily_limit(challenger.id, interaction.guild.id):
            await interaction.response.send_message(
                "üìà –î–æ—Å—è–≥–Ω—É—Ç–æ —â–æ–¥–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç –ü–ö (100/–¥–µ–Ω—å). –°–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞!",
                ephemeral=True
            )
            return
        
        # –í–∏–∑–Ω–∞—á–∏—Ç–∏ –æ–ø–æ–Ω–µ–Ω—Ç–∞
        if user:
            target = user
        else:
            # –†–∞–Ω–¥–æ–º–Ω–∏–π –æ–ø–æ–Ω–µ–Ω—Ç
            candidates = [
                m for m in interaction.guild.members 
                if not m.bot and m != challenger and m.status != discord.Status.offline
            ]
            if not candidates:
                await interaction.response.send_message(
                    "üò¥ –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤ –¥–ª—è –¥—É–µ–ª—ñ.",
                    ephemeral=True
                )
                return
            target = random.choice(candidates)
        
        if target == challenger:
            await interaction.response.send_message(
                "ü§° –ù–µ –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Å–µ–±–µ –Ω–∞ –¥—É–µ–ª—å, –≥–µ–Ω—ñ—é!",
                ephemeral=True
            )
            return
        
        if target.bot:
            await interaction.response.send_message(
                "ü§ñ –ë–æ—Ç–∏ –Ω–µ –¥—É–µ–ª—é—é—Ç—å—Å—è. –í–æ–Ω–∏ –∑–∞–π–Ω—è—Ç—ñ —Ä–æ–∑—É–º–Ω–æ—é –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—é.",
                ephemeral=True
            )
            return
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –¥—É–µ–ª—å
        view = DuelRequestView(challenger, target)
        
        challenger_stats = await self.get_user_stats(challenger.id, interaction.guild.id)
        target_stats = await self.get_user_stats(target.id, interaction.guild.id)
        
        challenger_rank = self.get_rank_info(challenger_stats['wins'])
        target_rank = self.get_rank_info(target_stats['wins'])
        
        embed = discord.Embed(
            title="‚öîÔ∏è –í–ò–ö–õ–ò–ö –ù–ê –î–£–ï–õ–¨!",
            description=f"<:pistol:1405488178978095246> {challenger.mention} –≤–∏–∫–ª–∏–∫–∞—î {target.mention} –Ω–∞ –¥—É–µ–ª—å!",
            color=0xE67E22
        )
        
        embed.add_field(
            name=f"{challenger_rank['emoji']} –ß–µ–ª–ª–µ–Ω–¥–∂–µ—Ä",
            value=f"**{challenger.display_name}**\n{challenger_rank['name']}\n<:trophy:1405488585372860517> –ü–µ—Ä–µ–º–æ–≥–∏: {challenger_stats['wins']}",
            inline=True
        )
        
        embed.add_field(
            name=f"{target_rank['emoji']} –û–ø–æ–Ω–µ–Ω—Ç", 
            value=f"**{target.display_name}**\n{target_rank['name']}\n<:trophy:1405488585372860517> –ü–µ—Ä–µ–º–æ–≥–∏: {target_stats['wins']}",
            inline=True
        )
        
        embed.set_footer(text="–£ –æ–ø–æ–Ω–µ–Ω—Ç–∞ —î 60 —Å–µ–∫—É–Ω–¥ —â–æ–± –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏!")
        
        await interaction.response.send_message(
            content=f"{target.mention}, —Ç–µ–±–µ –≤–∏–∫–ª–∏–∫–∞—é—Ç—å –Ω–∞ –¥—É–µ–ª—å!",
            embed=embed,
            view=view
        )

async def setup(bot):
    await bot.add_cog(PidorDuelCommand(bot))