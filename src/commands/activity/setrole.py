import discord
from discord import app_commands
from discord.ext import commands, tasks
from datetime import datetime, timedelta
from modules.db import get_database

db = get_database()

class AutomatedRoleSystem(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.daily_role_check.start()

    def cog_unload(self):
        self.daily_role_check.cancel()

    role_system = app_commands.Group(name="roles", description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π")

    @role_system.command(name="setup", description="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö —Ä–æ–ª–µ–π —Ç–∞ –∫–∞–Ω–∞–ª—É –∑–≤—ñ—Ç—ñ–≤")
    @app_commands.default_permissions(manage_roles=True)
    @app_commands.describe(
        –¥—ñ—è="–¢–∏–ø –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
        —Ä–æ–ª—å="–†–æ–ª—å –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (–Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–ª—è –∫–∞–Ω–∞–ª—É)",
        –∑–Ω–∞—á–µ–Ω–Ω—è1="–†—ñ–≤–µ–Ω—å (–¥–ª—è –∞–≤—Ç–æ–≤–∏–¥–∞—á—ñ) –∞–±–æ –î–Ω—ñ (–¥–ª—è –∞–≤—Ç–æ–∑–Ω—è—Ç—Ç—è)",
        –∑–Ω–∞—á–µ–Ω–Ω—è2="–ú—ñ–Ω—ñ–º—É–º XP –∑–∞ –ø–µ—Ä—ñ–æ–¥ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–≤—Ç–æ–∑–Ω—è—Ç—Ç—è)",
        –∫–∞–Ω–∞–ª="–ö–∞–Ω–∞–ª –¥–ª—è –∑–≤—ñ—Ç—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É)"
    )
    @app_commands.choices(–¥—ñ—è=[
        app_commands.Choice(name="üéØ –ê–≤—Ç–æ–≤–∏–¥–∞—á–∞ –∑–∞ —Ä—ñ–≤–Ω–µ–º", value="level"),
        app_commands.Choice(name="üóëÔ∏è –ê–≤—Ç–æ–∑–Ω—è—Ç—Ç—è –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", value="inactive"),
        app_commands.Choice(name="üìä –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–∞–Ω–∞–ª –∑–≤—ñ—Ç—ñ–≤", value="channel"),
        app_commands.Choice(name="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ä–æ–ª—å", value="delete")
    ])
    async def setup(
        self, 
        interaction: discord.Interaction, 
        –¥—ñ—è: app_commands.Choice[str],
        —Ä–æ–ª—å: discord.Role = None,
        –∑–Ω–∞—á–µ–Ω–Ω—è1: int = None,
        –∑–Ω–∞—á–µ–Ω–Ω—è2: int = None,
        –∫–∞–Ω–∞–ª: discord.TextChannel = None
    ):
        await interaction.response.defer(ephemeral=True)

        if db is None:
            await interaction.followup.send("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!")
            return

        guild = interaction.guild

        try:
            if –¥—ñ—è.value == "level":
                # –ê–≤—Ç–æ–≤–∏–¥–∞—á–∞ –∑–∞ —Ä—ñ–≤–Ω–µ–º
                if not —Ä–æ–ª—å or not –∑–Ω–∞—á–µ–Ω–Ω—è1:
                    await interaction.followup.send("‚ùå –î–ª—è –∞–≤—Ç–æ–≤–∏–¥–∞—á—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Ä–æ–ª—å —Ç–∞ —Ä—ñ–≤–µ–Ω—å!")
                    return

                if –∑–Ω–∞—á–µ–Ω–Ω—è1 <= 0:
                    await interaction.followup.send("‚ùå –†—ñ–≤–µ–Ω—å –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0!")
                    return

                await db.auto_roles.update_one(
                    {"guild_id": str(guild.id), "role_id": str(—Ä–æ–ª—å.id)},
                    {
                        "$set": {
                            "guild_id": str(guild.id),
                            "role_id": str(—Ä–æ–ª—å.id),
                            "type": "level",
                            "required_level": –∑–Ω–∞—á–µ–Ω–Ω—è1,
                            "enabled": True,
                            "created_by": interaction.user.id,
                            "created_at": datetime.utcnow()
                        }
                    },
                    upsert=True
                )

                result = f"```\n‚úÖ –ê–í–¢–û–í–ò–î–ê–ß–ê –ù–ê–õ–ê–®–¢–û–í–ê–ù–ê\n\n"
                result += f"–†–æ–ª—å: {—Ä–æ–ª—å.name}\n"
                result += f"–†—ñ–≤–µ–Ω—å: {–∑–Ω–∞—á–µ–Ω–Ω—è1}\n```"

            elif –¥—ñ—è.value == "inactive":
                # –ê–≤—Ç–æ–∑–Ω—è—Ç—Ç—è –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
                if not —Ä–æ–ª—å or not –∑–Ω–∞—á–µ–Ω–Ω—è1 or not –∑–Ω–∞—á–µ–Ω–Ω—è2:
                    await interaction.followup.send("‚ùå –î–ª—è –∞–≤—Ç–æ–∑–Ω—è—Ç—Ç—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Ä–æ–ª—å, –¥–Ω—ñ —Ç–∞ –º—ñ–Ω—ñ–º—É–º XP!")
                    return

                if –∑–Ω–∞—á–µ–Ω–Ω—è1 <= 0 or –∑–Ω–∞—á–µ–Ω–Ω—è2 <= 0:
                    await interaction.followup.send("‚ùå –î–Ω—ñ —Ç–∞ XP –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0!")
                    return

                await db.auto_roles.update_one(
                    {"guild_id": str(guild.id), "role_id": str(—Ä–æ–ª—å.id)},
                    {
                        "$set": {
                            "guild_id": str(guild.id),
                            "role_id": str(—Ä–æ–ª—å.id),
                            "type": "inactive",
                            "check_days": –∑–Ω–∞—á–µ–Ω–Ω—è1,
                            "min_xp": –∑–Ω–∞—á–µ–Ω–Ω—è2,
                            "enabled": True,
                            "created_by": interaction.user.id,
                            "created_at": datetime.utcnow()
                        }
                    },
                    upsert=True
                )

                result = f"```\nüóëÔ∏è –ê–í–¢–û–ó–ù–Ø–¢–¢–Ø –ù–ê–õ–ê–®–¢–û–í–ê–ù–û\n\n"
                result += f"–†–æ–ª—å: {—Ä–æ–ª—å.name}\n"
                result += f"–ü–µ—Ä—ñ–æ–¥: {–∑–Ω–∞—á–µ–Ω–Ω—è1} –¥–Ω—ñ–≤\n"
                result += f"–ú—ñ–Ω. XP: {–∑–Ω–∞—á–µ–Ω–Ω—è2}\n```"

            elif –¥—ñ—è.value == "channel":
                # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É –∑–≤—ñ—Ç—ñ–≤
                if not –∫–∞–Ω–∞–ª:
                    await interaction.followup.send("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –∑–≤—ñ—Ç—ñ–≤!")
                    return

                await db.guild_settings.update_one(
                    {"guild_id": str(guild.id)},
                    {
                        "$set": {
                            "guild_id": str(guild.id),
                            "report_channel_id": str(–∫–∞–Ω–∞–ª.id),
                            "updated_by": interaction.user.id,
                            "updated_at": datetime.utcnow()
                        }
                    },
                    upsert=True
                )

                result = f"```\nüìä –ö–ê–ù–ê–õ –í–°–¢–ê–ù–û–í–õ–ï–ù–û\n\n"
                result += f"–ö–∞–Ω–∞–ª: #{–∫–∞–Ω–∞–ª.name}\n```"

            elif –¥—ñ—è.value == "delete":
                # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–ª—ñ
                if not —Ä–æ–ª—å:
                    await interaction.followup.send("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Ä–æ–ª—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è!")
                    return

                result_db = await db.auto_roles.delete_one({
                    "guild_id": str(guild.id),
                    "role_id": str(—Ä–æ–ª—å.id)
                })

                if result_db.deleted_count > 0:
                    result = f"```\n‚úÖ –í–ò–î–ê–õ–ï–ù–û\n\n"
                    result += f"–†–æ–ª—å: {—Ä–æ–ª—å.name}\n```"
                else:
                    result = f"```\n‚ùå –ù–ï –ó–ù–ê–ô–î–ï–ù–û\n\n"
                    result += f"–†–æ–ª—å: {—Ä–æ–ª—å.name}\n```"

            await interaction.followup.send(result)

        except Exception as e:
            await interaction.followup.send(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

    @role_system.command(name="manage", description="–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–æ—é: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —Å—Ç–∞–Ω")
    @app_commands.default_permissions(manage_roles=True)
    @app_commands.describe(–¥—ñ—è="–î—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è")
    @app_commands.choices(–¥—ñ—è=[
        app_commands.Choice(name="‚öôÔ∏è –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏", value="status"),
        app_commands.Choice(name="üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∑–∞—Ä–∞–∑", value="check")
    ])
    async def manage(self, interaction: discord.Interaction, –¥—ñ—è: app_commands.Choice[str]):
        await interaction.response.defer(ephemeral=True)

        if db is None:
            await interaction.followup.send("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!")
            return

        guild = interaction.guild

        try:
            if –¥—ñ—è.value == "status":
                # –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏
                auto_roles = await db.auto_roles.find({"guild_id": str(guild.id), "enabled": True}).to_list(100)
                guild_settings = await db.guild_settings.find_one({"guild_id": str(guild.id)})

                result = "```\n‚öôÔ∏è –°–¢–ê–ù –°–ò–°–¢–ï–ú–ò\n\n"

                if not auto_roles:
                    result += "‚ùå –ù–µ–º–∞—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å\n"
                else:
                    level_roles = []
                    inactive_roles = []

                    for config in auto_roles:
                        role = guild.get_role(int(config["role_id"]))
                        if not role:
                            continue

                        if config["type"] == "level":
                            users_str = await db.users.find({"guild_id": str(guild.id)}).to_list(1000)
                            users_int = await db.users.find({"guild_id": guild.id}).to_list(1000)
                            users = users_str if len(users_str) > 0 else users_int
                            
                            eligible = len([u for u in users if u.get("level", 0) >= config["required_level"]])
                            has_role = len([m for m in guild.members if role in m.roles])
                            
                            level_roles.append(f"  ‚Ä¢ {role.name} - –†—ñ–≤–µ–Ω—å {config['required_level']} (–ú–∞—î: {has_role}, –ü—ñ–¥—Ö–æ–¥–∏—Ç—å: {eligible})")
                        elif config["type"] == "inactive":
                            has_role = len([m for m in guild.members if role in m.roles])
                            inactive_roles.append(f"  ‚Ä¢ {role.name} - {config['check_days']} –¥–Ω—ñ–≤, {config['min_xp']} XP (–ú–∞—î: {has_role})")

                    if level_roles:
                        result += "üéØ –ê–í–¢–û–í–ò–î–ê–ß–ê:\n"
                        result += "\n".join(level_roles) + "\n\n"

                    if inactive_roles:
                        result += "üóëÔ∏è –ê–í–¢–û–ó–ù–Ø–¢–¢–Ø:\n"
                        result += "\n".join(inactive_roles) + "\n\n"

                # –ö–∞–Ω–∞–ª
                report_channel = None
                if guild_settings and guild_settings.get("report_channel_id"):
                    report_channel = guild.get_channel(int(guild_settings["report_channel_id"]))

                result += f"üìä –ö–ê–ù–ê–õ: {report_channel.name if report_channel else '‚ùå –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}\n```"

                await interaction.followup.send(result)

            elif –¥—ñ—è.value == "check":
                # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∑–∞—Ä–∞–∑
                await interaction.followup.send("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä—è—é...")
                
                report = await self._process_guild_roles(guild)
                
                result = f"```\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢\n\n"
                
                if report["level_assigned"] > 0:
                    result += f"üéØ –í–∏–¥–∞–Ω–æ: {report['level_assigned']}\n"
                    for detail in report["level_details"]:
                        result += f"   {detail}\n"
                
                if report["inactive_removed"] > 0:
                    result += f"üóëÔ∏è –ó–Ω—è—Ç–æ: {report['inactive_removed']}\n"
                    for detail in report["inactive_details"]:
                        result += f"   {detail}\n"
                    
                if report["level_assigned"] == 0 and report["inactive_removed"] == 0:
                    result += "‚úÖ –í—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ\n"

                result += f"\n–í–∏–∫–æ–Ω–∞–≤: {interaction.user.display_name}\n```"
                
                await interaction.edit_original_response(content=result)

        except Exception as e:
            await interaction.followup.send(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

    @tasks.loop(hours=24)
    async def daily_role_check(self):
        if db is None:
            return

        for guild in self.bot.guilds:
            try:
                report = await self._process_guild_roles(guild)
                await self._send_daily_report(guild, report)
            except Exception as e:
                print(f"Error processing roles for guild {guild.id}: {e}")

    async def _process_guild_roles(self, guild):
        auto_roles = await db.auto_roles.find({"guild_id": str(guild.id), "enabled": True}).to_list(100)
        
        report = {
            "level_assigned": 0,
            "inactive_removed": 0,
            "level_details": [],
            "inactive_details": []
        }

        for config in auto_roles:
            role = guild.get_role(int(config["role_id"]))
            if not role or role.position >= guild.me.top_role.position:
                continue

            try:
                if config["type"] == "level":
                    assigned = await self._process_level_role(guild, role, config["required_level"])
                    report["level_assigned"] += assigned
                    if assigned > 0:
                        report["level_details"].append(f"‚Ä¢ {role.name}: +{assigned}")

                elif config["type"] == "inactive":
                    removed = await self._process_inactive_role(guild, role, config["check_days"], config["min_xp"])
                    report["inactive_removed"] += removed
                    if removed > 0:
                        report["inactive_details"].append(f"‚Ä¢ {role.name}: -{removed}")
            except Exception as e:
                print(f"Error processing role {role.id}: {e}")

        return report

    async def _process_level_role(self, guild, role, required_level):
        users_str = await db.users.find({"guild_id": str(guild.id)}).to_list(1000)
        users_int = await db.users.find({"guild_id": guild.id}).to_list(1000)
        users = users_str if len(users_str) > 0 else users_int

        eligible_users = [user for user in users if user.get("level", 0) >= required_level]
        assigned_count = 0

        for user_data in eligible_users:
            user_id = user_data.get("user_id")
            if isinstance(user_id, str):
                user_id = int(user_id)

            member = guild.get_member(user_id)
            if member and role not in member.roles:
                try:
                    await member.add_roles(role, reason=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≤–∏–¥–∞—á–∞ –∑–∞ —Ä—ñ–≤–µ–Ω—å {required_level}")
                    assigned_count += 1
                except:
                    pass

        return assigned_count

    async def _process_inactive_role(self, guild, role, days, min_xp):
        cutoff_date = datetime.now() - timedelta(days=days)
        cutoff_date_str = cutoff_date.strftime("%Y-%m-%d")
        
        members_with_role = [member for member in guild.members if role in member.roles]
        removed_count = 0

        for member in members_with_role:
            user_data = await db.users.find_one({
                "$or": [
                    {"guild_id": str(guild.id), "user_id": member.id},
                    {"guild_id": guild.id, "user_id": member.id},
                    {"guild_id": str(guild.id), "user_id": str(member.id)},
                    {"guild_id": guild.id, "user_id": str(member.id)}
                ]
            })

            should_remove = False
            if not user_data:
                should_remove = True
            else:
                history = user_data.get("history", {})
                recent_xp = sum(
                    day_data.get("xp_gained", 0)
                    for date_str, day_data in history.items()
                    if date_str >= cutoff_date_str
                )
                if recent_xp < min_xp:
                    should_remove = True

            if should_remove:
                try:
                    await member.remove_roles(role, reason=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–Ω—è—Ç—Ç—è –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å ({days} –¥–Ω—ñ–≤, <{min_xp} XP)")
                    removed_count += 1
                except:
                    pass

        return removed_count

    async def _send_daily_report(self, guild, report):
        guild_settings = await db.guild_settings.find_one({"guild_id": str(guild.id)})
        if not guild_settings or not guild_settings.get("report_channel_id"):
            return

        channel = guild.get_channel(int(guild_settings["report_channel_id"]))
        if not channel:
            return

        if report["level_assigned"] == 0 and report["inactive_removed"] == 0:
            return

        result = f"```\nüìä –©–û–î–ï–ù–ù–ò–ô –ó–í–Ü–¢\n\n"

        if report["level_assigned"] > 0:
            result += f"üéØ –í–ò–î–ê–ù–û: {report['level_assigned']}\n"
            for detail in report["level_details"]:
                result += f"   {detail}\n"
            result += "\n"

        if report["inactive_removed"] > 0:
            result += f"üóëÔ∏è –ó–ù–Ø–¢–û: {report['inactive_removed']}\n"
            for detail in report["inactive_details"]:
                result += f"   {detail}\n"
            result += "\n"

        result += f"ü§ñ {datetime.now().strftime('%d.%m.%Y %H:%M')}\n```"

        try:
            await channel.send(result)
        except:
            pass

    @daily_role_check.before_loop
    async def before_daily_check(self):
        await self.bot.wait_until_ready()

async def setup(bot):
    await bot.add_cog(AutomatedRoleSystem(bot))