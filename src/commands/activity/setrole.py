import discord
from discord import app_commands
from discord.ext import commands, tasks
from datetime import datetime, timedelta
from modules.db import get_database
import asyncio

db = get_database()

class WeeklyRoleView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –ø—Ä–∞–≤–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏"""
        if not interaction.user.guild_permissions.manage_roles:
            await interaction.response.send_message("‚ùå –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ–ª—è–º–∏!", ephemeral=True)
            return False
        return True

    @discord.ui.button(emoji="üìù", label="–†–æ–ª—å –∑–∞ —Ç–æ–ø —á–∞—Ç—É", style=discord.ButtonStyle.primary, row=0)
    async def chat_role(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Ä–æ–ª—å –∑–∞ —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤ —á–∞—Ç—ñ"""
        await interaction.response.send_message("üìù **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–ª—ñ –∑–∞ —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤ —á–∞—Ç—ñ**\n\n–í–∫–∞–∂–∏ —Ä–æ–ª—å (–∑–≥–∞–¥—É–≤–∞–Ω–Ω—è @—Ä–æ–ª—å –∞–±–æ ID):", ephemeral=True)
        
        def check(message):
            return message.author.id == interaction.user.id and message.channel.id == interaction.channel.id

        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–ª—å
            role_msg = await interaction.client.wait_for('message', check=check, timeout=60.0)
            role = await self._parse_role(interaction.guild, role_msg.content.strip())
            
            if not role:
                await interaction.followup.send("‚ùå –†–æ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", ephemeral=True)
                return

            await interaction.followup.send(f"‚úÖ –†–æ–ª—å **{role.name}** –∑–Ω–∞–π–¥–µ–Ω–æ!\n\n–°–∫—ñ–ª—å–∫–∏ –ª—é–¥–µ–π –º–∞—î –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—é —Ä–æ–ª—å? (—Ç–æ–ø 1-50):", ephemeral=True)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–ø—É
            top_msg = await interaction.client.wait_for('message', check=check, timeout=60.0)
            
            try:
                top_count = int(top_msg.content.strip())
                if top_count <= 0 or top_count > 50:
                    await interaction.followup.send("‚ùå –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 50!", ephemeral=True)
                    return
            except ValueError:
                await interaction.followup.send("‚ùå –í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–µ —á–∏—Å–ª–æ!", ephemeral=True)
                return

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
            await db.weekly_roles.update_one(
                {"guild_id": str(interaction.guild.id), "role_id": str(role.id)},
                {
                    "$set": {
                        "guild_id": str(interaction.guild.id),
                        "role_id": str(role.id),
                        "type": "chat",
                        "top_count": top_count,
                        "enabled": True,
                        "created_by": interaction.user.id,
                        "created_at": datetime.utcnow()
                    }
                },
                upsert=True
            )
            
            await interaction.followup.send(f"‚úÖ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ —Ä–æ–ª—å **{role.name}** –¥–ª—è —Ç–æ–ø {top_count} –∞–∫—Ç–∏–≤–Ω–∏—Ö –≤ —á–∞—Ç—ñ!", ephemeral=True)

        except asyncio.TimeoutError:
            await interaction.followup.send("‚è∞ –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", ephemeral=True)
        except Exception as e:
            await interaction.followup.send(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}", ephemeral=True)

    @discord.ui.button(emoji="üé§", label="–†–æ–ª—å –∑–∞ —Ç–æ–ø –≤–æ–π—Å—É", style=discord.ButtonStyle.primary, row=0)
    async def voice_role(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Ä–æ–ª—å –∑–∞ —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤ –≤–æ–π—Å—ñ"""
        await interaction.response.send_message("üé§ **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–ª—ñ –∑–∞ —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤ –≤–æ–π—Å—ñ**\n\n–í–∫–∞–∂–∏ —Ä–æ–ª—å (–∑–≥–∞–¥—É–≤–∞–Ω–Ω—è @—Ä–æ–ª—å –∞–±–æ ID):", ephemeral=True)
        
        def check(message):
            return message.author.id == interaction.user.id and message.channel.id == interaction.channel.id

        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–ª—å
            role_msg = await interaction.client.wait_for('message', check=check, timeout=60.0)
            role = await self._parse_role(interaction.guild, role_msg.content.strip())
            
            if not role:
                await interaction.followup.send("‚ùå –†–æ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", ephemeral=True)
                return

            await interaction.followup.send(f"‚úÖ –†–æ–ª—å **{role.name}** –∑–Ω–∞–π–¥–µ–Ω–æ!\n\n–°–∫—ñ–ª—å–∫–∏ –ª—é–¥–µ–π –º–∞—î –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—é —Ä–æ–ª—å? (—Ç–æ–ø 1-50):", ephemeral=True)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–ø—É
            top_msg = await interaction.client.wait_for('message', check=check, timeout=60.0)
            
            try:
                top_count = int(top_msg.content.strip())
                if top_count <= 0 or top_count > 50:
                    await interaction.followup.send("‚ùå –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 50!", ephemeral=True)
                    return
            except ValueError:
                await interaction.followup.send("‚ùå –í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–µ —á–∏—Å–ª–æ!", ephemeral=True)
                return

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
            await db.weekly_roles.update_one(
                {"guild_id": str(interaction.guild.id), "role_id": str(role.id)},
                {
                    "$set": {
                        "guild_id": str(interaction.guild.id),
                        "role_id": str(role.id),
                        "type": "voice",
                        "top_count": top_count,
                        "enabled": True,
                        "created_by": interaction.user.id,
                        "created_at": datetime.utcnow()
                    }
                },
                upsert=True
            )
            
            await interaction.followup.send(f"‚úÖ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ —Ä–æ–ª—å **{role.name}** –¥–ª—è —Ç–æ–ø {top_count} –∞–∫—Ç–∏–≤–Ω–∏—Ö –≤ –≤–æ–π—Å—ñ!", ephemeral=True)

        except asyncio.TimeoutError:
            await interaction.followup.send("‚è∞ –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤ich–µ—Ä–ø–∞–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", ephemeral=True)
        except Exception as e:
            await interaction.followup.send(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}", ephemeral=True)

    @discord.ui.button(emoji="üèÜ", label="–†–æ–ª—å –∑–∞ –∑–∞–≥–∞–ª—å–Ω–∏–π —Ç–æ–ø", style=discord.ButtonStyle.primary, row=0)
    async def combined_role(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Ä–æ–ª—å –∑–∞ —Ç–æ–ø –∑–∞–≥–∞–ª—å–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
        await interaction.response.send_message("üèÜ **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–ª—ñ –∑–∞ —Ç–æ–ø –∑–∞–≥–∞–ª—å–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ**\n\n–í–∫–∞–∂–∏ —Ä–æ–ª—å (–∑–≥–∞–¥—É–≤–∞–Ω–Ω—è @—Ä–æ–ª—å –∞–±–æ ID):", ephemeral=True)
        
        def check(message):
            return message.author.id == interaction.user.id and message.channel.id == interaction.channel.id

        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–ª—å
            role_msg = await interaction.client.wait_for('message', check=check, timeout=60.0)
            role = await self._parse_role(interaction.guild, role_msg.content.strip())
            
            if not role:
                await interaction.followup.send("‚ùå –†–æ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", ephemeral=True)
                return

            await interaction.followup.send(f"‚úÖ –†–æ–ª—å **{role.name}** –∑–Ω–∞–π–¥–µ–Ω–æ!\n\n–°–∫—ñ–ª—å–∫–∏ –ª—é–¥–µ–π –º–∞—î –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—é —Ä–æ–ª—å? (—Ç–æ–ø 1-50):", ephemeral=True)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–ø—É
            top_msg = await interaction.client.wait_for('message', check=check, timeout=60.0)
            
            try:
                top_count = int(top_msg.content.strip())
                if top_count <= 0 or top_count > 50:
                    await interaction.followup.send("‚ùå –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 50!", ephemeral=True)
                    return
            except ValueError:
                await interaction.followup.send("‚ùå –í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–µ —á–∏—Å–ª–æ!", ephemeral=True)
                return

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
            await db.weekly_roles.update_one(
                {"guild_id": str(interaction.guild.id), "role_id": str(role.id)},
                {
                    "$set": {
                        "guild_id": str(interaction.guild.id),
                        "role_id": str(role.id),
                        "type": "combined",
                        "top_count": top_count,
                        "enabled": True,
                        "created_by": interaction.user.id,
                        "created_at": datetime.utcnow()
                    }
                },
                upsert=True
            )
            
            await interaction.followup.send(f"‚úÖ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ —Ä–æ–ª—å **{role.name}** –¥–ª—è —Ç–æ–ø {top_count} –Ω–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à–∏—Ö –∑–∞–≥–∞–ª–æ–º!", ephemeral=True)

        except asyncio.TimeoutError:
            await interaction.followup.send("‚è∞ –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", ephemeral=True)
        except Exception as e:
            await interaction.followup.send(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}", ephemeral=True)

    @discord.ui.button(emoji="üìä", label="–ö–∞–Ω–∞–ª –∑–≤—ñ—Ç—ñ–≤", style=discord.ButtonStyle.secondary, row=0)
    async def report_channel(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –∑–≤—ñ—Ç—ñ–≤"""
        await interaction.response.send_message("üìä **–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É –¥–ª—è –∑–≤—ñ—Ç—ñ–≤**\n\n–í–∫–∞–∂–∏ –∫–∞–Ω–∞–ª (–∑–≥–∞–¥—É–≤–∞–Ω–Ω—è #–∫–∞–Ω–∞–ª –∞–±–æ ID):", ephemeral=True)
        
        def check(message):
            return message.author.id == interaction.user.id and message.channel.id == interaction.channel.id

        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞–Ω–∞–ª
            channel_msg = await interaction.client.wait_for('message', check=check, timeout=60.0)
            channel = await self._parse_channel(interaction.guild, channel_msg.content.strip())
            
            if not channel or not isinstance(channel, discord.TextChannel):
                await interaction.followup.send("‚ùå –¢–µ–∫—Å—Ç–æ–≤–∏–π –∫–∞–Ω–∞–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", ephemeral=True)
                return

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
            await db.guild_settings.update_one(
                {"guild_id": str(interaction.guild.id)},
                {
                    "$set": {
                        "guild_id": str(interaction.guild.id),
                        "weekly_report_channel_id": str(channel.id),
                        "updated_by": interaction.user.id,
                        "updated_at": datetime.utcnow()
                    }
                },
                upsert=True
            )
            
            await interaction.followup.send(f"‚úÖ –ö–∞–Ω–∞–ª –¥–ª—è —â–æ—Ç–∏–∂–Ω–µ–≤–∏—Ö –∑–≤—ñ—Ç—ñ–≤ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {channel.mention}!", ephemeral=True)

        except asyncio.TimeoutError:
            await interaction.followup.send("‚è∞ –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", ephemeral=True)
        except Exception as e:
            await interaction.followup.send(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}", ephemeral=True)

    @discord.ui.button(emoji="üóëÔ∏è", label="–í–∏–¥–∞–ª–∏—Ç–∏ —Ä–æ–ª—å", style=discord.ButtonStyle.danger, row=1)
    async def delete_role(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–í–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–ª—ñ"""
        await interaction.response.send_message("üóëÔ∏è **–í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ä–æ–ª—ñ**\n\n–í–∫–∞–∂–∏ —Ä–æ–ª—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è (–∑–≥–∞–¥—É–≤–∞–Ω–Ω—è @—Ä–æ–ª—å –∞–±–æ ID):", ephemeral=True)
        
        def check(message):
            return message.author.id == interaction.user.id and message.channel.id == interaction.channel.id

        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–ª—å
            role_msg = await interaction.client.wait_for('message', check=check, timeout=60.0)
            role = await self._parse_role(interaction.guild, role_msg.content.strip())
            
            if not role:
                await interaction.followup.send("‚ùå –†–æ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", ephemeral=True)
                return

            # –í–∏–¥–∞–ª—è—î–º–æ –∑ –ë–î
            result = await db.weekly_roles.delete_one({
                "guild_id": str(interaction.guild.id),
                "role_id": str(role.id)
            })
            
            if result.deleted_count > 0:
                await interaction.followup.send(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–æ–ª—ñ **{role.name}**!", ephemeral=True)
            else:
                await interaction.followup.send(f"‚ùå –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–æ–ª—ñ **{role.name}** –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", ephemeral=True)

        except asyncio.TimeoutError:
            await interaction.followup.send("‚è∞ –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", ephemeral=True)
        except Exception as e:
            await interaction.followup.send(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}", ephemeral=True)

    @discord.ui.button(emoji="üìã", label="–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏", style=discord.ButtonStyle.success, row=1)
    async def system_status(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏"""
        await interaction.response.defer(ephemeral=True)
        
        try:
            weekly_roles = await db.weekly_roles.find({"guild_id": str(interaction.guild.id), "enabled": True}).to_list(100)
            guild_settings = await db.guild_settings.find_one({"guild_id": str(interaction.guild.id)})
            
            embed = discord.Embed(
                title="‚öôÔ∏è –°—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏ —â–æ—Ç–∏–∂–Ω–µ–≤–∏—Ö —Ä–æ–ª–µ–π",
                color=0x7c7cf0,
                description=""
            )
            
            if not weekly_roles:
                embed.add_field(name="‚ùå –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ", value="–°–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞", inline=False)
            else:
                chat_roles = []
                voice_roles = []
                combined_roles = []
                
                for config in weekly_roles:
                    role = interaction.guild.get_role(int(config["role_id"]))
                    if not role:
                        continue
                    
                    has_role = len([m for m in interaction.guild.members if role in m.roles])
                    role_info = f"**{role.name}** - —Ç–æ–ø {config['top_count']}\n–ú–∞—î —Ä–æ–ª—å: {has_role} –æ—Å—ñ–±"
                    
                    if config["type"] == "chat":
                        chat_roles.append(role_info)
                    elif config["type"] == "voice":
                        voice_roles.append(role_info)
                    elif config["type"] == "combined":
                        combined_roles.append(role_info)
                
                if chat_roles:
                    embed.add_field(name="üìù –†–æ–ª—ñ –∑–∞ —Ç–æ–ø —á–∞—Ç—É", value="\n\n".join(chat_roles), inline=False)
                
                if voice_roles:
                    embed.add_field(name="üé§ –†–æ–ª—ñ –∑–∞ —Ç–æ–ø –≤–æ–π—Å—É", value="\n\n".join(voice_roles), inline=False)
                    
                if combined_roles:
                    embed.add_field(name="üèÜ –†–æ–ª—ñ –∑–∞ –∑–∞–≥–∞–ª—å–Ω–∏–π —Ç–æ–ø", value="\n\n".join(combined_roles), inline=False)
            
            # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–∞–Ω–∞–ª –∑–≤—ñ—Ç—ñ–≤
            report_channel = None
            if guild_settings and guild_settings.get("weekly_report_channel_id"):
                report_channel = interaction.guild.get_channel(int(guild_settings["weekly_report_channel_id"]))
            
            channel_status = report_channel.mention if report_channel else "‚ùå –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
            embed.add_field(name="üìä –ö–∞–Ω–∞–ª –∑–≤—ñ—Ç—ñ–≤", value=channel_status, inline=False)
            
            # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            now = datetime.now()
            days_until_monday = (7 - now.weekday()) % 7
            if days_until_monday == 0:
                days_until_monday = 7
            next_update = now + timedelta(days=days_until_monday)
            embed.add_field(name="üïê –ù–∞—Å—Ç—É–ø–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è", value=f"<t:{int(next_update.timestamp())}:R>", inline=False)
            
            embed.set_footer(text=f"–ó–∞–ø—Ä–æ—Å–∏–≤: {interaction.user.display_name}")
            
            await interaction.followup.send(embed=embed, ephemeral=True)
            
        except Exception as e:
            await interaction.followup.send(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}", ephemeral=True)

    @discord.ui.button(emoji="üîÑ", label="–û–Ω–æ–≤–∏—Ç–∏ –∑–∞—Ä–∞–∑", style=discord.ButtonStyle.success, row=1)
    async def update_now(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–ª–µ–π –∑–∞—Ä–∞–∑"""
        await interaction.response.defer(ephemeral=True)
        
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º–∏ –¥–ª—è –æ–±—Ä–æ–±–∫–∏
            system = WeeklyRoleSystem(interaction.client)
            report = await system._process_guild_weekly_roles(interaction.guild)
            
            embed = discord.Embed(
                title="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–ª–µ–π",
                color=0x00ff00,
                description=""
            )
            
            total_assigned = sum(report["assigned"].values())
            total_removed = sum(report["removed"].values())
            
            if total_assigned > 0:
                assigned_text = f"**–í—Å—å–æ–≥–æ –≤–∏–¥–∞–Ω–æ: {total_assigned}**\n"
                for role_name, count in report["assigned"].items():
                    if count > 0:
                        assigned_text += f"‚Ä¢ {role_name}: +{count}\n"
                embed.add_field(name="‚úÖ –í–∏–¥–∞–Ω–æ —Ä–æ–ª–µ–π", value=assigned_text, inline=False)
            
            if total_removed > 0:
                removed_text = f"**–í—Å—å–æ–≥–æ –∑–Ω—è—Ç–æ: {total_removed}**\n"
                for role_name, count in report["removed"].items():
                    if count > 0:
                        removed_text += f"‚Ä¢ {role_name}: -{count}\n"
                embed.add_field(name="‚ùå –ó–Ω—è—Ç–æ —Ä–æ–ª–µ–π", value=removed_text, inline=False)
                
            if total_assigned == 0 and total_removed == 0:
                embed.add_field(name="‚úÖ –í—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ", value="–ñ–æ–¥–Ω–∏—Ö –∑–º—ñ–Ω –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ", inline=False)
            
            embed.set_footer(text=f"–í–∏–∫–æ–Ω–∞–≤: {interaction.user.display_name}")
            
            await interaction.followup.send(embed=embed, ephemeral=True)
            
        except Exception as e:
            await interaction.followup.send(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}", ephemeral=True)

    async def _parse_role(self, guild, role_input):
        """–ü–∞—Ä—Å–∏—Ç—å —Ä–æ–ª—å –∑ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        role = None
        
        if role_input.startswith('<@&') and role_input.endswith('>'):
            role_id = role_input[3:-1]
            try:
                role = guild.get_role(int(role_id))
            except:
                pass
        else:
            try:
                role = guild.get_role(int(role_input))
            except:
                pass
        
        return role

    async def _parse_channel(self, guild, channel_input):
        """–ü–∞—Ä—Å–∏—Ç—å –∫–∞–Ω–∞–ª –∑ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        channel = None
        
        if channel_input.startswith('<#') and channel_input.endswith('>'):
            channel_id = channel_input[2:-1]
            try:
                channel = guild.get_channel(int(channel_id))
            except:
                pass
        else:
            try:
                channel = guild.get_channel(int(channel_input))
            except:
                pass
        
        return channel

class WeeklyRoleSystem(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.weekly_role_update.start()

    def cog_unload(self):
        self.weekly_role_update.cancel()

    @app_commands.command(name="weekly-setup", description="[–ê–î–ú–Ü–ù] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —â–æ—Ç–∏–∂–Ω–µ–≤–∏—Ö —Ä–æ–ª–µ–π")
    async def weekly_setup(self, interaction: discord.Interaction):
        """–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —â–æ—Ç–∏–∂–Ω–µ–≤–∏–º–∏ —Ä–æ–ª—è–º–∏"""
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞
        if not interaction.user.guild_permissions.manage_roles:
            await interaction.response.send_message("‚ùå –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ–ª—è–º–∏!", ephemeral=True)
            return

        await interaction.response.defer(ephemeral=False)

        embed = discord.Embed(
            title="üèÜ –°–∏—Å—Ç–µ–º–∞ —â–æ—Ç–∏–∂–Ω–µ–≤–∏—Ö —Ä–æ–ª–µ–π",
            color=0x7c7cf0,
            description=(
                "–ù–∞–ª–∞—à—Ç—É–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –≤–∏–¥–∞—á—É —Ä–æ–ª–µ–π –∑–∞ —â–æ—Ç–∏–∂–Ω–µ–≤—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å!\n\n"
                "**–î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:**\n"
                "üìù **–†–æ–ª—å –∑–∞ —Ç–æ–ø —á–∞—Ç—É** ‚Äî –¥–ª—è –Ω–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à–∏—Ö –≤ —á–∞—Ç—ñ\n"
                "üé§ **–†–æ–ª—å –∑–∞ —Ç–æ–ø –≤–æ–π—Å—É** ‚Äî –¥–ª—è –Ω–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à–∏—Ö –≤ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö\n"
                "üèÜ **–†–æ–ª—å –∑–∞ –∑–∞–≥–∞–ª—å–Ω–∏–π —Ç–æ–ø** ‚Äî –¥–ª—è –Ω–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à–∏—Ö –∑–∞–≥–∞–ª–æ–º\n"
                "üìä **–ö–∞–Ω–∞–ª –∑–≤—ñ—Ç—ñ–≤** ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è —â–æ—Ç–∏–∂–Ω–µ–≤–∏—Ö –∑–≤—ñ—Ç—ñ–≤\n"
                "üóëÔ∏è **–í–∏–¥–∞–ª–∏—Ç–∏ —Ä–æ–ª—å** ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–æ–ª—ñ\n"
                "üìã **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏** ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n"
                "üîÑ **–û–Ω–æ–≤–∏—Ç–∏ –∑–∞—Ä–∞–∑** ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–ª–µ–π –Ω–µ–≥–∞–π–Ω–æ\n\n"
                "üí° **–†–æ–ª—ñ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è —â–æ–ø–æ–Ω–µ–¥—ñ–ª–∫–∞ –æ 00:00**\n"
                "üìà **–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ä–∞—Ö—É—î—Ç—å—Å—è –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤**"
            )
        )
        embed.set_footer(text="–ö–Ω–æ–ø–∫–∏ –ø—Ä–∞—Ü—é—é—Ç—å –ø–æ—Å—Ç—ñ–π–Ω–æ ‚Ä¢ –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞: –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ–ª—è–º–∏")

        view = WeeklyRoleView()
        await interaction.followup.send(embed=embed, view=view, ephemeral=False)

    @tasks.loop(time=discord.utils.utcnow().replace(hour=0, minute=0, second=0, microsecond=0))
    async def weekly_role_update(self):
        """–©–æ—Ç–∏–∂–Ω–µ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–ª–µ–π (–∫–æ–∂–Ω–æ–≥–æ –ø–æ–Ω–µ–¥—ñ–ª–∫–∞)"""
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å—å–æ–≥–æ–¥–Ω—ñ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫
        if datetime.now().weekday() != 0:
            return

        if db is None:
            return

        for guild in self.bot.guilds:
            try:
                report = await self._process_guild_weekly_roles(guild)
                await self._send_weekly_report(guild, report)
            except Exception as e:
                print(f"Error processing weekly roles for guild {guild.id}: {e}")

    async def _process_guild_weekly_roles(self, guild):
        """–û–±—Ä–æ–±–ª—è—î —â–æ—Ç–∏–∂–Ω–µ–≤—ñ —Ä–æ–ª—ñ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞"""
        weekly_roles = await db.weekly_roles.find({"guild_id": str(guild.id), "enabled": True}).to_list(100)
        
        report = {
            "assigned": {},
            "removed": {}
        }

        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤
        end_date = datetime.now()
        start_date = end_date - timedelta(days=7)
        
        date_range = [(start_date + timedelta(days=i)).strftime("%Y-%m-%d") for i in range(7)]

        for config in weekly_roles:
            role = guild.get_role(int(config["role_id"]))
            if not role or role.position >= guild.me.top_role.position:
                continue

            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                top_users = await self._get_top_users(guild, config["type"], config["top_count"], date_range)
                
                # –í–∏–¥–∞—î–º–æ/–∑–Ω—ñ–º–∞—î–º–æ —Ä–æ–ª—ñ
                assigned, removed = await self._update_role_assignments(guild, role, top_users)
                
                report["assigned"][role.name] = assigned
                report["removed"][role.name] = removed
                
            except Exception as e:
                print(f"Error processing role {role.id}: {e}")

        return report

    async def _get_top_users(self, guild, activity_type, top_count, date_range):
        """–û—Ç—Ä–∏–º—É—î —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é"""
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Å–µ—Ä–≤–µ—Ä–∞
        users_str = await db.users.find({"guild_id": str(guild.id)}).to_list(10000)
        users_int = await db.users.find({"guild_id": guild.id}).to_list(10000)
        users = users_str if len(users_str) > 0 else users_int

        user_activity = []

        for user_data in users:
            user_id = user_data.get("user_id")
            if isinstance(user_id, str):
                try:
                    user_id = int(user_id)
                except:
                    continue

            member = guild.get_member(user_id)
            if not member or member.bot:
                continue

            history = user_data.get("history", {})
            
            if activity_type == "chat":
                # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞ —Ç–∏–∂–¥–µ–Ω—å (10 XP –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
                weekly_messages = 0
                for date_str in date_range:
                    daily_xp = history.get(date_str, 0)
                    # –ü—Ä–∏–±–ª–∏–∑–Ω–æ –ø—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–Ω–µ —Ç–æ—á–Ω–æ, –∞–ª–µ –æ—Ä—ñ—î–Ω—Ç–æ–≤–Ω–æ)
                    # XP –º–æ–∂–µ –π—Ç–∏ –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª, —Ç–æ–º—É —Ü–µ –ø—Ä–∏–±–ª–∏–∑–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
                    weekly_messages += daily_xp // 10
                
                user_activity.append((user_id, weekly_messages))
                
            elif activity_type == "voice":
                # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ —á–∞—Å –≤ –≤–æ–π—Å—ñ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å (5 XP –∑–∞ —Ö–≤–∏–ª–∏–Ω—É)
                weekly_voice = 0
                for date_str in date_range:
                    daily_xp = history.get(date_str, 0)
                    # –ü—Ä–∏–±–ª–∏–∑–Ω–æ –ø—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ —Ö–≤–∏–ª–∏–Ω–∏ –≤–æ–π—Å—É
                    weekly_voice += daily_xp // 5
                
                user_activity.append((user_id, weekly_voice))
                
            elif activity_type == "combined":
                # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π XP –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
                weekly_xp = 0
                for date_str in date_range:
                    weekly_xp += history.get(date_str, 0)
                
                user_activity.append((user_id, weekly_xp))

        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é —Ç–∞ –±–µ—Ä–µ–º–æ —Ç–æ–ø
        user_activity.sort(key=lambda x: x[1], reverse=True)
        top_users = [user_id for user_id, activity in user_activity[:top_count] if activity > 0]

        return top_users

    async def _update_role_assignments(self, guild, role, top_users):
        """–û–Ω–æ–≤–ª—é—î –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–æ–ª–µ–π"""
        assigned_count = 0
        removed_count = 0

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤, —è–∫—ñ –∑–∞—Ä–∞–∑ –º–∞—é—Ç—å —Ü—é —Ä–æ–ª—å
        current_role_members = [member.id for member in guild.members if role in member.roles]

        # –ó–Ω—ñ–º–∞—î–º–æ —Ä–æ–ª—å —É —Ç–∏—Ö, —Ö—Ç–æ –Ω–µ –≤ —Ç–æ–ø—ñ
        for member_id in current_role_members:
            if member_id not in top_users:
                member = guild.get_member(member_id)
                if member:
                    try:
                        await member.remove_roles(role, reason="–©–æ—Ç–∏–∂–Ω–µ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–ª–µ–π - –Ω–µ –≤ —Ç–æ–ø—ñ")
                        removed_count += 1
                    except:
                        pass

        # –í–∏–¥–∞—î–º–æ —Ä–æ–ª—å —Ç–∏–º, —Ö—Ç–æ –≤ —Ç–æ–ø—ñ –∞–ª–µ –Ω–µ –º–∞—î —ó—ó
        for user_id in top_users:
            if user_id not in current_role_members:
                member = guild.get_member(user_id)
                if member:
                    try:
                        await member.add_roles(role, reason="–©–æ—Ç–∏–∂–Ω–µ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–ª–µ–π - –≤ —Ç–æ–ø—ñ")
                        assigned_count += 1
                    except:
                        pass

        return assigned_count, removed_count

    async def _send_weekly_report(self, guild, report):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —â–æ—Ç–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç"""
        guild_settings = await db.guild_settings.find_one({"guild_id": str(guild.id)})
        if not guild_settings or not guild_settings.get("weekly_report_channel_id"):
            return

        channel = guild.get_channel(int(guild_settings["weekly_report_channel_id"]))
        if not channel:
            return

        total_assigned = sum(report["assigned"].values())
        total_removed = sum(report["removed"].values())

        # –Ø–∫—â–æ –Ω–µ–º–∞—î –∑–º—ñ–Ω, –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–≤—ñ—Ç
        if total_assigned == 0 and total_removed == 0:
            return

        embed = discord.Embed(
            title="üèÜ –©–æ—Ç–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç —Å–∏—Å—Ç–µ–º–∏ —Ä–æ–ª–µ–π",
            color=0x7c7cf0,
            timestamp=datetime.utcnow(),
            description="–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–ª–µ–π –∑–∞ –º–∏–Ω—É–ª–∏–π —Ç–∏–∂–¥–µ–Ω—å"
        )

        if total_assigned > 0:
            assigned_text = f"**–í—Å—å–æ–≥–æ –≤–∏–¥–∞–Ω–æ: {total_assigned}**\n"
            for role_name, count in report["assigned"].items():
                if count > 0:
                    assigned_text += f"‚Ä¢ {role_name}: +{count}\n"
            embed.add_field(name="‚úÖ –í–∏–¥–∞–Ω–æ —Ä–æ–ª–µ–π", value=assigned_text, inline=False)

        if total_removed > 0:
            removed_text = f"**–í—Å—å–æ–≥–æ –∑–Ω—è—Ç–æ: {total_removed}**\n"
            for role_name, count in report["removed"].items():
                if count > 0:
                    removed_text += f"‚Ä¢ {role_name}: -{count}\n"
            embed.add_field(name="‚ùå –ó–Ω—è—Ç–æ —Ä–æ–ª–µ–π", value=removed_text, inline=False)

        embed.add_field(
            name="üìÖ –ù–∞—Å—Ç—É–ø–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è", 
            value="<t:" + str(int((datetime.now() + timedelta(days=7)).timestamp())) + ":R>", 
            inline=False
        )
        embed.set_footer(text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —â–æ—Ç–∏–∂–Ω–µ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–ª–µ–π")

        try:
            await channel.send(embed=embed)
        except:
            pass

    @weekly_role_update.before_loop
    async def before_weekly_update(self):
        await self.bot.wait_until_ready()

async def setup(bot):
    await bot.add_cog(WeeklyRoleSystem(bot))