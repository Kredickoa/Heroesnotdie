import discord
from discord import app_commands
from discord.ext import commands, tasks
from datetime import datetime, timedelta, time
from typing import List, Optional
from modules.db import get_database
import asyncio
import math

db = get_database()

class ActivityType:
    CHAT = "chat"
    VOICE = "voice" 
    COMBINED = "combined"

class RoleSelectView(discord.ui.View):
    def __init__(self, guild: discord.Guild):
        super().__init__(timeout=300)
        self.guild = guild
        self.selected_roles: List[discord.Role] = []
        self.current_page = 0
        self.roles_per_page = 25
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ä–æ–ª—ñ
        self.available_roles = [
            role for role in self.guild.roles 
            if role != self.guild.default_role 
            and not role.managed 
            and role.position < self.guild.me.top_role.position
        ]
        
        self.total_pages = math.ceil(len(self.available_roles) / self.roles_per_page)
        self.update_select()

    def get_page_roles(self):
        start = self.current_page * self.roles_per_page
        end = start + self.roles_per_page
        return self.available_roles[start:end]

    def update_select(self):
        # –û—á–∏—â—É—î–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
        self.clear_items()
        
        page_roles = self.get_page_roles()
        
        if page_roles:
            select = RoleSelect(page_roles, self.selected_roles)
            self.add_item(select)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö
        if self.total_pages > 1:
            prev_btn = discord.ui.Button(
                label="‚óÄ –ü–æ–ø–µ—Ä–µ–¥–Ω—è",
                style=discord.ButtonStyle.secondary,
                disabled=self.current_page == 0,
                row=1
            )
            prev_btn.callback = self.previous_page
            self.add_item(prev_btn)
            
            page_info_btn = discord.ui.Button(
                label=f"–°—Ç–æ—Ä—ñ–Ω–∫–∞ {self.current_page + 1}/{self.total_pages}",
                style=discord.ButtonStyle.secondary,
                disabled=True,
                row=1
            )
            self.add_item(page_info_btn)
            
            next_btn = discord.ui.Button(
                label="–ù–∞—Å—Ç—É–ø–Ω–∞ ‚ñ∂",
                style=discord.ButtonStyle.secondary,
                disabled=self.current_page >= self.total_pages - 1,
                row=1
            )
            next_btn.callback = self.next_page
            self.add_item(next_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–∏–±—Ä–∞—Ç–∏ –≤—Å—ñ —Ä–æ–ª—ñ –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
        if page_roles:
            select_all_btn = discord.ui.Button(
                label=f"–í–∏–±—Ä–∞—Ç–∏ –≤—Å—ñ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ ({len(page_roles)})",
                style=discord.ButtonStyle.primary,
                emoji="‚òëÔ∏è",
                row=2
            )
            select_all_btn.callback = self.select_all_on_page
            self.add_item(select_all_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –æ–±—Ä–∞–Ω—ñ —Ä–æ–ª—ñ
        if self.selected_roles:
            clear_all_btn = discord.ui.Button(
                label=f"–û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ ({len(self.selected_roles)})",
                style=discord.ButtonStyle.danger,
                emoji="üóëÔ∏è",
                row=2
            )
            clear_all_btn.callback = self.clear_all
            self.add_item(clear_all_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è
        if self.selected_roles:
            continue_btn = discord.ui.Button(
                label=f"–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑ {len(self.selected_roles)} —Ä–æ–ª–ª—é/—è–º–∏",
                style=discord.ButtonStyle.green,
                emoji="‚úÖ",
                row=3
            )
            continue_btn.callback = self.continue_setup
            self.add_item(continue_btn)

    async def previous_page(self, interaction: discord.Interaction):
        if self.current_page > 0:
            self.current_page -= 1
            self.update_select()
            
            embed = discord.Embed(
                title="üèÜ –ö—Ä–æ–∫ 1: –í–∏–±—ñ—Ä —Ä–æ–ª–µ–π",
                color=0x7c7cf0,
                description=f"**–°—Ç–æ—Ä—ñ–Ω–∫–∞ {self.current_page + 1}/{self.total_pages}**\n"
                           f"**–û–±—Ä–∞–Ω–æ —Ä–æ–ª–µ–π:** {len(self.selected_roles)}\n" + 
                           (", ".join([role.mention for role in self.selected_roles[:10]]) + 
                            (f" —ñ —â–µ {len(self.selected_roles) - 10}..." if len(self.selected_roles) > 10 else "") 
                            if self.selected_roles else "–ñ–æ–¥–Ω–æ—ó —Ä–æ–ª—ñ –Ω–µ –æ–±—Ä–∞–Ω–æ")
            )
            
            await interaction.response.edit_message(embed=embed, view=self)

    async def next_page(self, interaction: discord.Interaction):
        if self.current_page < self.total_pages - 1:
            self.current_page += 1
            self.update_select()
            
            embed = discord.Embed(
                title="üèÜ –ö—Ä–æ–∫ 1: –í–∏–±—ñ—Ä —Ä–æ–ª–µ–π",
                color=0x7c7cf0,
                description=f"**–°—Ç–æ—Ä—ñ–Ω–∫–∞ {self.current_page + 1}/{self.total_pages}**\n"
                           f"**–û–±—Ä–∞–Ω–æ —Ä–æ–ª–µ–π:** {len(self.selected_roles)}\n" + 
                           (", ".join([role.mention for role in self.selected_roles[:10]]) + 
                            (f" —ñ —â–µ {len(self.selected_roles) - 10}..." if len(self.selected_roles) > 10 else "") 
                            if self.selected_roles else "–ñ–æ–¥–Ω–æ—ó —Ä–æ–ª—ñ –Ω–µ –æ–±—Ä–∞–Ω–æ")
            )
            
            await interaction.response.edit_message(embed=embed, view=self)

    async def select_all_on_page(self, interaction: discord.Interaction):
        page_roles = self.get_page_roles()
        for role in page_roles:
            if role not in self.selected_roles:
                self.selected_roles.append(role)
        
        self.update_select()
        
        embed = discord.Embed(
            title="üèÜ –ö—Ä–æ–∫ 1: –í–∏–±—ñ—Ä —Ä–æ–ª–µ–π",
            color=0x7c7cf0,
            description=f"**–°—Ç–æ—Ä—ñ–Ω–∫–∞ {self.current_page + 1}/{self.total_pages}**\n"
                       f"**–û–±—Ä–∞–Ω–æ —Ä–æ–ª–µ–π:** {len(self.selected_roles)}\n" + 
                       (", ".join([role.mention for role in self.selected_roles[:10]]) + 
                        (f" —ñ —â–µ {len(self.selected_roles) - 10}..." if len(self.selected_roles) > 10 else "") 
                        if self.selected_roles else "–ñ–æ–¥–Ω–æ—ó —Ä–æ–ª—ñ –Ω–µ –æ–±—Ä–∞–Ω–æ")
        )
        
        await interaction.response.edit_message(embed=embed, view=self)

    async def clear_all(self, interaction: discord.Interaction):
        self.selected_roles.clear()
        self.update_select()
        
        embed = discord.Embed(
            title="üèÜ –ö—Ä–æ–∫ 1: –í–∏–±—ñ—Ä —Ä–æ–ª–µ–π",
            color=0x7c7cf0,
            description=f"**–°—Ç–æ—Ä—ñ–Ω–∫–∞ {self.current_page + 1}/{self.total_pages}**\n"
                       f"**–û–±—Ä–∞–Ω–æ —Ä–æ–ª–µ–π:** 0\n–ñ–æ–¥–Ω–æ—ó —Ä–æ–ª—ñ –Ω–µ –æ–±—Ä–∞–Ω–æ"
        )
        
        await interaction.response.edit_message(embed=embed, view=self)

    async def continue_setup(self, interaction: discord.Interaction):
        await interaction.response.defer()
        view = ActivityTypeView(self.selected_roles)
        
        embed = discord.Embed(
            title="üèÜ –ö—Ä–æ–∫ 2: –¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ",
            color=0x7c7cf0,
            description=f"–û–±—Ä–∞–Ω–æ —Ä–æ–ª–µ–π: {', '.join([role.mention for role in self.selected_roles[:5]])}" +
                       (f" —ñ —â–µ {len(self.selected_roles) - 5}..." if len(self.selected_roles) > 5 else "") +
                       "\n\n–û–±–µ—Ä–∏ —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –¥–ª—è —Ü–∏—Ö —Ä–æ–ª–µ–π:"
        )
        
        await interaction.edit_original_response(embed=embed, view=view)

class RoleSelect(discord.ui.Select):
    def __init__(self, roles: List[discord.Role], selected: List[discord.Role]):
        self.available_roles = roles
        self.selected_roles = selected
        
        options = []
        for role in roles:
            is_selected = role in selected
            options.append(discord.SelectOption(
                label=role.name[:100],
                value=str(role.id),
                description=f"–ü–æ–∑–∏—Ü—ñ—è: {role.position}" + (" ‚Ä¢ ‚úÖ –û–±—Ä–∞–Ω–æ" if is_selected else ""),
                emoji="‚úÖ" if is_selected else "‚ö™"
            ))
        
        super().__init__(
            placeholder="–û–±–µ—Ä–∏ —Ä–æ–ª—ñ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è...",
            options=options,
            max_values=min(len(options), 25)
        )

    async def callback(self, interaction: discord.Interaction):
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–Ω–∏—Ö —Ä–æ–ª–µ–π
        new_selected = []
        for role_id in self.values:
            role = interaction.guild.get_role(int(role_id))
            if role:
                new_selected.append(role)
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∑ –æ–±—Ä–∞–Ω–∏—Ö —Ç—ñ, —â–æ –Ω–µ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –≤–∏–±–æ—Ä—ñ
        current_page_roles = self.view.get_page_roles()
        self.view.selected_roles = [role for role in self.view.selected_roles if role not in current_page_roles]
        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –æ–±—Ä–∞–Ω—ñ
        self.view.selected_roles.extend(new_selected)
        
        self.view.update_select()
        
        embed = discord.Embed(
            title="üèÜ –ö—Ä–æ–∫ 1: –í–∏–±—ñ—Ä —Ä–æ–ª–µ–π",
            color=0x7c7cf0,
            description=f"**–°—Ç–æ—Ä—ñ–Ω–∫–∞ {self.view.current_page + 1}/{self.view.total_pages}**\n"
                       f"**–û–±—Ä–∞–Ω–æ —Ä–æ–ª–µ–π:** {len(self.view.selected_roles)}\n" + 
                       (", ".join([role.mention for role in self.view.selected_roles[:10]]) + 
                        (f" —ñ —â–µ {len(self.view.selected_roles) - 10}..." if len(self.view.selected_roles) > 10 else "") 
                        if self.view.selected_roles else "–ñ–æ–¥–Ω–æ—ó —Ä–æ–ª—ñ –Ω–µ –æ–±—Ä–∞–Ω–æ")
        )
        
        await interaction.response.edit_message(embed=embed, view=self.view)

class ConfigDeleteView(discord.ui.View):
    def __init__(self, guild_id: str, configs: List[dict]):
        super().__init__(timeout=300)
        self.guild_id = guild_id
        self.configs = configs
        self.setup_select()

    def setup_select(self):
        if not self.configs:
            return
        
        activity_names = {
            ActivityType.CHAT: "üìù –ß–∞—Ç",
            ActivityType.VOICE: "üé§ –í–æ–π—Å",
            ActivityType.COMBINED: "üèÜ –ó–∞–≥–∞–ª—å–Ω–∞"
        }
        
        # –ì—Ä—É–ø—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –ø–æ —Ä–æ–ª—è—Ö –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
        role_configs = {}
        for config in self.configs:
            role_id = config["role_id"]
            if role_id not in role_configs:
                role_configs[role_id] = []
            role_configs[role_id].append(config)
        
        options = []
        for role_id, configs_list in list(role_configs.items())[:25]:  # Discord limit
            guild = discord.utils.get(discord.Client().guilds, id=int(self.guild_id)) if hasattr(discord.Client(), 'guilds') else None
            role_name = f"–†–æ–ª—å ID: {role_id}"  # Fallback
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–ø–∏—Å –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π –¥–ª—è —Ü—ñ—î—ó —Ä–æ–ª—ñ
            config_descriptions = []
            for config in configs_list:
                activity = activity_names.get(config["activity_type"], config["activity_type"])
                position = config["top_position"]
                duration = config["duration_days"]
                config_descriptions.append(f"{activity} ‚Ä¢ –¢–æ–ø {position} ‚Ä¢ {duration}–¥")
            
            options.append(discord.SelectOption(
                label=role_name[:100],
                value=role_id,
                description=(" | ".join(config_descriptions))[:100],
                emoji="üóëÔ∏è"
            ))
        
        if options:
            select = discord.ui.Select(
                placeholder="–û–±–µ—Ä–∏ —Ä–æ–ª—ñ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π...",
                options=options,
                max_values=min(len(options), 25)
            )
            select.callback = self.delete_configs
            self.add_item(select)

    async def delete_configs(self, interaction: discord.Interaction):
        await interaction.response.defer()
        
        try:
            deleted_count = 0
            for role_id in interaction.data['values']:
                result = await db.weekly_roles.delete_many({
                    "guild_id": self.guild_id,
                    "role_id": role_id
                })
                deleted_count += result.deleted_count
            
            embed = discord.Embed(
                title="‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –≤–∏–¥–∞–ª–µ–Ω–æ",
                color=0x00ff00,
                description=f"–£—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ **{deleted_count}** –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π –¥–ª—è **{len(interaction.data['values'])}** —Ä–æ–ª–µ–π."
            )
            
            embed.add_field(
                name="üìã –í–∏–¥–∞–ª–µ–Ω—ñ —Ä–æ–ª—ñ",
                value="\n".join([f"‚Ä¢ –†–æ–ª—å ID: {role_id}" for role_id in interaction.data['values']]),
                inline=False
            )
            
            embed.set_footer(text=f"–í–∏–¥–∞–ª–∏–≤: {interaction.user.display_name}")
            
            await interaction.edit_original_response(embed=embed, view=None)
            
        except Exception as e:
            embed = discord.Embed(
                title="‚ùå –ü–æ–º–∏–ª–∫–∞",
                color=0xff0000,
                description=f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {str(e)}"
            )
            await interaction.edit_original_response(embed=embed, view=None)

# –†–µ—à—Ç–∞ –∫–æ–¥—É –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω...
class ActivityTypeView(discord.ui.View):
    def __init__(self, roles: List[discord.Role]):
        super().__init__(timeout=300)
        self.roles = roles
        self.activity_type = None

    @discord.ui.button(label="–¢–æ–ø —á–∞—Ç—É", emoji="üìù", style=discord.ButtonStyle.primary, row=0)
    async def chat_top(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.activity_type = ActivityType.CHAT
        await self.continue_to_positions(interaction)

    @discord.ui.button(label="–¢–æ–ø –≤–æ–π—Å—É", emoji="üé§", style=discord.ButtonStyle.primary, row=0)
    async def voice_top(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.activity_type = ActivityType.VOICE
        await self.continue_to_positions(interaction)

    @discord.ui.button(label="–ó–∞–≥–∞–ª—å–Ω–∏–π —Ç–æ–ø", emoji="üèÜ", style=discord.ButtonStyle.primary, row=0)
    async def combined_top(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.activity_type = ActivityType.COMBINED
        await self.continue_to_positions(interaction)

    async def continue_to_positions(self, interaction: discord.Interaction):
        await interaction.response.defer()
        view = PositionSelectView(self.roles, self.activity_type)
        
        activity_names = {
            ActivityType.CHAT: "üìù –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤ —á–∞—Ç—ñ",
            ActivityType.VOICE: "üé§ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —É –≤–æ–π—Å—ñ", 
            ActivityType.COMBINED: "üèÜ –ó–∞–≥–∞–ª—å–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å"
        }
        
        embed = discord.Embed(
            title="üèÜ –ö—Ä–æ–∫ 3: –¢–æ–ø –ø–æ–∑–∏—Ü—ñ—ó",
            color=0x7c7cf0,
            description=f"**–†–æ–ª—ñ:** {', '.join([role.mention for role in self.roles[:5]])}" +
                       (f" —ñ —â–µ {len(self.roles) - 5}..." if len(self.roles) > 5 else "") + "\n" +
                       f"**–¢–∏–ø:** {activity_names[self.activity_type]}\n\n" +
                       f"–û–±–µ—Ä–∏ —è–∫—ñ —Ç–æ–ø –ø–æ–∑–∏—Ü—ñ—ó –±—É–¥—É—Ç—å –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Ü—ñ —Ä–æ–ª—ñ:"
        )
        
        await interaction.edit_original_response(embed=embed, view=view)

class PositionSelectView(discord.ui.View):
    def __init__(self, roles: List[discord.Role], activity_type: str):
        super().__init__(timeout=300)
        self.roles = roles
        self.activity_type = activity_type
        self.top_positions = []

    @discord.ui.select(
        placeholder="–û–±–µ—Ä–∏ —Ç–æ–ø –ø–æ–∑–∏—Ü—ñ—ó (–º–æ–∂–Ω–∞ –¥–µ–∫—ñ–ª—å–∫–∞)...",
        options=[
            discord.SelectOption(label="–¢–æ–ø 1", value="1", emoji="ü•á"),
            discord.SelectOption(label="–¢–æ–ø 2", value="2", emoji="ü•à"), 
            discord.SelectOption(label="–¢–æ–ø 3", value="3", emoji="ü•â"),
            discord.SelectOption(label="–¢–æ–ø 4", value="4", emoji="4Ô∏è‚É£"),
            discord.SelectOption(label="–¢–æ–ø 5", value="5", emoji="5Ô∏è‚É£"),
            discord.SelectOption(label="–¢–æ–ø 1-5", value="1-5", emoji="üèÜ"),
            discord.SelectOption(label="–¢–æ–ø 1-10", value="1-10", emoji="üîù"),
            discord.SelectOption(label="–¢–æ–ø 1-15", value="1-15", emoji="‚≠ê"),
        ],
        max_values=8
    )
    async def position_select(self, interaction: discord.Interaction, select: discord.ui.Select):
        self.top_positions = select.values
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è
        if not hasattr(self, 'continue_btn'):
            self.continue_btn = discord.ui.Button(
                label="–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏",
                style=discord.ButtonStyle.green,
                emoji="‚úÖ",
                row=1
            )
            self.continue_btn.callback = self.continue_to_duration
            self.add_item(self.continue_btn)
        
        positions_text = ", ".join([f"–¢–æ–ø {pos}" for pos in self.top_positions])
        
        embed = discord.Embed(
            title="üèÜ –ö—Ä–æ–∫ 3: –¢–æ–ø –ø–æ–∑–∏—Ü—ñ—ó",
            color=0x7c7cf0,
            description=f"**–†–æ–ª—ñ:** {', '.join([role.mention for role in self.roles[:5]])}" +
                       (f" —ñ —â–µ {len(self.roles) - 5}..." if len(self.roles) > 5 else "") + "\n" +
                       f"**–¢–∏–ø:** {self.activity_type}\n"
                       f"**–ü–æ–∑–∏—Ü—ñ—ó:** {positions_text}\n\n"
                       f"‚úÖ –ù–∞—Ç–∏—Å–Ω–∏ '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É"
        )
        
        await interaction.response.edit_message(embed=embed, view=self)

    async def continue_to_duration(self, interaction: discord.Interaction):
        await interaction.response.defer()
        view = DurationSelectView(self.roles, self.activity_type, self.top_positions)
        
        embed = discord.Embed(
            title="üèÜ –ö—Ä–æ–∫ 4: –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å",
            color=0x7c7cf0,
            description=f"–û–±–µ—Ä–∏ —è–∫ —á–∞—Å—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –º–∞—î –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ —Ü—ñ —Ä–æ–ª—ñ:"
        )
        
        await interaction.edit_original_response(embed=embed, view=view)

class DurationSelectView(discord.ui.View):
    def __init__(self, roles: List[discord.Role], activity_type: str, top_positions: List[str]):
        super().__init__(timeout=300)
        self.roles = roles
        self.activity_type = activity_type
        self.top_positions = top_positions

    @discord.ui.button(label="7 –¥–Ω—ñ–≤", emoji="1Ô∏è‚É£", style=discord.ButtonStyle.secondary, row=0)
    async def seven_days(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.continue_to_logs(interaction, 7)

    @discord.ui.button(label="14 –¥–Ω—ñ–≤", emoji="2Ô∏è‚É£", style=discord.ButtonStyle.secondary, row=0) 
    async def fourteen_days(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.continue_to_logs(interaction, 14)

    @discord.ui.button(label="30 –¥–Ω—ñ–≤", emoji="3Ô∏è‚É£", style=discord.ButtonStyle.secondary, row=0)
    async def thirty_days(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.continue_to_logs(interaction, 30)

    async def continue_to_logs(self, interaction: discord.Interaction, duration: int):
        await interaction.response.defer()
        view = LogChannelSelectView(self.roles, self.activity_type, self.top_positions, duration)
        
        embed = discord.Embed(
            title="üèÜ –ö—Ä–æ–∫ 5: –ö–∞–Ω–∞–ª –ª–æ–≥—ñ–≤ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)",
            color=0x7c7cf0,
            description=f"–û–±–µ—Ä–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω —Ä–æ–ª–µ–π –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏ —Ü–µ–π –∫—Ä–æ–∫:"
        )
        
        await interaction.edit_original_response(embed=embed, view=view)

class LogChannelSelectView(discord.ui.View):
    def __init__(self, roles: List[discord.Role], activity_type: str, top_positions: List[str], duration: int):
        super().__init__(timeout=300)
        self.roles = roles
        self.activity_type = activity_type
        self.top_positions = top_positions
        self.duration = duration
        self.log_channel = None
        self.setup_select()

    def setup_select(self):
        text_channels = [ch for ch in self.roles[0].guild.text_channels if ch.permissions_for(self.roles[0].guild.me).send_messages][:25]
        
        if text_channels:
            options = []
            for channel in text_channels:
                options.append(discord.SelectOption(
                    label=f"#{channel.name}"[:100],
                    value=str(channel.id),
                    description=channel.category.name if channel.category else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
                ))
            
            select = discord.ui.Select(
                placeholder="–û–±–µ—Ä–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥—ñ–≤...",
                options=options,
                row=0
            )
            select.callback = self.channel_selected
            self.add_item(select)

        # –ö–Ω–æ–ø–∫–∏
        skip_btn = discord.ui.Button(label="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", style=discord.ButtonStyle.secondary, emoji="‚è≠Ô∏è", row=1)
        skip_btn.callback = lambda i: self.finish_setup(i, None)
        self.add_item(skip_btn)

    async def channel_selected(self, interaction: discord.Interaction):
        channel_id = int(interaction.data['values'][0])
        self.log_channel = interaction.guild.get_channel(channel_id)
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        finish_btn = discord.ui.Button(
            label=f"–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑ #{self.log_channel.name}",
            style=discord.ButtonStyle.green,
            emoji="‚úÖ",
            row=2
        )
        finish_btn.callback = lambda i: self.finish_setup(i, self.log_channel)
        self.add_item(finish_btn)
        
        embed = discord.Embed(
            title="üèÜ –ö—Ä–æ–∫ 5: –ö–∞–Ω–∞–ª –ª–æ–≥—ñ–≤",
            color=0x7c7cf0,
            description=f"**–û–±—Ä–∞–Ω–æ –∫–∞–Ω–∞–ª:** {self.log_channel.mention}\n\n‚úÖ –ù–∞—Ç–∏—Å–Ω–∏ '–ó–∞–≤–µ—Ä—à–∏—Ç–∏' —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"
        )
        
        await interaction.response.edit_message(embed=embed, view=self)

    async def finish_setup(self, interaction: discord.Interaction, log_channel: Optional[discord.TextChannel]):
        await interaction.response.defer()
        
        try:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –≤ –ë–î
            for role in self.roles:
                for position in self.top_positions:
                    config_data = {
                        "guild_id": str(interaction.guild.id),
                        "role_id": str(role.id),
                        "activity_type": self.activity_type,
                        "top_position": position,
                        "duration_days": self.duration,
                        "log_channel_id": str(log_channel.id) if log_channel else None,
                        "enabled": True,
                        "created_by": interaction.user.id,
                        "created_at": datetime.utcnow(),
                        "next_update": datetime.utcnow() + timedelta(days=self.duration)
                    }
                    
                    await db.weekly_roles.update_one(
                        {
                            "guild_id": str(interaction.guild.id),
                            "role_id": str(role.id),
                            "top_position": position
                        },
                        {"$set": config_data},
                        upsert=True
                    )

            # –ü—ñ–¥—Å—É–º–æ–∫
            activity_names = {
                ActivityType.CHAT: "üìù –ß–∞—Ç",
                ActivityType.VOICE: "üé§ –í–æ–π—Å",
                ActivityType.COMBINED: "üèÜ –ó–∞–≥–∞–ª—å–Ω–∞"
            }
            
            positions_text = ", ".join([f"–¢–æ–ø {pos}" for pos in self.top_positions])
            roles_text = ", ".join([role.mention for role in self.roles[:5]])
            if len(self.roles) > 5:
                roles_text += f" —ñ —â–µ {len(self.roles) - 5}..."
            
            embed = discord.Embed(
                title="‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
                color=0x00ff00,
                description="–°–∏—Å—Ç–µ–º–∞ —â–æ—Ç–∏–∂–Ω–µ–≤–∏—Ö —Ä–æ–ª–µ–π —É—Å–ø—ñ—à–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞"
            )
            
            embed.add_field(
                name="üìã –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è",
                value=f"**–†–æ–ª—ñ:** {roles_text}\n"
                     f"**–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:** {activity_names[self.activity_type]}\n" 
                     f"**–ü–æ–∑–∏—Ü—ñ—ó:** {positions_text}\n"
                     f"**–û–Ω–æ–≤–ª–µ–Ω–Ω—è:** –ö–æ–∂–Ω—ñ {self.duration} –¥–Ω—ñ–≤\n"
                     f"**–õ–æ–≥–∏:** {log_channel.mention if log_channel else '–í–∏–º–∫–Ω–µ–Ω–æ'}",
                inline=False
            )
            
            next_update = datetime.utcnow() + timedelta(days=self.duration)
            embed.add_field(
                name="‚è∞ –ù–∞—Å—Ç—É–ø–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è",
                value=f"<t:{int(next_update.timestamp())}:F>",
                inline=False
            )
            
            embed.set_footer(text=f"–ù–∞–ª–∞—à—Ç—É–≤–∞–≤: {interaction.user.display_name}")
            
            await interaction.edit_original_response(embed=embed, view=None)
            
        except Exception as e:
            embed = discord.Embed(
                title="‚ùå –ü–æ–º–∏–ª–∫–∞",
                color=0xff0000,
                description=f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: {str(e)}"
            )
            await interaction.edit_original_response(embed=embed, view=None)

class WeeklyRoleSystem(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.role_updater.start()

    def cog_unload(self):
        self.role_updater.cancel()

    @app_commands.command(name="weekly-role", description="[–ê–î–ú–Ü–ù] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —â–æ—Ç–∏–∂–Ω–µ–≤–∏—Ö —Ä–æ–ª–µ–π")
    async def weekly_role(self, interaction: discord.Interaction):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —â–æ—Ç–∏–∂–Ω–µ–≤–∏—Ö —Ä–æ–ª–µ–π"""
        if not interaction.user.guild_permissions.manage_roles:
            await interaction.response.send_message("‚ùå –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ–ª—è–º–∏!", ephemeral=True)
            return

        embed = discord.Embed(
            title="üèÜ –ö—Ä–æ–∫ 1: –í–∏–±—ñ—Ä —Ä–æ–ª–µ–π",
            color=0x7c7cf0,
            description="–û–±–µ—Ä–∏ —Ä–æ–ª—ñ, —è–∫—ñ –º–∞—é—Ç—å –≤–∏–¥–∞–≤–∞—Ç–∏—Å—è –∑–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å.\n–ú–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞ —Ä–æ–ª–µ–π –¥–ª—è –æ–¥–Ω–∞–∫–æ–≤–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å.\n\n" +
                       "üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—ñ—Ö —Ä–æ–ª–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ."
        )

        view = RoleSelectView(interaction.guild)
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

    @tasks.loop(hours=1)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É
    async def role_updater(self):
        """–û–Ω–æ–≤–ª—é—î —Ä–æ–ª—ñ –∑–≥—ñ–¥–Ω–æ –∑ —Ä–æ–∑–∫–ª–∞–¥–æ–º"""
        if db is None:
            return

        current_time = datetime.utcnow()
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏
        configs_to_update = await db.weekly_roles.find({
            "enabled": True,
            "next_update": {"$lte": current_time}
        }).to_list(1000)

        for config in configs_to_update:
            try:
                guild = self.bot.get_guild(int(config["guild_id"]))
                if not guild:
                    continue
                
                await self._process_role_config(guild, config)
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                next_update = current_time + timedelta(days=config["duration_days"])
                await db.weekly_roles.update_one(
                    {"_id": config["_id"]},
                    {"$set": {"next_update": next_update}}
                )
                
            except Exception as e:
                print(f"Error processing role config {config.get('_id')}: {e}")

    async def _process_role_config(self, guild: discord.Guild, config: dict):
        """–û–±—Ä–æ–±–ª—è—î –æ–¥–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —Ä–æ–ª—ñ"""
        role = guild.get_role(int(config["role_id"]))
        if not role or role.position >= guild.me.top_role.position:
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        top_users = await self._get_top_users_for_config(guild, config)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–ª—ñ
        assigned, removed = await self._update_role_for_users(guild, role, top_users)
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è
        if config.get("log_channel_id") and (assigned or removed):
            await self._log_role_changes(guild, config, role, assigned, removed)

    async def _get_top_users_for_config(self, guild: discord.Guild, config: dict) -> List[int]:
        """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
        activity_type = config["activity_type"]
        position = config["top_position"]
        duration = config["duration_days"]
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        if "-" in position:
            # –î—ñ–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "1-5")
            start, end = map(int, position.split("-"))
            count = end
        else:
            # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "3")
            count = int(position)

        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        end_date = datetime.now()
        start_date = end_date - timedelta(days=duration)
        date_range = [(start_date + timedelta(days=i)).strftime("%Y-%m-%d") for i in range(duration)]

        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Å–µ—Ä–≤–µ—Ä–∞
        users_str = await db.users.find({"guild_id": str(guild.id)}).to_list(10000)
        users_int = await db.users.find({"guild_id": guild.id}).to_list(10000)
        users = users_str if len(users_str) > 0 else users_int

        user_activity = []

        for user_data in users:
            user_id = user_data.get("user_id")
            if isinstance(user_id, str):
                try:
                    user_id = int(user_id)
                except:
                    continue

            member = guild.get_member(user_id)
            if not member or member.bot:
                continue

            history = user_data.get("history", {})
            
            if activity_type == ActivityType.CHAT:
                # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (10 XP –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
                activity_score = 0
                for date_str in date_range:
                    daily_xp = history.get(date_str, 0)
                    activity_score += daily_xp // 10
                    
            elif activity_type == ActivityType.VOICE:
                # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ —á–∞—Å –≤ –≤–æ–π—Å—ñ (5 XP –∑–∞ —Ö–≤–∏–ª–∏–Ω—É)
                activity_score = 0
                for date_str in date_range:
                    daily_xp = history.get(date_str, 0)
                    activity_score += daily_xp // 5
                    
            elif activity_type == ActivityType.COMBINED:
                # –ó–∞–≥–∞–ª—å–Ω–∏–π XP
                activity_score = 0
                for date_str in date_range:
                    activity_score += history.get(date_str, 0)
            
            if activity_score > 0:
                user_activity.append((user_id, activity_score))

        # –°–æ—Ä—Ç—É—î–º–æ —Ç–∞ –±–µ—Ä–µ–º–æ —Ç–æ–ø
        user_activity.sort(key=lambda x: x[1], reverse=True)
        
        if "-" in position:
            # –î—ñ–∞–ø–∞–∑–æ–Ω –ø–æ–∑–∏—Ü—ñ–π
            start, end = map(int, position.split("-"))
            selected_users = [user_id for user_id, _ in user_activity[start-1:end]]
        else:
            # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è
            pos = int(position)
            if pos <= len(user_activity):
                selected_users = [user_activity[pos-1][0]]
            else:
                selected_users = []

        return selected_users

    async def _update_role_for_users(self, guild: discord.Guild, role: discord.Role, target_users: List[int]) -> tuple:
        """–û–Ω–æ–≤–ª—é—î —Ä–æ–ª—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        assigned = []
        removed = []

        # –ü–æ—Ç–æ—á–Ω—ñ –≤–ª–∞—Å–Ω–∏–∫–∏ —Ä–æ–ª—ñ
        current_holders = [member.id for member in guild.members if role in member.roles]

        # –ó–Ω—ñ–º–∞—î–º–æ —Ä–æ–ª—å —É —Ç–∏—Ö, —Ö—Ç–æ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω —ó—ó –º–∞—Ç–∏
        for user_id in current_holders:
            if user_id not in target_users:
                member = guild.get_member(user_id)
                if member:
                    try:
                        await member.remove_roles(role, reason="–°–∏—Å—Ç–µ–º–∞ —â–æ—Ç–∏–∂–Ω–µ–≤–∏—Ö —Ä–æ–ª–µ–π - –Ω–µ –≤ —Ç–æ–ø—ñ")
                        removed.append(member)
                    except:
                        pass

        # –í–∏–¥–∞—î–º–æ —Ä–æ–ª—å —Ç–∏–º, —Ö—Ç–æ –ø–æ–≤–∏–Ω–µ–Ω —ó—ó –º–∞—Ç–∏
        for user_id in target_users:
            if user_id not in current_holders:
                member = guild.get_member(user_id)
                if member:
                    try:
                        await member.add_roles(role, reason="–°–∏—Å—Ç–µ–º–∞ —â–æ—Ç–∏–∂–Ω–µ–≤–∏—Ö —Ä–æ–ª–µ–π - –≤ —Ç–æ–ø—ñ")
                        assigned.append(member)
                    except:
                        pass

        return assigned, removed

    async def _log_role_changes(self, guild: discord.Guild, config: dict, role: discord.Role, assigned: List[discord.Member], removed: List[discord.Member]):
        """–õ–æ–≥—É—î –∑–º—ñ–Ω–∏ —Ä–æ–ª–µ–π"""
        log_channel = guild.get_channel(int(config["log_channel_id"]))
        if not log_channel:
            return

        embed = discord.Embed(
            title="üèÜ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —â–æ—Ç–∏–∂–Ω–µ–≤–∏—Ö —Ä–æ–ª–µ–π",
            color=0x7c7cf0,
            timestamp=datetime.utcnow()
        )

        activity_names = {
            ActivityType.CHAT: "üìù –ß–∞—Ç",
            ActivityType.VOICE: "üé§ –í–æ–π—Å", 
            ActivityType.COMBINED: "üèÜ –ó–∞–≥–∞–ª—å–Ω–∞"
        }

        embed.add_field(
            name="üìã –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è",
            value=f"**–†–æ–ª—å:** {role.mention}\n"
                 f"**–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:** {activity_names[config['activity_type']]}\n"
                 f"**–ü–æ–∑–∏—Ü—ñ—è:** –¢–æ–ø {config['top_position']}",
            inline=False
        )

        if assigned:
            assigned_text = "\n".join([f"‚Ä¢ {member.mention}" for member in assigned[:10]])
            if len(assigned) > 10:
                assigned_text += f"\n... —ñ —â–µ {len(assigned) - 10}"
            embed.add_field(name="‚úÖ –í–∏–¥–∞–Ω–æ —Ä–æ–ª—å", value=assigned_text, inline=True)

        if removed:
            removed_text = "\n".join([f"‚Ä¢ {member.mention}" for member in removed[:10]])
            if len(removed) > 10:
                removed_text += f"\n... —ñ —â–µ {len(removed) - 10}"
            embed.add_field(name="‚ùå –ó–Ω—è—Ç–æ —Ä–æ–ª—å", value=removed_text, inline=True)

        embed.set_footer(text="–°–∏—Å—Ç–µ–º–∞ —â–æ—Ç–∏–∂–Ω–µ–≤–∏—Ö —Ä–æ–ª–µ–π")

        try:
            await log_channel.send(embed=embed)
        except:
            pass

    @role_updater.before_loop
    async def before_role_updater(self):
        await self.bot.wait_until_ready()

    @app_commands.command(name="weekly-status", description="[–ê–î–ú–Ü–ù] –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏ —â–æ—Ç–∏–∂–Ω–µ–≤–∏—Ö —Ä–æ–ª–µ–π")
    async def weekly_status(self, interaction: discord.Interaction):
        """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏ —â–æ—Ç–∏–∂–Ω–µ–≤–∏—Ö —Ä–æ–ª–µ–π"""
        if not interaction.user.guild_permissions.manage_roles:
            await interaction.response.send_message("‚ùå –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ–ª—è–º–∏!", ephemeral=True)
            return

        await interaction.response.defer(ephemeral=True)

        try:
            configs = await db.weekly_roles.find({
                "guild_id": str(interaction.guild.id),
                "enabled": True
            }).to_list(100)

            if not configs:
                embed = discord.Embed(
                    title="üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏ —â–æ—Ç–∏–∂–Ω–µ–≤–∏—Ö —Ä–æ–ª–µ–π",
                    color=0x7c7cf0,
                    description="‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π `/weekly-role` –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"
                )
                await interaction.followup.send(embed=embed)
                return

            embed = discord.Embed(
                title="üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏ —â–æ—Ç–∏–∂–Ω–µ–≤–∏—Ö —Ä–æ–ª–µ–π",
                color=0x7c7cf0,
                description=f"–ó–Ω–∞–π–¥–µ–Ω–æ **{len(configs)}** –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π"
            )

            activity_names = {
                ActivityType.CHAT: "üìù –ß–∞—Ç",
                ActivityType.VOICE: "üé§ –í–æ–π—Å",
                ActivityType.COMBINED: "üèÜ –ó–∞–≥–∞–ª—å–Ω–∞"
            }

            # –ì—Ä—É–ø—É—î–º–æ –ø–æ —Ä–æ–ª—è—Ö
            role_configs = {}
            for config in configs:
                role_id = config["role_id"]
                if role_id not in role_configs:
                    role_configs[role_id] = []
                role_configs[role_id].append(config)

            for role_id, role_configs_list in list(role_configs.items())[:10]:  # –ú–∞–∫—Å–∏–º—É–º 10 —Ä–æ–ª–µ–π
                role = interaction.guild.get_role(int(role_id))
                role_name = role.name if role else f"–í–∏–¥–∞–ª–µ–Ω–∞ —Ä–æ–ª—å (ID: {role_id})"

                config_texts = []
                for config in role_configs_list:
                    activity_type = activity_names.get(config["activity_type"], config["activity_type"])
                    position = config["top_position"]
                    duration = config["duration_days"]
                    next_update = config.get("next_update", datetime.utcnow())
                    
                    config_text = f"{activity_type} ‚Ä¢ –¢–æ–ø {position} ‚Ä¢ {duration}–¥ ‚Ä¢ <t:{int(next_update.timestamp())}:R>"
                    config_texts.append(config_text)

                embed.add_field(
                    name=f"{role_name}",
                    value="\n".join(config_texts),
                    inline=False
                )

            # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π
            delete_view = discord.ui.View(timeout=300)
            delete_btn = discord.ui.Button(
                label="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó",
                style=discord.ButtonStyle.danger,
                emoji="üóëÔ∏è"
            )
            
            async def delete_callback(button_interaction):
                await button_interaction.response.defer()
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ view –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
                delete_config_view = ConfigDeleteView(str(interaction.guild.id), configs)
                
                delete_embed = discord.Embed(
                    title="üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π",
                    color=0xff6b6b,
                    description="–û–±–µ—Ä–∏ —Ä–æ–ª—ñ, –¥–ª—è —è–∫–∏—Ö –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —â–æ—Ç–∏–∂–Ω–µ–≤–∏—Ö —Ä–æ–ª–µ–π.\n"
                               "**‚ö†Ô∏è –£–≤–∞–≥–∞:** –¶—è –¥—ñ—è –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∞!"
                )
                
                await button_interaction.edit_original_response(embed=delete_embed, view=delete_config_view)
            
            delete_btn.callback = delete_callback
            delete_view.add_item(delete_btn)

            await interaction.followup.send(embed=embed, view=delete_view)

        except Exception as e:
            await interaction.followup.send(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

async def setup(bot):
    await bot.add_cog(WeeklyRoleSystem(bot))