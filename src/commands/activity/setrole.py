import discord
from discord import app_commands
from discord.ext import commands, tasks
from datetime import datetime, timedelta
from modules.db import get_database
import asyncio

db = get_database()

class RoleManagementView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –ø—Ä–∞–≤–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏"""
        if not interaction.user.guild_permissions.manage_roles:
            await interaction.response.send_message("‚ùå –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ–ª—è–º–∏!", ephemeral=True)
            return False
        return True

    @discord.ui.button(emoji="‚¨ÜÔ∏è", label="–†–æ–ª—å –∑–∞ —Ä—ñ–≤–Ω–µ–º", style=discord.ButtonStyle.secondary, row=0)
    async def level_role(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–≤–∏–¥–∞—á—É —Ä–æ–ª—ñ –∑–∞ —Ä—ñ–≤–Ω–µ–º"""
        await interaction.response.send_message("üéØ **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–≤–∏–¥–∞—á—ñ —Ä–æ–ª—ñ –∑–∞ —Ä—ñ–≤–Ω–µ–º**\n\n–í–∫–∞–∂–∏ —Ä–æ–ª—å (–∑–≥–∞–¥—É–≤–∞–Ω–Ω—è @—Ä–æ–ª—å –∞–±–æ ID):", ephemeral=True)
        
        def check(message):
            return message.author.id == interaction.user.id and message.channel.id == interaction.channel.id

        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–ª—å
            role_msg = await interaction.client.wait_for('message', check=check)
            role = await self._parse_role(interaction.guild, role_msg.content.strip())
            
            if not role:
                await interaction.followup.send("‚ùå –†–æ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", ephemeral=True)
                return

            await interaction.followup.send(f"‚úÖ –†–æ–ª—å **{role.name}** –∑–Ω–∞–π–¥–µ–Ω–æ!\n\n–¢–µ–ø–µ—Ä –≤–∫–∞–∂–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä—ñ–≤–µ–Ω—å (1-100):", ephemeral=True)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ä—ñ–≤–µ–Ω—å
            level_msg = await interaction.client.wait_for('message', check=check)
            
            try:
                level = int(level_msg.content.strip())
                if level <= 0 or level > 100:
                    await interaction.followup.send("‚ùå –†—ñ–≤–µ–Ω—å –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 100!", ephemeral=True)
                    return
            except ValueError:
                await interaction.followup.send("‚ùå –í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–µ —á–∏—Å–ª–æ –¥–ª—è —Ä—ñ–≤–Ω—è!", ephemeral=True)
                return

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
            await db.auto_roles.update_one(
                {"guild_id": str(interaction.guild.id), "role_id": str(role.id)},
                {
                    "$set": {
                        "guild_id": str(interaction.guild.id),
                        "role_id": str(role.id),
                        "type": "level",
                        "required_level": level,
                        "enabled": True,
                        "created_by": interaction.user.id,
                        "created_at": datetime.utcnow()
                    }
                },
                upsert=True
            )
            
            await interaction.followup.send(f"‚úÖ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–≤–∏–¥–∞—á—É —Ä–æ–ª—ñ **{role.name}** –∑–∞ **{level} —Ä—ñ–≤–µ–Ω—å**!", ephemeral=True)

        except Exception as e:
            await interaction.followup.send(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}", ephemeral=True)

    @discord.ui.button(emoji="‚¨áÔ∏è", label="–†–æ–ª—å –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", style=discord.ButtonStyle.secondary, row=0)
    async def inactive_role(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–∑–Ω—è—Ç—Ç—è —Ä–æ–ª—ñ –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å"""
        await interaction.response.send_message("üóëÔ∏è **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–∑–Ω—è—Ç—Ç—è —Ä–æ–ª—ñ –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å**\n\n–í–∫–∞–∂–∏ —Ä–æ–ª—å (–∑–≥–∞–¥—É–≤–∞–Ω–Ω—è @—Ä–æ–ª—å –∞–±–æ ID):", ephemeral=True)
        
        def check(message):
            return message.author.id == interaction.user.id and message.channel.id == interaction.channel.id

        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–ª—å
            role_msg = await interaction.client.wait_for('message', check=check)
            role = await self._parse_role(interaction.guild, role_msg.content.strip())
            
            if not role:
                await interaction.followup.send("‚ùå –†–æ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", ephemeral=True)
                return

            await interaction.followup.send(f"‚úÖ –†–æ–ª—å **{role.name}** –∑–Ω–∞–π–¥–µ–Ω–æ!\n\n–í–∫–∞–∂–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ (1-365):", ephemeral=True)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–Ω—ñ
            days_msg = await interaction.client.wait_for('message', check=check)
            
            try:
                days = int(days_msg.content.strip())
                if days <= 0 or days > 365:
                    await interaction.followup.send("‚ùå –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 365!", ephemeral=True)
                    return
            except ValueError:
                await interaction.followup.send("‚ùå –í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–µ —á–∏—Å–ª–æ –¥–ª—è –¥–Ω—ñ–≤!", ephemeral=True)
                return

            await interaction.followup.send(f"‚úÖ –ü–µ—Ä—ñ–æ–¥: **{days} –¥–Ω—ñ–≤**\n\n–í–∫–∞–∂–∏ –º—ñ–Ω—ñ–º—É–º XP –∑–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥:", ephemeral=True)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ XP
            xp_msg = await interaction.client.wait_for('message', check=check)
            
            try:
                min_xp = int(xp_msg.content.strip())
                if min_xp <= 0:
                    await interaction.followup.send("‚ùå –ú—ñ–Ω—ñ–º—É–º XP –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0!", ephemeral=True)
                    return
            except ValueError:
                await interaction.followup.send("‚ùå –í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–µ —á–∏—Å–ª–æ –¥–ª—è XP!", ephemeral=True)
                return

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
            await db.auto_roles.update_one(
                {"guild_id": str(interaction.guild.id), "role_id": str(role.id)},
                {
                    "$set": {
                        "guild_id": str(interaction.guild.id),
                        "role_id": str(role.id),
                        "type": "inactive",
                        "check_days": days,
                        "min_xp": min_xp,
                        "enabled": True,
                        "created_by": interaction.user.id,
                        "created_at": datetime.utcnow()
                    }
                },
                upsert=True
            )
            
            await interaction.followup.send(f"‚úÖ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–∑–Ω—è—Ç—Ç—è —Ä–æ–ª—ñ **{role.name}** –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å ({days} –¥–Ω—ñ–≤, <{min_xp} XP)!", ephemeral=True)

        except Exception as e:
            await interaction.followup.send(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}", ephemeral=True)

    @discord.ui.button(emoji="üìä", label="–ö–∞–Ω–∞–ª –∑–≤—ñ—Ç—ñ–≤", style=discord.ButtonStyle.secondary, row=0)
    async def report_channel(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –∑–≤—ñ—Ç—ñ–≤"""
        await interaction.response.send_message("üìä **–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É –¥–ª—è –∑–≤—ñ—Ç—ñ–≤**\n\n–í–∫–∞–∂–∏ –∫–∞–Ω–∞–ª (–∑–≥–∞–¥—É–≤–∞–Ω–Ω—è #–∫–∞–Ω–∞–ª –∞–±–æ ID):", ephemeral=True)
        
        def check(message):
            return message.author.id == interaction.user.id and message.channel.id == interaction.channel.id

        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞–Ω–∞–ª
            channel_msg = await interaction.client.wait_for('message', check=check, timeout=60.0)
            channel = await self._parse_channel(interaction.guild, channel_msg.content.strip())
            
            if not channel or not isinstance(channel, discord.TextChannel):
                await interaction.followup.send("‚ùå –¢–µ–∫—Å—Ç–æ–≤–∏–π –∫–∞–Ω–∞–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", ephemeral=True)
                return

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
            await db.guild_settings.update_one(
                {"guild_id": str(interaction.guild.id)},
                {
                    "$set": {
                        "guild_id": str(interaction.guild.id),
                        "report_channel_id": str(channel.id),
                        "updated_by": interaction.user.id,
                        "updated_at": datetime.utcnow()
                    }
                },
                upsert=True
            )
            
            await interaction.followup.send(f"‚úÖ –ö–∞–Ω–∞–ª –¥–ª—è –∑–≤—ñ—Ç—ñ–≤ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {channel.mention}!", ephemeral=True)

        except asyncio.TimeoutError:
            await interaction.followup.send("‚è∞ –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", ephemeral=True)
        except Exception as e:
            await interaction.followup.send(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}", ephemeral=True)

    @discord.ui.button(emoji="üóëÔ∏è", label="–í–∏–¥–∞–ª–∏—Ç–∏ —Ä–æ–ª—å", style=discord.ButtonStyle.secondary, row=0)
    async def delete_role(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–í–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–ª—ñ"""
        await interaction.response.send_message("üóëÔ∏è **–í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ä–æ–ª—ñ**\n\n–í–∫–∞–∂–∏ —Ä–æ–ª—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è (–∑–≥–∞–¥—É–≤–∞–Ω–Ω—è @—Ä–æ–ª—å –∞–±–æ ID):", ephemeral=True)
        
        def check(message):
            return message.author.id == interaction.user.id and message.channel.id == interaction.channel.id

        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–ª—å
            role_msg = await interaction.client.wait_for('message', check=check, timeout=60.0)
            role = await self._parse_role(interaction.guild, role_msg.content.strip())
            
            if not role:
                await interaction.followup.send("‚ùå –†–æ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", ephemeral=True)
                return

            # –í–∏–¥–∞–ª—è—î–º–æ –∑ –ë–î
            result = await db.auto_roles.delete_one({
                "guild_id": str(interaction.guild.id),
                "role_id": str(role.id)
            })
            
            if result.deleted_count > 0:
                await interaction.followup.send(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–æ–ª—ñ **{role.name}**!", ephemeral=True)
            else:
                await interaction.followup.send(f"‚ùå –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–æ–ª—ñ **{role.name}** –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", ephemeral=True)

        except asyncio.TimeoutError:
            await interaction.followup.send("‚è∞ –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", ephemeral=True)
        except Exception as e:
            await interaction.followup.send(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}", ephemeral=True)

    async def _parse_role(self, guild, role_input):
        """–ü–∞—Ä—Å–∏—Ç—å —Ä–æ–ª—å –∑ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        role = None
        
        if role_input.startswith('<@&') and role_input.endswith('>'):
            role_id = role_input[3:-1]
            try:
                role = guild.get_role(int(role_id))
            except:
                pass
        else:
            try:
                role = guild.get_role(int(role_input))
            except:
                pass
        
        return role

    async def _parse_channel(self, guild, channel_input):
        """–ü–∞—Ä—Å–∏—Ç—å –∫–∞–Ω–∞–ª –∑ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        channel = None
        
        if channel_input.startswith('<#') and channel_input.endswith('>'):
            channel_id = channel_input[2:-1]
            try:
                channel = guild.get_channel(int(channel_id))
            except:
                pass
        else:
            try:
                channel = guild.get_channel(int(channel_input))
            except:
                pass
        
        return channel

    @discord.ui.button(emoji="üìã", label="–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏", style=discord.ButtonStyle.primary, row=1)
    async def system_status(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏"""
        await interaction.response.defer(ephemeral=True)
        
        try:
            auto_roles = await db.auto_roles.find({"guild_id": str(interaction.guild.id), "enabled": True}).to_list(100)
            guild_settings = await db.guild_settings.find_one({"guild_id": str(interaction.guild.id)})
            
            embed = discord.Embed(
                title="‚öôÔ∏è –°—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö —Ä–æ–ª–µ–π",
                color=0x7c7cf0,
                description=""
            )
            
            if not auto_roles:
                embed.add_field(name="‚ùå –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ", value="–°–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞", inline=False)
            else:
                level_roles = []
                inactive_roles = []
                
                for config in auto_roles:
                    role = interaction.guild.get_role(int(config["role_id"]))
                    if not role:
                        continue
                    
                    if config["type"] == "level":
                        users_str = await db.users.find({"guild_id": str(interaction.guild.id)}).to_list(1000)
                        users_int = await db.users.find({"guild_id": interaction.guild.id}).to_list(1000)
                        users = users_str if len(users_str) > 0 else users_int
                        
                        eligible = len([u for u in users if u.get("level", 0) >= config["required_level"]])
                        has_role = len([m for m in interaction.guild.members if role in m.roles])
                        
                        level_roles.append(f"**{role.name}** - –†—ñ–≤–µ–Ω—å {config['required_level']}\n–ú–∞—î —Ä–æ–ª—å: {has_role} | –ü—ñ–¥—Ö–æ–¥–∏—Ç—å: {eligible}")
                    elif config["type"] == "inactive":
                        has_role = len([m for m in interaction.guild.members if role in m.roles])
                        inactive_roles.append(f"**{role.name}** - {config['check_days']} –¥–Ω—ñ–≤, {config['min_xp']} XP\n–ú–∞—î —Ä–æ–ª—å: {has_role}")
                
                if level_roles:
                    embed.add_field(name="üéØ –ê–≤—Ç–æ–≤–∏–¥–∞—á–∞ —Ä–æ–ª–µ–π", value="\n\n".join(level_roles), inline=False)
                
                if inactive_roles:
                    embed.add_field(name="üóëÔ∏è –ê–≤—Ç–æ–∑–Ω—è—Ç—Ç—è —Ä–æ–ª–µ–π", value="\n\n".join(inactive_roles), inline=False)
            
            # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–∞–Ω–∞–ª –∑–≤—ñ—Ç—ñ–≤
            report_channel = None
            if guild_settings and guild_settings.get("report_channel_id"):
                report_channel = interaction.guild.get_channel(int(guild_settings["report_channel_id"]))
            
            channel_status = report_channel.mention if report_channel else "‚ùå –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
            embed.add_field(name="üìä –ö–∞–Ω–∞–ª –∑–≤—ñ—Ç—ñ–≤", value=channel_status, inline=False)
            
            embed.set_footer(text=f"–ó–∞–ø—Ä–æ—Å–∏–≤: {interaction.user.display_name}")
            
            await interaction.followup.send(embed=embed, ephemeral=True)
            
        except Exception as e:
            await interaction.followup.send(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}", ephemeral=True)

    @discord.ui.button(emoji="üîÑ", label="–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞—Ä–∞–∑", style=discord.ButtonStyle.success, row=1)
    async def check_now(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ä–æ–ª–µ–π –∑–∞—Ä–∞–∑"""
        await interaction.response.defer(ephemeral=True)
        
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º–∏ –¥–ª—è –æ–±—Ä–æ–±–∫–∏
            system = AutomatedRoleSystem(interaction.client)
            report = await system._process_guild_roles(interaction.guild)
            
            embed = discord.Embed(
                title="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏",
                color=0x00ff00,
                description=""
            )
            
            if report["level_assigned"] > 0:
                level_text = f"**–í–∏–¥–∞–Ω–æ —Ä–æ–ª–µ–π: {report['level_assigned']}**\n"
                level_text += "\n".join([f"‚Ä¢ {detail}" for detail in report["level_details"]])
                embed.add_field(name="üéØ –ê–≤—Ç–æ–≤–∏–¥–∞—á–∞", value=level_text, inline=False)
            
            if report["inactive_removed"] > 0:
                inactive_text = f"**–ó–Ω—è—Ç–æ —Ä–æ–ª–µ–π: {report['inactive_removed']}**\n"
                inactive_text += "\n".join([f"‚Ä¢ {detail}" for detail in report["inactive_details"]])
                embed.add_field(name="üóëÔ∏è –ê–≤—Ç–æ–∑–Ω—è—Ç—Ç—è", value=inactive_text, inline=False)
                
            if report["level_assigned"] == 0 and report["inactive_removed"] == 0:
                embed.add_field(name="‚úÖ –í—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ", value="–ñ–æ–¥–Ω–∏—Ö –∑–º—ñ–Ω –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ", inline=False)
            
            embed.set_footer(text=f"–í–∏–∫–æ–Ω–∞–≤: {interaction.user.display_name}")
            
            await interaction.followup.send(embed=embed, ephemeral=True)
            
        except Exception as e:
            await interaction.followup.send(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}", ephemeral=True)

class AutomatedRoleSystem(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.daily_role_check.start()

    def cog_unload(self):
        self.daily_role_check.cancel()

    @app_commands.command(name="role-setup", description="[–ê–î–ú–Ü–ù] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö —Ä–æ–ª–µ–π")
    async def role_setup(self, interaction: discord.Interaction):
        """–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º–∏ —Ä–æ–ª—è–º–∏"""
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞
        if not interaction.user.guild_permissions.manage_roles:
            await interaction.response.send_message("‚ùå –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ–ª—è–º–∏!", ephemeral=True)
            return

        await interaction.response.defer(ephemeral=False)

        embed = discord.Embed(
            title="‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö —Ä–æ–ª–µ–π",
            color=0x7c7cf0,
            description=(
                "–ù–∞–ª–∞—à—Ç—É–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –≤–∏–¥–∞—á—É —Ç–∞ –∑–Ω—è—Ç—Ç—è —Ä–æ–ª–µ–π –Ω–∞ —Å–≤–æ—î–º—É —Å–µ—Ä–≤–µ—Ä—ñ!\n\n"
                "**–î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:**\n"
                "‚¨ÜÔ∏è **–†–æ–ª—å –∑–∞ —Ä—ñ–≤–Ω–µ–º** ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≤–∏–¥–∞—á–∞ —Ä–æ–ª—ñ –ø—Ä–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—ñ —Ä—ñ–≤–Ω—è\n"
                "‚¨áÔ∏è **–†–æ–ª—å –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å** ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–Ω—è—Ç—Ç—è —Ä–æ–ª—ñ –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å\n"
                "üìä **–ö–∞–Ω–∞–ª –∑–≤—ñ—Ç—ñ–≤** ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è —â–æ–¥–µ–Ω–Ω–∏—Ö –∑–≤—ñ—Ç—ñ–≤\n"
                "üóëÔ∏è **–í–∏–¥–∞–ª–∏—Ç–∏ —Ä–æ–ª—å** ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–æ–ª—ñ\n"
                "üìã **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏** ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n"
                "üîÑ **–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞—Ä–∞–∑** ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ä–æ–ª–µ–π –Ω–µ–≥–∞–π–Ω–æ\n\n"
                "üí° **–ü—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É —Ü–µ–π –∂–µ –∫–∞–Ω–∞–ª!**"
            )
        )
        embed.set_footer(text="–ö–Ω–æ–ø–∫–∏ –ø—Ä–∞—Ü—é—é—Ç—å –ø–æ—Å—Ç—ñ–π–Ω–æ ‚Ä¢ –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞: –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ–ª—è–º–∏")

        view = RoleManagementView()
        await interaction.followup.send(embed=embed, view=view, ephemeral=False)

    @tasks.loop(hours=24)
    async def daily_role_check(self):
        if db is None:
            return

        for guild in self.bot.guilds:
            try:
                report = await self._process_guild_roles(guild)
                await self._send_daily_report(guild, report)
            except Exception as e:
                print(f"Error processing roles for guild {guild.id}: {e}")

    async def _process_guild_roles(self, guild):
        auto_roles = await db.auto_roles.find({"guild_id": str(guild.id), "enabled": True}).to_list(100)
        
        report = {
            "level_assigned": 0,
            "inactive_removed": 0,
            "level_details": [],
            "inactive_details": []
        }

        for config in auto_roles:
            role = guild.get_role(int(config["role_id"]))
            if not role or role.position >= guild.me.top_role.position:
                continue

            try:
                if config["type"] == "level":
                    assigned = await self._process_level_role(guild, role, config["required_level"])
                    report["level_assigned"] += assigned
                    if assigned > 0:
                        report["level_details"].append(f"{role.name}: +{assigned}")

                elif config["type"] == "inactive":
                    removed = await self._process_inactive_role(guild, role, config["check_days"], config["min_xp"])
                    report["inactive_removed"] += removed
                    if removed > 0:
                        report["inactive_details"].append(f"{role.name}: -{removed}")
            except Exception as e:
                print(f"Error processing role {role.id}: {e}")

        return report

    async def _process_level_role(self, guild, role, required_level):
        users_str = await db.users.find({"guild_id": str(guild.id)}).to_list(1000)
        users_int = await db.users.find({"guild_id": guild.id}).to_list(1000)
        users = users_str if len(users_str) > 0 else users_int

        eligible_users = [user for user in users if user.get("level", 0) >= required_level]
        assigned_count = 0

        for user_data in eligible_users:
            user_id = user_data.get("user_id")
            if isinstance(user_id, str):
                user_id = int(user_id)

            member = guild.get_member(user_id)
            if member and role not in member.roles:
                try:
                    await member.add_roles(role, reason=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≤–∏–¥–∞—á–∞ –∑–∞ —Ä—ñ–≤–µ–Ω—å {required_level}")
                    assigned_count += 1
                except:
                    pass

        return assigned_count

    async def _process_inactive_role(self, guild, role, days, min_xp):
        cutoff_date = datetime.now() - timedelta(days=days)
        cutoff_date_str = cutoff_date.strftime("%Y-%m-%d")
        
        members_with_role = [member for member in guild.members if role in member.roles]
        removed_count = 0

        for member in members_with_role:
            user_data = await db.users.find_one({
                "$or": [
                    {"guild_id": str(guild.id), "user_id": member.id},
                    {"guild_id": guild.id, "user_id": member.id},
                    {"guild_id": str(guild.id), "user_id": str(member.id)},
                    {"guild_id": guild.id, "user_id": str(member.id)}
                ]
            })

            should_remove = False
            if not user_data:
                should_remove = True
            else:
                history = user_data.get("history", {})
                recent_xp = sum(
                    day_data.get("xp_gained", 0)
                    for date_str, day_data in history.items()
                    if date_str >= cutoff_date_str
                )
                if recent_xp < min_xp:
                    should_remove = True

            if should_remove:
                try:
                    await member.remove_roles(role, reason=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–Ω—è—Ç—Ç—è –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å ({days} –¥–Ω—ñ–≤, <{min_xp} XP)")
                    removed_count += 1
                except:
                    pass

        return removed_count

    async def _send_daily_report(self, guild, report):
        guild_settings = await db.guild_settings.find_one({"guild_id": str(guild.id)})
        if not guild_settings or not guild_settings.get("report_channel_id"):
            return

        channel = guild.get_channel(int(guild_settings["report_channel_id"]))
        if not channel:
            return

        if report["level_assigned"] == 0 and report["inactive_removed"] == 0:
            return

        embed = discord.Embed(
            title="üìä –©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç —Å–∏—Å—Ç–µ–º–∏ —Ä–æ–ª–µ–π",
            color=0x7c7cf0,
            timestamp=datetime.utcnow()
        )

        if report["level_assigned"] > 0:
            level_text = f"**–í–∏–¥–∞–Ω–æ —Ä–æ–ª–µ–π: {report['level_assigned']}**\n"
            level_text += "\n".join([f"‚Ä¢ {detail}" for detail in report["level_details"]])
            embed.add_field(name="üéØ –ê–≤—Ç–æ–≤–∏–¥–∞—á–∞", value=level_text, inline=False)

        if report["inactive_removed"] > 0:
            inactive_text = f"**–ó–Ω—è—Ç–æ —Ä–æ–ª–µ–π: {report['inactive_removed']}**\n"
            inactive_text += "\n".join([f"‚Ä¢ {detail}" for detail in report["inactive_details"]])
            embed.add_field(name="üóëÔ∏è –ê–≤—Ç–æ–∑–Ω—è—Ç—Ç—è", value=inactive_text, inline=False)

        embed.set_footer(text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–∏ —Ä–æ–ª–µ–π")

        try:
            await channel.send(embed=embed)
        except:
            pass

    @daily_role_check.before_loop
    async def before_daily_check(self):
        await self.bot.wait_until_ready()

async def setup(bot):
    await bot.add_cog(AutomatedRoleSystem(bot))