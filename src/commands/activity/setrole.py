import discord
from discord import app_commands
from discord.ext import commands, tasks
from datetime import datetime, timedelta
from modules.db import get_database

db = get_database()

class AutomatedRoleSystem(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.daily_role_check.start()  # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É

    def cog_unload(self):
        self.daily_role_check.cancel()

    @app_commands.command(name="autoroles", description="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ–ª—è–º–∏")
    @app_commands.default_permissions(manage_roles=True)
    @app_commands.describe(
        –¥—ñ—è="–©–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏",
        role="–†–æ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è",
        –∑–Ω–∞—á–µ–Ω–Ω—è="–†—ñ–≤–µ–Ω—å –∞–±–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤",
        –º—ñ–Ω_xp="–ú—ñ–Ω—ñ–º—É–º XP –∑–∞ –ø–µ—Ä—ñ–æ–¥ (–¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ)",
        –∫–∞–Ω–∞–ª="–ö–∞–Ω–∞–ª –¥–ª—è –∑–≤—ñ—Ç—ñ–≤ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)"
    )
    @app_commands.choices(–¥—ñ—è=[
        app_commands.Choice(name="–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–≤–∏–¥–∞—á—É –∑–∞ —Ä—ñ–≤–Ω–µ–º", value="setup_level"),
        app_commands.Choice(name="–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–∑–Ω—è—Ç—Ç—è –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", value="setup_inactive"),
        app_commands.Choice(name="–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –∑–≤—ñ—Ç—ñ–≤", value="set_channel"),
        app_commands.Choice(name="–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", value="show_config"),
        app_commands.Choice(name="–í–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–ª—ñ", value="remove_config"),
        app_commands.Choice(name="–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∑–∞—Ä–∞–∑", value="run_now")
    ])
    async def autoroles(self, interaction: discord.Interaction, –¥—ñ—è: app_commands.Choice[str], 
                       role: discord.Role = None, –∑–Ω–∞—á–µ–Ω–Ω—è: int = 0, –º—ñ–Ω_xp: int = 0, 
                       –∫–∞–Ω–∞–ª: discord.TextChannel = None):
        await interaction.response.defer(ephemeral=True)

        if db is None:
            await interaction.followup.send("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!")
            return

        guild = interaction.guild

        try:
            if –¥—ñ—è.value == "setup_level":
                if not role or –∑–Ω–∞—á–µ–Ω–Ω—è <= 0:
                    await interaction.followup.send("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Ä–æ–ª—å —ñ —Ä—ñ–≤–µ–Ω—å!")
                    return
                await self._setup_level_role(interaction, guild, role, –∑–Ω–∞—á–µ–Ω–Ω—è)

            elif –¥—ñ—è.value == "setup_inactive":
                if not role or –∑–Ω–∞—á–µ–Ω–Ω—è <= 0 or –º—ñ–Ω_xp <= 0:
                    await interaction.followup.send("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Ä–æ–ª—å, –¥–Ω—ñ —ñ –º—ñ–Ω—ñ–º—É–º XP!")
                    return
                await self._setup_inactive_role(interaction, guild, role, –∑–Ω–∞—á–µ–Ω–Ω—è, –º—ñ–Ω_xp)

            elif –¥—ñ—è.value == "set_channel":
                if not –∫–∞–Ω–∞–ª:
                    await interaction.followup.send("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –∫–∞–Ω–∞–ª!")
                    return
                await self._set_report_channel(interaction, guild, –∫–∞–Ω–∞–ª)

            elif –¥—ñ—è.value == "show_config":
                await self._show_config(interaction, guild)

            elif –¥—ñ—è.value == "remove_config":
                if not role:
                    await interaction.followup.send("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Ä–æ–ª—å!")
                    return
                await self._remove_config(interaction, guild, role)

            elif –¥—ñ—è.value == "run_now":
                await self._run_check_now(interaction, guild)

        except Exception as e:
            await interaction.followup.send(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")

    async def _setup_level_role(self, interaction, guild, role, level):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–≤–∏–¥–∞—á—ñ —Ä–æ–ª—ñ –∑–∞ —Ä—ñ–≤–Ω–µ–º"""
        await db.auto_roles.update_one(
            {"guild_id": str(guild.id), "role_id": str(role.id)},
            {
                "$set": {
                    "guild_id": str(guild.id),
                    "role_id": str(role.id),
                    "type": "level",
                    "required_level": level,
                    "enabled": True,
                    "created_by": interaction.user.id,
                    "created_at": datetime.utcnow()
                }
            },
            upsert=True
        )

        result = f"```\n‚úÖ –ê–í–¢–û–í–ò–î–ê–ß–ê –†–û–õ–Ü –ù–ê–õ–ê–®–¢–û–í–ê–ù–ê\n\n"
        result += f"–†–æ–ª—å: {role.name}\n"
        result += f"–£–º–æ–≤–∞: –†—ñ–≤–µ–Ω—å {level} —ñ –≤–∏—â–µ\n"
        result += f"–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞\n\n"
        result += f"–†–æ–ª—å –±—É–¥–µ –≤–∏–¥–∞–Ω–∞ –≤—Å—ñ–º –ø—ñ–¥—Ö–æ–¥—è—â–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º\n–ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ\n```"

        await interaction.followup.send(result)

    async def _setup_inactive_role(self, interaction, guild, role, days, min_xp):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–∑–Ω—è—Ç—Ç—è —Ä–æ–ª—ñ –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å"""
        await db.auto_roles.update_one(
            {"guild_id": str(guild.id), "role_id": str(role.id)},
            {
                "$set": {
                    "guild_id": str(guild.id),
                    "role_id": str(role.id),
                    "type": "inactive",
                    "check_days": days,
                    "min_xp": min_xp,
                    "enabled": True,
                    "created_by": interaction.user.id,
                    "created_at": datetime.utcnow()
                }
            },
            upsert=True
        )

        result = f"```\nüóëÔ∏è –ê–í–¢–û–ó–ù–Ø–¢–¢–Ø –†–û–õ–Ü –ù–ê–õ–ê–®–¢–û–í–ê–ù–û\n\n"
        result += f"–†–æ–ª—å: {role.name}\n"
        result += f"–ü–µ—Ä—ñ–æ–¥: {days} –¥–Ω—ñ–≤\n"
        result += f"–ú—ñ–Ω. XP: {min_xp}\n"
        result += f"–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞\n\n"
        result += f"–†–æ–ª—å –±—É–¥–µ –∑–Ω—è—Ç–∞ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –Ω–µ –Ω–∞–±—Ä–∞–ª–∏\n{min_xp} XP –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ {days} –¥–Ω—ñ–≤\n```"

        await interaction.followup.send(result)

    async def _set_report_channel(self, interaction, guild, channel):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É –¥–ª—è –∑–≤—ñ—Ç—ñ–≤"""
        await db.guild_settings.update_one(
            {"guild_id": str(guild.id)},
            {
                "$set": {
                    "guild_id": str(guild.id),
                    "report_channel_id": str(channel.id),
                    "updated_by": interaction.user.id,
                    "updated_at": datetime.utcnow()
                }
            },
            upsert=True
        )

        result = f"```\nüìä –ö–ê–ù–ê–õ –î–õ–Ø –ó–í–Ü–¢–Ü–í –í–°–¢–ê–ù–û–í–õ–ï–ù–û\n\n"
        result += f"–ö–∞–Ω–∞–ª: #{channel.name}\n\n"
        result += f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –∑–≤—ñ—Ç–∏ –±—É–¥—É—Ç—å –Ω–∞–¥—Å–∏–ª–∞—Ç–∏—Å—è:\n"
        result += f"‚Ä¢ –©–æ–¥–µ–Ω–Ω—ñ –∑–≤—ñ—Ç–∏ –ø—Ä–æ –≤–∏–¥–∞—á—É —Ä–æ–ª–µ–π\n"
        result += f"‚Ä¢ –ó–≤—ñ—Ç–∏ –ø—Ä–æ –∑–Ω—è—Ç—Ç—è —Ä–æ–ª–µ–π\n"
        result += f"‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–º—ñ–Ω\n```"

        await interaction.followup.send(result)

    async def _show_config(self, interaction, guild):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
        auto_roles = await db.auto_roles.find({"guild_id": str(guild.id), "enabled": True}).to_list(100)
        guild_settings = await db.guild_settings.find_one({"guild_id": str(guild.id)})

        result = "```\n‚öôÔ∏è –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ò–• –†–û–õ–ï–ô\n\n"

        if not auto_roles:
            result += "‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å\n"
        else:
            level_roles = []
            inactive_roles = []

            for config in auto_roles:
                role = guild.get_role(int(config["role_id"]))
                if not role:
                    continue

                if config["type"] == "level":
                    level_roles.append(f"  ‚Ä¢ {role.name:<20} | –†—ñ–≤–µ–Ω—å: {config['required_level']}")
                elif config["type"] == "inactive":
                    inactive_roles.append(f"  ‚Ä¢ {role.name:<20} | {config['check_days']} –¥–Ω—ñ–≤, {config['min_xp']} XP")

            if level_roles:
                result += "üéØ –ê–í–¢–û–í–ò–î–ê–ß–ê –ó–ê –†–Ü–í–ù–ï–ú:\n"
                result += "\n".join(level_roles) + "\n\n"

            if inactive_roles:
                result += "üóëÔ∏è –ê–í–¢–û–ó–ù–Ø–¢–¢–Ø –ó–ê –ù–ï–ê–ö–¢–ò–í–ù–Ü–°–¢–¨:\n"
                result += "\n".join(inactive_roles) + "\n\n"

        # –ö–∞–Ω–∞–ª –¥–ª—è –∑–≤—ñ—Ç—ñ–≤
        report_channel = None
        if guild_settings and guild_settings.get("report_channel_id"):
            report_channel = guild.get_channel(int(guild_settings["report_channel_id"]))

        result += f"üìä –ö–ê–ù–ê–õ –î–õ–Ø –ó–í–Ü–¢–Ü–í:\n"
        result += f"  {report_channel.name if report_channel else '‚ùå –ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ'}\n```"

        await interaction.followup.send(result)

    async def _remove_config(self, interaction, guild, role):
        """–í–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–ª—ñ"""
        result_db = await db.auto_roles.delete_one({
            "guild_id": str(guild.id),
            "role_id": str(role.id)
        })

        if result_db.deleted_count > 0:
            result = f"```\n‚úÖ –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –í–ò–î–ê–õ–ï–ù–û\n\n"
            result += f"–†–æ–ª—å: {role.name}\n"
            result += f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ\n```"
        else:
            result = f"```\n‚ùå –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ù–ï –ó–ù–ê–ô–î–ï–ù–û\n\n"
            result += f"–†–æ–ª—å: {role.name}\n"
            result += f"–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –¥–ª—è —Ü—ñ—î—ó —Ä–æ–ª—ñ\n```"

        await interaction.followup.send(result)

    async def _run_check_now(self, interaction, guild):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∑–∞—Ä–∞–∑"""
        await interaction.followup.send("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ä–æ–ª–µ–π...")
        
        report = await self._process_guild_roles(guild)
        
        result = f"```\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–ï–†–ï–í–Ü–†–ö–ò –†–û–õ–ï–ô\n\n"
        
        if report["level_assigned"] > 0:
            result += f"üéØ –í–∏–¥–∞–Ω–æ —Ä–æ–ª–µ–π –∑–∞ —Ä—ñ–≤–Ω–µ–º: {report['level_assigned']}\n"
            if report["level_details"]:
                for detail in report["level_details"]:
                    result += f"   {detail}\n"
                result += "\n"
        
        if report["inactive_removed"] > 0:
            result += f"üóëÔ∏è –ó–Ω—è—Ç–æ —Ä–æ–ª–µ–π –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {report['inactive_removed']}\n"
            if report["inactive_details"]:
                for detail in report["inactive_details"]:
                    result += f"   {detail}\n"
                result += "\n"
            
        if report["level_assigned"] == 0 and report["inactive_removed"] == 0:
            result += "‚úÖ –í—Å—ñ —Ä–æ–ª—ñ –∞–∫—Ç—É–∞–ª—å–Ω—ñ, –∑–º—ñ–Ω –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ\n\n"

        result += f"–í–∏–∫–æ–Ω–∞–≤: {interaction.user.display_name}\n```"
        
        await interaction.edit_original_response(content=result)

    @tasks.loop(hours=24)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ–¥–Ω—è
    async def daily_role_check(self):
        """–©–æ–¥–µ–Ω–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–ª–µ–π"""
        db = get_database()
        if db is None:
            return

        for guild in self.bot.guilds:
            try:
                report = await self._process_guild_roles(guild, db)
                await self._send_daily_report(guild, db, report)
            except Exception as e:
                print(f"Error processing roles for guild {guild.id}: {e}")

    async def _process_guild_roles(self, guild):
        """–û–±—Ä–æ–±–∫–∞ —Ä–æ–ª–µ–π –¥–ª—è –≥—ñ–ª—å–¥—ñ—ó"""
        auto_roles = await db.auto_roles.find({"guild_id": str(guild.id), "enabled": True}).to_list(100)
        
        report = {
            "level_assigned": 0,
            "inactive_removed": 0,
            "level_details": [],
            "inactive_details": []
        }

        for config in auto_roles:
            role = guild.get_role(int(config["role_id"]))
            if not role or role.position >= guild.me.top_role.position:
                continue

            try:
                if config["type"] == "level":
                    assigned = await self._process_level_role(guild, role, config["required_level"])
                    report["level_assigned"] += assigned
                    if assigned > 0:
                        report["level_details"].append(f"‚Ä¢ {role.name}: +{assigned}")

                elif config["type"] == "inactive":
                    removed = await self._process_inactive_role(guild, role, config["check_days"], config["min_xp"])
                    report["inactive_removed"] += removed
                    if removed > 0:
                        report["inactive_details"].append(f"‚Ä¢ {role.name}: -{removed}")
            except Exception as e:
                print(f"Error processing role {role.id}: {e}")

        return report

    async def _process_level_role(self, guild, role, required_level):
        """–û–±—Ä–æ–±–∫–∞ —Ä–æ–ª–µ–π –∑–∞ —Ä—ñ–≤–Ω–µ–º"""
        users_str = await db.users.find({"guild_id": str(guild.id)}).to_list(1000)
        users_int = await db.users.find({"guild_id": guild.id}).to_list(1000)
        users = users_str if len(users_str) > 0 else users_int

        eligible_users = [user for user in users if user.get("level", 0) >= required_level]
        assigned_count = 0

        for user_data in eligible_users:
            user_id = user_data.get("user_id")
            if isinstance(user_id, str):
                user_id = int(user_id)

            member = guild.get_member(user_id)
            if member and role not in member.roles:
                try:
                    await member.add_roles(role, reason=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≤–∏–¥–∞—á–∞ –∑–∞ —Ä—ñ–≤–µ–Ω—å {required_level}")
                    assigned_count += 1
                except:
                    pass

        return assigned_count

    async def _process_inactive_role(self, guild, db, role, days, min_xp):
        """–û–±—Ä–æ–±–∫–∞ –∑–Ω—è—Ç—Ç—è —Ä–æ–ª–µ–π –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å"""
        cutoff_date = datetime.now() - timedelta(days=days)
        cutoff_date_str = cutoff_date.strftime("%Y-%m-%d")
        
        members_with_role = [member for member in guild.members if role in member.roles]
        removed_count = 0

        for member in members_with_role:
            user_data = await db.users.find_one({
                "$or": [
                    {"guild_id": str(guild.id), "user_id": member.id},
                    {"guild_id": guild.id, "user_id": member.id},
                    {"guild_id": str(guild.id), "user_id": str(member.id)},
                    {"guild_id": guild.id, "user_id": str(member.id)}
                ]
            })

            should_remove = False
            if not user_data:
                should_remove = True
            else:
                history = user_data.get("history", {})
                recent_xp = sum(
                    day_data.get("xp_gained", 0)
                    for date_str, day_data in history.items()
                    if date_str >= cutoff_date_str
                )
                if recent_xp < min_xp:
                    should_remove = True

            if should_remove:
                try:
                    await member.remove_roles(role, reason=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–Ω—è—Ç—Ç—è –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å ({days} –¥–Ω—ñ–≤, <{min_xp} XP)")
                    removed_count += 1
                except:
                    pass

        return removed_count

    async def _send_daily_report(self, guild, db, report):
        """–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç"""
        guild_settings = await db.guild_settings.find_one({"guild_id": str(guild.id)})
        if not guild_settings or not guild_settings.get("report_channel_id"):
            return

        channel = guild.get_channel(int(guild_settings["report_channel_id"]))
        if not channel:
            return

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–≤—ñ—Ç —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –±—É–ª–∏ –∑–º—ñ–Ω–∏
        if report["level_assigned"] == 0 and report["inactive_removed"] == 0:
            return

        result = f"```\nüìä –©–û–î–ï–ù–ù–ò–ô –ó–í–Ü–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ò–• –†–û–õ–ï–ô\n\n"

        if report["level_assigned"] > 0:
            result += f"üéØ –í–ò–î–ê–ù–û –†–û–õ–ï–ô –ó–ê –†–Ü–í–ù–ï–ú: {report['level_assigned']}\n"
            for detail in report["level_details"]:
                result += f"   {detail}\n"
            result += "\n"

        if report["inactive_removed"] > 0:
            result += f"üóëÔ∏è –ó–ù–Ø–¢–û –†–û–õ–ï–ô –ó–ê –ù–ï–ê–ö–¢–ò–í–ù–Ü–°–¢–¨: {report['inactive_removed']}\n"
            for detail in report["inactive_details"]:
                result += f"   {detail}\n"
            result += "\n"

        result += f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞\n"
        result += f"–ß–∞—Å: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n```"

        try:
            await channel.send(result)
        except:
            pass

    @daily_role_check.before_loop
    async def before_daily_check(self):
        await self.bot.wait_until_ready()

async def setup(bot):
    await bot.add_cog(AutomatedRoleSystem(bot))