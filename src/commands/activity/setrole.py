import discord
from discord import app_commands
from discord.ext import commands
from modules.db import get_database

class RoleForLevelCommand(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(name="setroleforlevel", description="–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Ä–æ–ª—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ–∑ –ø–µ–≤–Ω–∏–º —Ä—ñ–≤–Ω–µ–º")
    @app_commands.default_permissions(manage_roles=True)
    @app_commands.describe(
        role="–†–æ–ª—å, —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–∏—Å–≤–æ—ó—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º",
        level="–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–ª—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 5)"
    )
    async def setroleforlevel(self, interaction: discord.Interaction, role: discord.Role, level: int):
        await interaction.response.defer(ephemeral=False)

        # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        db = get_database()
        if db is None:
            await interaction.followup.send("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!")
            return

        guild = interaction.guild
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –±–æ—Ç –º–∞—î –ø—Ä–∞–≤–∞ –∫–µ—Ä—É–≤–∞—Ç–∏ —Ä–æ–ª—è–º–∏
        if not guild.me.guild_permissions.manage_roles:
            await interaction.followup.send("–£ –º–µ–Ω–µ –Ω–µ–º–∞—î –¥–æ–∑–≤–æ–ª—É –Ω–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ä–æ–ª—è–º–∏!")
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ä–æ–ª—å –±–æ—Ç–∞ –≤–∏—â–∞ –∑–∞ –≤–∫–∞–∑–∞–Ω—É —Ä–æ–ª—å —É —ñ—î—Ä–∞—Ä—Ö—ñ—ó
        if role.position >= guild.me.top_role.position:
            await interaction.followup.send("–Ø –Ω–µ –º–æ–∂—É –ø—Ä–∏—Å–≤–æ—é–≤–∞—Ç–∏ —Ü—é —Ä–æ–ª—å, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∞ –≤–∏—â–∞ –∑–∞ –º–æ—é –≤ —ñ—î—Ä–∞—Ä—Ö—ñ—ó!")
            return

        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ–∑ –∫–æ–ª–µ–∫—Ü—ñ—ó users
            users = await db.users.find({"guild_id": str(guild.id)}).to_list(1000)
            eligible_users = [user for user in users if user.get("level", 0) >= level]
            
            # –î–µ–±–∞–≥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
            total_users = len(users)
            eligible_count = len(eligible_users)
            
            print(f"DEBUG: Total users in DB: {total_users}")
            print(f"DEBUG: Guild ID: {guild.id}")
            print(f"DEBUG: Required level: {level}")
            print(f"DEBUG: Eligible users: {eligible_count}")
            
            if eligible_users:
                print("DEBUG: First eligible user:", eligible_users[0])

            # –ü—Ä–∏—Å–≤–æ—é—î–º–æ —Ä–æ–ª—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
            assigned_count = 0
            not_found_count = 0
            already_has_role_count = 0
            
            for user_data in eligible_users:
                # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ user_id –≤ int, —è–∫—â–æ –≤—ñ–Ω –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —è–∫ —á–∏—Å–ª–æ
                user_id = user_data.get("user_id")
                if isinstance(user_id, str):
                    user_id = int(user_id)
                
                member = guild.get_member(user_id)
                if member:
                    if role not in member.roles:
                        await member.add_roles(role)
                        assigned_count += 1
                        print(f"DEBUG: Assigned role to {member.display_name}")
                    else:
                        already_has_role_count += 1
                        print(f"DEBUG: {member.display_name} already has role")
                else:
                    not_found_count += 1
                    print(f"DEBUG: Member with ID {user_id} not found")

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–ª—ñ —Ç–∞ —Ä—ñ–≤–Ω—è –≤ –∫–æ–ª–µ–∫—Ü—ñ—ó role_assignments
            await db.role_assignments.update_one(
                {"guild_id": str(guild.id)},
                {"$set": {"role_id": str(role.id), "required_level": level}},
                upsert=True
            )

            # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_lines = ["üìä –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –†–û–õ–Ü –î–õ–Ø –†–Ü–í–ù–Ø"]
            result_lines.append(f"–†–æ–ª—å {role.mention} –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ–∑ —Ä—ñ–≤–Ω–µ–º **{level}** —ñ –≤–∏—â–µ.")
            result_lines.append(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫–∏–º –ø—Ä–∏—Å–≤–æ—î–Ω–æ —Ä–æ–ª—å: **{assigned_count}**.")
            result_lines.append(f"–í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –±–∞–∑—ñ: **{total_users}**")
            result_lines.append(f"–ü—ñ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞ —Ä—ñ–≤–Ω–µ–º: **{eligible_count}**")
            result_lines.append(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ: **{not_found_count}**")
            result_lines.append(f"–í–∂–µ –º–∞—é—Ç—å —Ä–æ–ª—å: **{already_has_role_count}**")
            result_lines.append(f"–ù–∞–ª–∞—à—Ç—É–≤–∞–≤: {interaction.user.display_name}")

            result = "\n".join(result_lines)
            await interaction.followup.send(result)

        except Exception as e:
            await interaction.followup.send(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")

async def setup(bot):
    await bot.add_cog(RoleForLevelCommand(bot))