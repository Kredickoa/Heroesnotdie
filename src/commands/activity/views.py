# views.py - –í—Å—ñ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ (View –∫–ª–∞—Å–∏ –∑ –∫–Ω–æ–ø–∫–∞–º–∏)

import discord
from .constants import SHOP_ITEMS

class DuelRequestView(discord.ui.View):
    def __init__(self, challenger, target, timeout=60):
        super().__init__(timeout=timeout)
        self.challenger = challenger
        self.target = target

    @discord.ui.button(label="‚öîÔ∏è –ü—Ä–∏–π–Ω—è—Ç–∏ –¥—É–µ–ª—å", style=discord.ButtonStyle.success)
    async def accept(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.target:
            await interaction.response.send_message("‚ùå –¶–µ –Ω–µ —Ç–≤—ñ–π –¥—É–µ–ª—å!", ephemeral=True)
            return
        
        await interaction.response.edit_message(
            content="‚öîÔ∏è **–î—É–µ–ª—å —Ä–æ–∑–ø–æ—á–∞—Ç–æ!** –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞...",
            view=None
        )
        
        # –ó–∞–ø—É—Å–∫ –¥—É–µ–ª—ñ
        duel_cog = interaction.client.get_cog("PidorDuelCommand")
        if duel_cog:
            await duel_cog.execute_duel(interaction, self.challenger, self.target)

    @discord.ui.button(label="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", style=discord.ButtonStyle.danger)
    async def decline(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.target:
            await interaction.response.send_message("‚ùå –¶–µ –Ω–µ —Ç–≤—ñ–π –¥—É–µ–ª—å!", ephemeral=True)
            return

        await interaction.response.edit_message(
            content=f"‚ùå {self.target.mention} –≤—ñ–¥—Ö–∏–ª–∏–≤ –¥—É–µ–ª—å –≤—ñ–¥ {self.challenger.mention}. –°–ª–∞–±–∞–∫!",
            view=None
        )

class DuelBattleView(discord.ui.View):
    def __init__(self, shooter, opponent, battle_info, duel_cog, interaction_obj):
        super().__init__(timeout=30)
        self.shooter = shooter
        self.opponent = opponent
        self.battle_info = battle_info
        self.duel_cog = duel_cog
        self.interaction_obj = interaction_obj
        self.shot_taken = False

    @discord.ui.button(label="üî´ –ü–û–°–¢–†–Ü–õ!", style=discord.ButtonStyle.danger, emoji="üéØ")
    async def shoot(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.shooter or self.shot_taken:
            await interaction.response.send_message("‚ùå –ù–µ —Ç–≤–æ—è —á–µ—Ä–≥–∞ —Å—Ç—Ä—ñ–ª—è—Ç–∏!", ephemeral=True)
            return
        
        self.shot_taken = True
        await interaction.response.edit_message(view=None)
        
        # –û–±—Ä–æ–±–∏—Ç–∏ –ø–æ—Å—Ç—Ä—ñ–ª
        await self.duel_cog.process_shot(
            interaction, 
            self.shooter, 
            self.opponent, 
            self.battle_info,
            first_shot=True
        )

    async def on_timeout(self):
        # –Ø–∫—â–æ –≥—Ä–∞–≤–µ—Ü—å –Ω–µ —Å—Ç—Ä—ñ–ª—å–Ω—É–≤ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø—Ä–æ–º–∞—Ö
        if not self.shot_taken:
            await self.duel_cog.process_shot(
                self.interaction_obj,
                self.shooter,
                self.opponent, 
                self.battle_info,
                first_shot=True,
                auto_miss=True
            )

class ProfileView(discord.ui.View):
    def __init__(self, user, target_user=None):
        super().__init__(timeout=300)
        self.user = user
        self.target_user = target_user or user
        self.current_page = "profile"

    async def get_profile_embed(self, interaction):
        profile_cog = interaction.client.get_cog("ProfileCommand")
        stats = await profile_cog.get_user_stats(self.target_user.id, interaction.guild.id)
        rank_info = profile_cog.get_rank_info(stats['wins'])
        
        embed = discord.Embed(
            title=f"{rank_info['emoji']} –ü—Ä–æ—Ñ—ñ–ª—å –≥—Ä–∞–≤—Ü—è",
            color=0x2F3136
        )
        
        # –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        embed.add_field(
            name="üë§ –ì—Ä–∞–≤–µ—Ü—å", 
            value=f"**{self.target_user.display_name}**", 
            inline=True
        )
        
        embed.add_field(
            name="üèÜ –†–∞–Ω–≥",
            value=f"**{rank_info['name']}**",
            inline=True
        )
        
        embed.add_field(
            name="üí∞ –ë–∞–ª–∞–Ω—Å",
            value=f"**{stats['pk_balance']}** –ü–ö",
            inline=True
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        win_rate = (stats['wins'] / max(stats['wins'] + stats['losses'], 1)) * 100
        
        embed.add_field(
            name="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            value=f"```\n‚öîÔ∏è –ü–µ—Ä–µ–º–æ–≥–∏: {stats['wins']}\nüíÄ –ü–æ—Ä–∞–∑–∫–∏: {stats['losses']}\nüìà –í—ñ–Ω-—Ä–µ–π—Ç: {win_rate:.1f}%```",
            inline=False
        )
        
        # –û–ø–∏—Å —Ä–∞–Ω–≥—É
        embed.add_field(
            name="üìù –ü—Ä–æ –≥—Ä–∞–≤—Ü—è",
            value=f"*{rank_info['description']}*",
            inline=False
        )
        
        max_slots = 1 + (stats['wins'] // 10)
        embed.set_footer(
            text=f"–°–ª–æ—Ç—ñ–≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é: {len(stats['items'])}/{max_slots} ‚Ä¢ –ú–∞–∫—Å. –ü–ö: 1000"
        )
        embed.set_thumbnail(url=self.target_user.display_avatar.url)
        
        return embed

    async def get_inventory_embed(self, interaction):
        profile_cog = interaction.client.get_cog("ProfileCommand")
        stats = await profile_cog.get_user_stats(self.target_user.id, interaction.guild.id)
        
        embed = discord.Embed(
            title=f"üéí –Ü–Ω–≤–µ–Ω—Ç–∞—Ä {self.target_user.display_name}",
            color=0x7289DA
        )
        
        if not stats['items']:
            embed.description = "```\nüì¶ –Ü–Ω–≤–µ–Ω—Ç–∞—Ä –ø–æ—Ä–æ–∂–Ω—ñ–π\n\nüí° –ö—É–ø—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ!```"
        else:
            items_text = "```\n"
            for i, item_id in enumerate(stats['items'], 1):
                if item_id in SHOP_ITEMS:
                    item = SHOP_ITEMS[item_id]
                    items_text += f"{i}. {item['name']}\n"
                    items_text += f"   ‚úÖ {item['buff']}\n"
                    items_text += f"   ‚ùå {item['debuff']}\n\n"
            items_text += "```"
            embed.description = items_text
        
        max_slots = 1 + (stats['wins'] // 10)
        embed.set_footer(text=f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ —Å–ª–æ—Ç—ñ–≤: {len(stats['items'])}/{max_slots}")
        embed.set_thumbnail(url=self.target_user.display_avatar.url)
        
        return embed

    async def get_shop_embed(self, interaction):
        profile_cog = interaction.client.get_cog("ProfileCommand")
        stats = await profile_cog.get_user_stats(self.user.id, interaction.guild.id)
        
        embed = discord.Embed(
            title="üõçÔ∏è –ú–ê–ì–ê–ó–ò–ù –ü–†–ï–î–ú–ï–¢–Ü–í",
            description=f"üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å: {stats['pk_balance']} –ü–ö**",
            color=0xF1C40F
        )
        
        shop_text = "```\n"
        for item_id, item in SHOP_ITEMS.items():
            status = "‚úÖ" if stats['pk_balance'] >= item['price'] else "‚ùå"
            shop_text += f"{status} {item['name']} - {item['price']} –ü–ö\n"
            shop_text += f"   üíö {item['buff']}\n"
            shop_text += f"   üíî {item['debuff']}\n\n"
        shop_text += "```"
        
        embed.description += f"\n{shop_text}"
        
        max_slots = 1 + (stats['wins'] // 10)
        embed.set_footer(text=f"–°–ª–æ—Ç—ñ–≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é: {len(stats['items'])}/{max_slots}")
        
        return embed

    async def update_view(self, interaction):
        self.clear_items()
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
        profile_btn = discord.ui.Button(
            label="üë§ –ü—Ä–æ—Ñ—ñ–ª—å",
            style=discord.ButtonStyle.primary if self.current_page == "profile" else discord.ButtonStyle.secondary,
            disabled=self.current_page == "profile"
        )
        profile_btn.callback = self.show_profile
        self.add_item(profile_btn)

        inventory_btn = discord.ui.Button(
            label="üéí –Ü–Ω–≤–µ–Ω—Ç–∞—Ä", 
            style=discord.ButtonStyle.primary if self.current_page == "inventory" else discord.ButtonStyle.secondary,
            disabled=self.current_page == "inventory"
        )
        inventory_btn.callback = self.show_inventory
        self.add_item(inventory_btn)

        # –ú–∞–≥–∞–∑–∏–Ω —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–ª–∞—Å–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é
        if self.target_user == self.user:
            shop_btn = discord.ui.Button(
                label="üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω",
                style=discord.ButtonStyle.primary if self.current_page == "shop" else discord.ButtonStyle.secondary,
                disabled=self.current_page == "shop"
            )
            shop_btn.callback = self.show_shop
            self.add_item(shop_btn)

        # –ö–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω—É
        if self.current_page == "shop" and self.target_user == self.user:
            for i, (item_id, item) in enumerate(SHOP_ITEMS.items()):
                row = 1 + (i // 5)  # 5 –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Ä—è–¥
                btn = discord.ui.Button(
                    label=f"{item['name']} ({item['price']} –ü–ö)",
                    custom_id=f"buy_{item_id}",
                    style=discord.ButtonStyle.success,
                    row=row
                )
                btn.callback = self.create_buy_callback(item_id)
                self.add_item(btn)

    def create_buy_callback(self, item_id):
        async def buy_callback(interaction):
            if interaction.user != self.user:
                await interaction.response.send_message("‚ùå –¶–µ –Ω–µ –≤–∞—à –º–∞–≥–∞–∑–∏–Ω!", ephemeral=True)
                return

            profile_cog = interaction.client.get_cog("ProfileCommand")
            if profile_cog:
                success = await profile_cog.buy_item_inline(interaction, item_id)
                if success:
                    embed = await self.get_shop_embed(interaction)
                    await self.update_view(interaction)
                    await interaction.edit_original_response(embed=embed, view=self)
        
        return buy_callback

    async def show_profile(self, interaction):
        self.current_page = "profile"
        embed = await self.get_profile_embed(interaction)
        await self.update_view(interaction)
        await interaction.response.edit_message(embed=embed, view=self)

    async def show_inventory(self, interaction):
        self.current_page = "inventory"
        embed = await self.get_inventory_embed(interaction)
        await self.update_view(interaction)
        await interaction.response.edit_message(embed=embed, view=self)

    async def show_shop(self, interaction):
        if self.target_user != self.user:
            await interaction.response.send_message("‚ùå –ú–∞–≥–∞–∑–∏–Ω –¥–æ—Å—Ç—É–ø–Ω–∏–π —Ç—ñ–ª—å–∫–∏ —É –≤–ª–∞—Å–Ω–æ–º—É –ø—Ä–æ—Ñ—ñ–ª—ñ!", ephemeral=True)
            return
            
        self.current_page = "shop"
        embed = await self.get_shop_embed(interaction)
        await self.update_view(interaction)
        await interaction.response.edit_message(embed=embed, view=self)