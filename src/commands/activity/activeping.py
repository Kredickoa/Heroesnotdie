import discord
from discord.ext import commands, tasks
from modules.db import get_database
from datetime import datetime, timedelta

db = get_database()

class ActivePingChecker(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.check_active_roles.start()

    def cog_unload(self):
        self.check_active_roles.cancel()

    @discord.app_commands.command(name="activeping-setup", description="–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å–∏—Å—Ç–µ–º—É –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–ª–µ–π")
    @discord.app_commands.describe(
        role="–†–æ–ª—å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤",
        min_level="–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: 5)",
        min_xp_5d="–ú—ñ–Ω—ñ–º—É–º XP –∑–∞ 5 –¥–Ω—ñ–≤ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: 500)"
    )
    @discord.app_commands.default_permissions(manage_roles=True)
    async def setup_activeping(self, interaction: discord.Interaction, role: discord.Role, min_level: int = 5, min_xp_5d: int = 500):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å–∏—Å—Ç–µ–º—É –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–ª–µ–π"""
        
        
        if role.position >= interaction.guild.me.top_role.position:
            embed = discord.Embed(
                title="‚ùå –ü–æ–º–∏–ª–∫–∞",
                description="–†–æ–ª—å –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤–∏—â–µ –∑–∞ –º–æ—é –Ω–∞–π–≤–∏—â—É —Ä–æ–ª—å! –ü–µ—Ä–µ–º—ñ—Å—Ç—ñ—Ç—å –º–æ—é —Ä–æ–ª—å –≤–∏—â–µ –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É —Ä–æ–ª—å.",
                color=0xff0000
            )
            return await interaction.response.send_message(embed=embed, ephemeral=True)

        
        await db.settings.update_one(
            {"guild_id": str(interaction.guild.id)},
            {
                "$set": {
                    "active_role_id": role.id,
                    "min_level": min_level,
                    "min_xp_5d": min_xp_5d
                }
            },
            upsert=True
        )

        embed = discord.Embed(
            title="‚úÖ Active Ping –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ!",
            description="–°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–ª–µ–π —É—Å–ø—ñ—à–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞",
            color=0x00ff00
        )
        embed.add_field(name="–†–æ–ª—å:", value=role.mention, inline=True)
        embed.add_field(name="–ú—ñ–Ω. —Ä—ñ–≤–µ–Ω—å:", value=str(min_level), inline=True)
        embed.add_field(name="–ú—ñ–Ω. XP –∑–∞ 5 –¥–Ω—ñ–≤:", value=str(min_xp_5d), inline=True)
        embed.add_field(
            name="‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:",
            value="–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫–æ–∂–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏.",
            inline=False
        )
        await interaction.response.send_message(embed=embed)

    @discord.app_commands.command(name="activeping-disable", description="–í–∏–º–∫–Ω—É—Ç–∏ —Å–∏—Å—Ç–µ–º—É –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–ª–µ–π")
    @discord.app_commands.default_permissions(manage_roles=True)
    async def disable_activeping(self, interaction: discord.Interaction):
        """–í–∏–º–∫–Ω—É—Ç–∏ —Å–∏—Å—Ç–µ–º—É –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–ª–µ–π"""
        
        result = await db.settings.update_one(
            {"guild_id": str(interaction.guild.id)},
            {"$unset": {"active_role_id": "", "min_level": "", "min_xp_5d": ""}}
        )
        
        if result.modified_count > 0:
            embed = discord.Embed(
                title="‚úÖ –°–∏—Å—Ç–µ–º—É –≤–∏–º–∫–Ω–µ–Ω–æ",
                description="Active Ping —Å–∏—Å—Ç–µ–º—É –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–º–∫–Ω–µ–Ω–æ",
                color=0x00ff00
            )
        else:
            embed = discord.Embed(
                title="‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è",
                description="Active Ping —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –±—É–ª–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ –Ω–∞ —Ü—å–æ–º—É —Å–µ—Ä–≤–µ—Ä—ñ",
                color=0xffaa00
            )
        
        await interaction.response.send_message(embed=embed)

    @discord.app_commands.command(name="activeping-status", description="–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏")
    @discord.app_commands.default_permissions(manage_roles=True)
    async def status_activeping(self, interaction: discord.Interaction):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
        
        setting = await db.settings.find_one({"guild_id": str(interaction.guild.id)})
        
        if not setting or "active_role_id" not in setting:
            embed = discord.Embed(
                title="‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å Active Ping",
                description="–°–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ –Ω–∞ —Ü—å–æ–º—É —Å–µ—Ä–≤–µ—Ä—ñ",
                color=0xffaa00
            )
            return await interaction.response.send_message(embed=embed, ephemeral=True)

        role = interaction.guild.get_role(setting["active_role_id"])
        if not role:
            embed = discord.Embed(
                title="‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞",
                description="–ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ —Ä–æ–ª—å –±—É–ª–∞ –≤–∏–¥–∞–ª–µ–Ω–∞",
                color=0xff0000
            )
            return await interaction.response.send_message(embed=embed, ephemeral=True)

        embed = discord.Embed(
            title="üìä –°—Ç–∞—Ç—É—Å Active Ping",
            description="–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏:",
            color=0x0099ff
        )
        embed.add_field(name="–†–æ–ª—å:", value=role.mention, inline=True)
        embed.add_field(name="–ú—ñ–Ω. —Ä—ñ–≤–µ–Ω—å:", value=str(setting.get("min_level", 5)), inline=True)
        embed.add_field(name="–ú—ñ–Ω. XP –∑–∞ 5 –¥–Ω—ñ–≤:", value=str(setting.get("min_xp_5d", 500)), inline=True)
        embed.add_field(name="–£—á–∞—Å–Ω–∏–∫—ñ–≤ –∑ —Ä–æ–ª–ª—é:", value=str(len(role.members)), inline=True)
        
        await interaction.response.send_message(embed=embed)

    @discord.app_commands.command(name="activeping-check", description="–†—É—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
    @discord.app_commands.default_permissions(manage_roles=True)
    async def manual_check(self, interaction: discord.Interaction):
        """–†—É—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        
        setting = await db.settings.find_one({"guild_id": str(interaction.guild.id)})
        
        if not setting or "active_role_id" not in setting:
            embed = discord.Embed(
                title="‚ùå –ü–æ–º–∏–ª–∫–∞",
                description="Active Ping —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ –Ω–∞ —Ü—å–æ–º—É —Å–µ—Ä–≤–µ—Ä—ñ",
                color=0xff0000
            )
            return await interaction.response.send_message(embed=embed, ephemeral=True)


        embed = discord.Embed(
            title="üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ",
            description="–ü–æ—á–∏–Ω–∞—é –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...",
            color=0xffaa00
        )
        await interaction.response.send_message(embed=embed)


        added, removed = await self._check_guild_active_roles(interaction.guild, setting)


        embed = discord.Embed(
            title="‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
            description="–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä—É—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:",
            color=0x00ff00
        )
        embed.add_field(name="–î–æ–¥–∞–Ω–æ —Ä–æ–ª–µ–π:", value=str(added), inline=True)
        embed.add_field(name="–ó–Ω—è—Ç–æ —Ä–æ–ª–µ–π:", value=str(removed), inline=True)
        
        await interaction.edit_original_response(embed=embed)

    async def _check_guild_active_roles(self, guild, setting):
        role_id = setting["active_role_id"]
        min_level = setting.get("min_level", 5)
        min_xp_5d = setting.get("min_xp_5d", 500)

        role = guild.get_role(role_id)
        if not role:
            return 0, 0

        cutoff_date = datetime.utcnow().date() - timedelta(days=5)

        added_count = 0
        removed_count = 0

        for member in guild.members:
            if member.bot:
                continue

            user_data = await db.users.find_one({"guild_id": str(guild.id), "user_id": str(member.id)})
            if not user_data:
                if role in member.roles:
                    try:
                        await member.remove_roles(role, reason="Inactive (no profile)")
                        removed_count += 1
                    except Exception:
                        pass
                continue

            level = user_data.get("level", 0)
            history = user_data.get("history", {})

            recent_xp = 0
            for i in range(5):
                day = (datetime.utcnow().date() - timedelta(days=i)).strftime("%Y-%m-%d")
                recent_xp += history.get(day, 0)

            has_role = role in member.roles


            if level >= min_level and recent_xp >= min_xp_5d:
                if not has_role:
                    try:
                        await member.add_roles(role, reason="Active player role assigned")
                        added_count += 1
                    except Exception:
                        pass
            else:
                if has_role:
                    try:
                        await member.remove_roles(role, reason="Active player role removed (inactive)")
                        removed_count += 1
                    except Exception:
                        pass

        return added_count, removed_count

    @tasks.loop(hours=24)
    async def check_active_roles(self):
       
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–ª–µ–π –∫–æ–∂–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏"""
       
       async for setting in db.settings.find({"active_role_id": {"$exists": True}}):
            guild_id = int(setting["guild_id"])
            guild = self.bot.get_guild(guild_id)
            if not guild:
                continue

            try:
                await self._check_guild_active_roles(guild, setting)
            except Exception as e:
                print(f"Error checking active roles for guild {guild_id}: {e}")

    @check_active_roles.before_loop
    async def before_check(self):
        await self.bot.wait_until_ready()

async def setup(bot):
    await bot.add_cog(ActivePingChecker(bot))
