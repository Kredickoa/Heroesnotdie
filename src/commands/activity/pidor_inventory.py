import discord
from discord.ext import commands
from discord import app_commands
from typing import Optional, Dict
from modules.db import get_database
from ._constants import SHOP_ITEMS, RANKS

db = get_database()

class InventoryCommand(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    async def get_user_stats(self, user_id: int, guild_id: int) -> Dict:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        stats = await db.duel_stats.find_one({"user_id": str(user_id), "guild_id": guild_id})
        if not stats:
            stats = {
                "user_id": str(user_id),
                "guild_id": guild_id,
                "wins": 0,
                "losses": 0,
                "pk_balance": 0,
                "items": [],
                "debuffs": {},
                "daily_pk": 0,
                "last_pk_date": None
            }
            await db.duel_stats.insert_one(stats)
        return stats

    class InventoryView(discord.ui.View):
        def __init__(self, user, target_user, inventory_cog):
            super().__init__(timeout=300)
            self.user = user
            self.target_user = target_user
            self.inventory_cog = inventory_cog
            self.current_page = 0
            self.items_per_page = 5

        async def get_inventory_embed(self, interaction):
            stats = await self.inventory_cog.get_user_stats(self.target_user.id, interaction.guild.id)
            
            embed = discord.Embed(
                title="üéí –Ü–ù–í–ï–ù–¢–ê–†",
                color=0x9B59B6
            )
            
            embed.set_author(
                name=f"{self.target_user.display_name}",
                icon_url=self.target_user.display_avatar.url
            )
            
            if not stats.get('items'):
                embed.description = """
                ```
                üì¶ –Ü–Ω–≤–µ–Ω—Ç–∞—Ä –ø–æ—Ä–æ–∂–Ω—ñ–π
                
                üí° –ö—É–ø—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∏ –∫–æ–º–∞–Ω–¥–æ—é /pidor_shop
                üõçÔ∏è –∞–±–æ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!
                ```
                """
                embed.set_footer(text="–°–ª–æ—Ç—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: 0/1")
                return embed
            
            # –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é
            items = stats['items']
            total_pages = (len(items) - 1) // self.items_per_page + 1
            start_idx = self.current_page * self.items_per_page
            end_idx = min(start_idx + self.items_per_page, len(items))
            page_items = items[start_idx:end_idx]
            
            # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∏
            items_text = "```ansi\n"
            for i, item_id in enumerate(page_items):
                item_number = start_idx + i + 1
                if item_id in SHOP_ITEMS:
                    item = SHOP_ITEMS[item_id]
                    items_text += f"[0;37m{item_number}.[0m [1;32m{item['name']}[0m\n"
                    items_text += f"   [0;32m‚úÖ {item['buff']}[0m\n"
                    items_text += f"   [0;31m‚ùå {item['debuff']}[0m\n\n"
                else:
                    items_text += f"[0;37m{item_number}.[0m [0;31m–ù–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–µ–¥–º–µ—Ç[0m\n\n"
            items_text += "```"
            
            embed.description = items_text
            
            # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–ª–æ—Ç–∏
            max_slots = 1 + (stats['wins'] // 10)
            embed.add_field(
                name="üìä –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å–ª–æ—Ç—ñ–≤",
                value=f"```\nüéí –ó–∞–π–Ω—è—Ç–æ: {len(items)}/{max_slots}\nüìà +1 —Å–ª–æ—Ç –∫–æ–∂–Ω—ñ 10 –ø–µ—Ä–µ–º–æ–≥```",
                inline=True
            )
            
            # –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å
            total_value = sum(SHOP_ITEMS.get(item_id, {}).get('price', 0) for item_id in items)
            embed.add_field(
                name="üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å",
                value=f"```\nüíé {total_value} –ü–ö```",
                inline=True
            )
            
            if total_pages > 1:
                embed.set_footer(text=f"–°—Ç–æ—Ä—ñ–Ω–∫–∞ {self.current_page + 1}/{total_pages} ‚Ä¢ –°–ª–æ—Ç—ñ–≤: {len(items)}/{max_slots}")
            else:
                embed.set_footer(text=f"–°–ª–æ—Ç—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: {len(items)}/{max_slots}")
            
            return embed

        async def update_buttons(self):
            self.clear_items()
            
            stats = await self.inventory_cog.get_user_stats(self.target_user.id, 0)
            items = stats.get('items', [])
            total_pages = (len(items) - 1) // self.items_per_page + 1 if items else 1
            
            if total_pages > 1:
                # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
                prev_btn = discord.ui.Button(
                    label="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                    style=discord.ButtonStyle.secondary,
                    disabled=self.current_page <= 0
                )
                prev_btn.callback = self.previous_page
                self.add_item(prev_btn)
                
                # –ö–Ω–æ–ø–∫–∞ –≤–ø–µ—Ä–µ–¥
                next_btn = discord.ui.Button(
                    label="–î–∞–ª—ñ ‚ñ∂Ô∏è",
                    style=discord.ButtonStyle.secondary,
                    disabled=self.current_page >= total_pages - 1
                )
                next_btn.callback = self.next_page
                self.add_item(next_btn)
            
            # –ö–Ω–æ–ø–∫–∞ –æ–Ω–æ–≤–∏—Ç–∏
            refresh_btn = discord.ui.Button(
                label="üîÑ –û–Ω–æ–≤–∏—Ç–∏",
                style=discord.ButtonStyle.primary,
                row=1
            )
            refresh_btn.callback = self.refresh_inventory
            self.add_item(refresh_btn)
            
            # –ö–Ω–æ–ø–∫–∞ –º–∞–≥–∞–∑–∏–Ω—É (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–ª–∞—Å–Ω–æ–≥–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é)
            if self.target_user == self.user:
                shop_btn = discord.ui.Button(
                    label="üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω",
                    style=discord.ButtonStyle.success,
                    row=1
                )
                shop_btn.callback = self.open_shop
                self.add_item(shop_btn)

        async def previous_page(self, interaction):
            if self.current_page > 0:
                self.current_page -= 1
                embed = await self.get_inventory_embed(interaction)
                await self.update_buttons()
                await interaction.response.edit_message(embed=embed, view=self)

        async def next_page(self, interaction):
            stats = await self.inventory_cog.get_user_stats(self.target_user.id, interaction.guild.id)
            items = stats.get('items', [])
            total_pages = (len(items) - 1) // self.items_per_page + 1 if items else 1
            
            if self.current_page < total_pages - 1:
                self.current_page += 1
                embed = await self.get_inventory_embed(interaction)
                await self.update_buttons()
                await interaction.response.edit_message(embed=embed, view=self)

        async def refresh_inventory(self, interaction):
            embed = await self.get_inventory_embed(interaction)
            await self.update_buttons()
            await interaction.response.edit_message(embed=embed, view=self)

        async def open_shop(self, interaction):
            if self.target_user != self.user:
                await interaction.response.send_message("‚ùå –ú–∞–≥–∞–∑–∏–Ω –¥–æ—Å—Ç—É–ø–Ω–∏–π —Ç—ñ–ª—å–∫–∏ —É –≤–ª–∞—Å–Ω–æ–º—É —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ!", ephemeral=True)
                return
            
            # –¢—É—Ç –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É –º–∞–≥–∞–∑–∏–Ω—É –∞–±–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç–∏
            await interaction.response.send_message(
                "üõçÔ∏è –î–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–∞–≥–∞–∑–∏–Ω—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/pidor_shop`!", 
                ephemeral=True
            )

    @app_commands.command(name="pidor_inventory", description="–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –≥—Ä–∞–≤—Ü—è")
    @app_commands.describe(user="–ß–∏–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –ø–æ–∫–∞–∑–∞—Ç–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - —Å–≤—ñ–π)")
    async def pidor_inventory_command(self, interaction: discord.Interaction, user: Optional[discord.Member] = None):
        await interaction.response.defer()
        
        target_user = user or interaction.user
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —Ü–µ –±–æ—Ç
        if target_user.bot:
            await interaction.followup.send(
                "ü§ñ –ë–æ—Ç–∏ –Ω–µ –º–∞—é—Ç—å —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ–≤. –í–æ–Ω–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å –≤—Å–µ –≤ —Ö–º–∞—Ä—ñ!",
                ephemeral=True
            )
            return
        
        view = self.InventoryView(interaction.user, target_user, self)
        embed = await view.get_inventory_embed(interaction)
        await view.update_buttons()
        
        await interaction.followup.send(embed=embed, view=view)

async def setup(bot):
    await bot.add_cog(InventoryCommand(bot))