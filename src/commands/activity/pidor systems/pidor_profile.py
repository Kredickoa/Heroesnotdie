import discord
from discord.ext import commands
from discord import app_commands
from typing import Optional, Dict, List
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import io
import asyncio
from modules.db import get_database
from ._constants import RANKS, RANK_DESCRIPTIONS

db = get_database()

class ProfileCommand(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    async def get_user_stats(self, user_id: int, guild_id: int) -> Dict:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        stats = await db.duel_stats.find_one({"user_id": str(user_id), "guild_id": guild_id})
        if not stats:
            stats = {
                "user_id": str(user_id),
                "guild_id": guild_id,
                "wins": 0,
                "losses": 0,
                "pk_balance": 0,
                "items": [],
                "debuffs": {},
                "daily_pk": 0,
                "last_pk_date": None
            }
            await db.duel_stats.insert_one(stats)
        return stats

    def get_rank_info(self, wins: int) -> Dict:
        """–í–∏–∑–Ω–∞—á–∏—Ç–∏ —Ä–∞–Ω–≥ –≥—Ä–∞–≤—Ü—è –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø–µ—Ä–µ–º–æ–≥"""
        for i, rank in enumerate(RANKS):
            if rank["min_wins"] <= wins <= rank["max_wins"]:
                rank_copy = rank.copy()
                rank_copy["description"] = RANK_DESCRIPTIONS[i]
                return rank_copy
        return RANKS[-1]

    async def get_user_activity(self, user_id: int, guild_id: int) -> List[Dict]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤"""
        week_ago = datetime.utcnow() - timedelta(days=7)
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –¥—É–µ–ª—ñ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
        duels = await db.duel_history.find({
            "guild_id": guild_id,
            "timestamp": {"$gte": week_ago},
            "$or": [
                {"winner": str(user_id)},
                {"loser": str(user_id)}
            ]
        }).sort("timestamp", 1).to_list(length=None)
        
        # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ –¥–Ω—è—Ö
        daily_activity = {}
        for i in range(7):
            date = (datetime.utcnow() - timedelta(days=6-i)).date()
            daily_activity[date] = 0
        
        for duel in duels:
            date = duel['timestamp'].date()
            if date in daily_activity:
                if duel['winner'] == str(user_id):
                    daily_activity[date] += 50  # XP –∑–∞ –ø–µ—Ä–µ–º–æ–≥—É
                else:
                    daily_activity[date] += 25  # XP –∑–∞ —É—á–∞—Å—Ç—å
        
        return [(date, xp) for date, xp in daily_activity.items()]

    async def create_activity_chart(self, user_id: int, guild_id: int, username: str) -> io.BytesIO:
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
        activity = await self.get_user_activity(user_id, guild_id)
        
        if not activity:
            return None
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è matplotlib
        plt.style.use('dark_background')
        fig, ax = plt.subplots(figsize=(10, 4), facecolor='#2C2F33')
        ax.set_facecolor('#2C2F33')
        
        dates = [item[0] for item in activity]
        xp_values = [item[1] for item in activity]
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫
        ax.plot(dates, xp_values, color='#7289DA', linewidth=3, marker='o', markersize=8, markerfacecolor='#7289DA')
        ax.fill_between(dates, xp_values, alpha=0.3, color='#7289DA')
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ—Å–µ–π
        ax.set_title(f"–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (XP –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤)", color='#FFFFFF', fontsize=14, fontweight='bold', pad=20)
        ax.set_xlabel("–î–µ–Ω—å —Ç–∏–∂–Ω—è", color='#B9BBBE', fontsize=10)
        ax.set_ylabel("–û—Ç—Ä–∏–º–∞–Ω–æ XP", color='#B9BBBE', fontsize=10)
        
        # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç
        day_names = ['Sat', 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri']
        ax.set_xticks(dates)
        ax.set_xticklabels(day_names, color='#B9BBBE')
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—ñ—Ç–∫–∏
        ax.grid(True, alpha=0.3, color='#4F545C')
        ax.spines['bottom'].set_color('#4F545C')
        ax.spines['top'].set_color('#4F545C')
        ax.spines['right'].set_color('#4F545C')
        ax.spines['left'].set_color('#4F545C')
        
        # –ö–æ–ª—ñ—Ä —Ç–µ–∫—Å—Ç—É
        ax.tick_params(colors='#B9BBBE')
        
        plt.tight_layout()
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ BytesIO
        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', facecolor='#2C2F33', edgecolor='none', dpi=150)
        buffer.seek(0)
        plt.close()
        
        return buffer

    class ProfileStatsView(discord.ui.View):
        def __init__(self, user, target_user, profile_cog):
            super().__init__(timeout=300)
            self.user = user
            self.target_user = target_user
            self.profile_cog = profile_cog
            self.current_page = "profile"

        async def get_profile_embed(self, interaction):
            stats = await self.profile_cog.get_user_stats(self.target_user.id, interaction.guild.id)
            rank_info = self.profile_cog.get_rank_info(stats['wins'])
            
            embed = discord.Embed(color=0x7289DA)
            
            # –ü—Ä–æ—Ñ—ñ–ª—å —Ö–µ–¥–µ—Ä
            embed.set_author(
                name=f"{rank_info['emoji']} {self.target_user.display_name}",
                icon_url=self.target_user.display_avatar.url
            )
            
            # –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤ –æ–¥–Ω–æ–º—É –ø–æ–ª—ñ
            total_battles = stats['wins'] + stats['losses']
            win_rate = (stats['wins'] / max(total_battles, 1)) * 100 if total_battles > 0 else 0
            
            profile_info = f"""
            **–†—ñ–≤–µ–Ω—å:** 28 | **XP:** 4378 / 5420 (81%)
            **Voice:** 1809 —Ö–≤ | **–†–µ–∞–∫—Ü—ñ–π:** 636 | **–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:** 1328
            
            **–†–æ–ª—ñ:** Admin, 750 hours, Ukr
            """
            
            embed.add_field(name="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", value=profile_info, inline=False)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—É–µ–ª–µ–π
            duel_info = f"""
            ```
            ‚öîÔ∏è –ü–µ—Ä–µ–º–æ–≥–∏: {stats['wins']}
            üíÄ –ü–æ—Ä–∞–∑–∫–∏: {stats['losses']}
            üìà –í—ñ–Ω-—Ä–µ–π—Ç: {win_rate:.1f}%
            üí∞ –ë–∞–ª–∞–Ω—Å: {stats['pk_balance']} –ü–ö
            ```
            """
            
            embed.add_field(name="üéØ –î—É–µ–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", value=duel_info, inline=True)
            
            # –†–∞–Ω–≥ —Ç–∞ –æ–ø–∏—Å
            embed.add_field(
                name=f"üèÜ {rank_info['name']}",
                value=f"*{rank_info['description']}*",
                inline=True
            )
            
            embed.set_footer(text=f"–£—á–∞—Å—Ç–Ω–∏–∫ –∑: 22 June 2025")
            embed.set_thumbnail(url=self.target_user.display_avatar.url)
            
            return embed

        async def get_stats_embed(self, interaction):
            stats = await self.profile_cog.get_user_stats(self.target_user.id, interaction.guild.id)
            
            embed = discord.Embed(
                title="üìà –î–ï–¢–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê",
                color=0x3498DB
            )
            
            embed.set_author(
                name=self.target_user.display_name,
                icon_url=self.target_user.display_avatar.url
            )
            
            # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_battles = stats['wins'] + stats['losses']
            win_rate = (stats['wins'] / max(total_battles, 1)) * 100 if total_battles > 0 else 0
            
            general_stats = f"""
            ```
            üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            ‚öîÔ∏è –í—Å—å–æ–≥–æ –±–∏—Ç–≤: {total_battles}
            üèÜ –ü–µ—Ä–µ–º–æ–≥–∏: {stats['wins']}
            üíÄ –ü–æ—Ä–∞–∑–∫–∏: {stats['losses']}
            üìà –í—ñ–Ω-—Ä–µ–π—Ç: {win_rate:.1f}%
            üí∞ –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {stats['pk_balance']} –ü–ö
            üéí –ü—Ä–µ–¥–º–µ—Ç—ñ–≤: {len(stats.get('items', []))}
            ```
            """
            embed.add_field(name="üìã –û—Å–Ω–æ–≤–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏", value=general_stats, inline=False)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
            week_stats = await self.get_week_stats(interaction)
            embed.add_field(name="üìÖ –ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å", value=week_stats, inline=True)
            
            # –†–µ–π—Ç–∏–Ω–≥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
            server_rank = await self.get_server_rank(interaction)
            embed.add_field(name="üèÖ –ü–æ–∑–∏—Ü—ñ—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ", value=server_rank, inline=True)
            
            embed.set_footer(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ")
            
            return embed

        async def get_week_stats(self, interaction):
            week_ago = datetime.utcnow() - timedelta(days=7)
            
            week_duels = await db.duel_history.count_documents({
                "guild_id": interaction.guild.id,
                "timestamp": {"$gte": week_ago},
                "$or": [
                    {"winner": str(self.target_user.id)},
                    {"loser": str(self.target_user.id)}
                ]
            })
            
            week_wins = await db.duel_history.count_documents({
                "guild_id": interaction.guild.id,
                "timestamp": {"$gte": week_ago},
                "winner": str(self.target_user.id)
            })
            
            week_win_rate = (week_wins / max(week_duels, 1)) * 100 if week_duels > 0 else 0
            
            return f"""
            ```
            ‚öîÔ∏è –ë–∏—Ç–≤: {week_duels}
            üèÜ –ü–µ—Ä–µ–º–æ–≥: {week_wins}
            üìà –í—ñ–Ω-—Ä–µ–π—Ç: {week_win_rate:.1f}%
            ```
            """

        async def get_server_rank(self, interaction):
            all_players = await db.duel_stats.find(
                {"guild_id": interaction.guild.id}
            ).sort("wins", -1).to_list(length=None)
            
            user_rank = None
            for i, player in enumerate(all_players, 1):
                if player['user_id'] == str(self.target_user.id):
                    user_rank = i
                    break
            
            total_players = len(all_players)
            
            return f"""
            ```
            üèÖ –ü–æ–∑–∏—Ü—ñ—è: {user_rank or 'N/A'} –∑ {total_players}
            üìä –¢–æ–ø {((user_rank / total_players) * 100):.0f}%
            ```
            """ if user_rank else "```\n–ù–µ –±—Ä–∞–≤ —É—á–∞—Å—Ç—ñ –≤ –¥—É–µ–ª—è—Ö\n```"

        async def update_view(self, interaction):
            self.clear_items()
            
            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
            profile_btn = discord.ui.Button(
                label="üë§ –ü—Ä–æ—Ñ—ñ–ª—å",
                style=discord.ButtonStyle.primary if self.current_page == "profile" else discord.ButtonStyle.secondary,
                disabled=self.current_page == "profile"
            )
            profile_btn.callback = self.show_profile
            self.add_item(profile_btn)

            stats_btn = discord.ui.Button(
                label="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                style=discord.ButtonStyle.primary if self.current_page == "stats" else discord.ButtonStyle.secondary,
                disabled=self.current_page == "stats"
            )
            stats_btn.callback = self.show_stats
            self.add_item(stats_btn)

        async def show_profile(self, interaction):
            self.current_page = "profile"
            embed = await self.get_profile_embed(interaction)
            await self.update_view(interaction)
            
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞ –¥–æ–¥–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫
            chart_buffer = await self.profile_cog.create_activity_chart(
                self.target_user.id, 
                interaction.guild.id, 
                self.target_user.display_name
            )
            
            if chart_buffer:
                file = discord.File(chart_buffer, filename="activity.png")
                embed.set_image(url="attachment://activity.png")
                await interaction.response.edit_message(embed=embed, view=self, attachments=[file])
            else:
                await interaction.response.edit_message(embed=embed, view=self, attachments=[])

        async def show_stats(self, interaction):
            self.current_page = "stats"
            embed = await self.get_stats_embed(interaction)
            await self.update_view(interaction)
            await interaction.response.edit_message(embed=embed, view=self, attachments=[])

    @app_commands.command(name="pidor_profile", description="–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –≥—Ä–∞–≤—Ü—è")
    @app_commands.describe(user="–ß–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –ø–æ–∫–∞–∑–∞—Ç–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - —Å–≤—ñ–π)")
    async def pidor_profile_command(self, interaction: discord.Interaction, user: Optional[discord.Member] = None):
        await interaction.response.defer()
        
        target_user = user or interaction.user
        view = self.ProfileStatsView(interaction.user, target_user, self)
        
        embed = await view.get_profile_embed(interaction)
        await view.update_view(interaction)
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        chart_buffer = await self.create_activity_chart(
            target_user.id, 
            interaction.guild.id, 
            target_user.display_name
        )
        
        if chart_buffer:
            file = discord.File(chart_buffer, filename="activity.png")
            embed.set_image(url="attachment://activity.png")
            await interaction.followup.send(embed=embed, view=view, file=file)
        else:
            await interaction.followup.send(embed=embed, view=view)

async def setup(bot):
    await bot.add_cog(ProfileCommand(bot))