import discord
from discord import app_commands
from discord.ext import commands
from datetime import datetime
import asyncio
import json
from typing import Optional

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
CONFIG = {
    "MODERATOR_ROLE_ID": 123456789012345678,  # ID —Ä–æ–ª—ñ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ñ–≤
    "CATEGORY_ID": 123456789012345678,        # ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è —Ç—ñ–∫–µ—Ç—ñ–≤
    "LOG_CHANNEL_ID": 123456789012345678,     # ID –∫–∞–Ω–∞–ª—É –ª–æ–≥—ñ–≤ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
}

# –¢–∏–ø–∏ —Ç—ñ–∫–µ—Ç—ñ–≤
TICKET_TYPES = {
    "role_application": {
        "name": "üé≠ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å",
        "emoji": "üé≠",
        "description": "–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–ª—ñ",
        "roles": {
            "designer": {
                "name": "üé® Designer",
                "role_id": 123456789012345678,
                "questions": [
                    "–ü–æ–∫–∞–∂—ñ—Ç—å –ø—Ä–∏–∫–ª–∞–¥–∏ —Å–≤–æ—ó—Ö —Ä–æ–±—ñ—Ç (–ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ):",
                    "–°–∫—ñ–ª—å–∫–∏ —Ä–æ–∫—ñ–≤ –¥–æ—Å–≤—ñ–¥—É —É –¥–∏–∑–∞–π–Ω—ñ?",
                    "–Ø–∫—ñ –ø—Ä–æ–≥—Ä–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ?",
                    "–ß–æ–º—É —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—é —Ä–æ–ª—å?"
                ]
            },
            "developer": {
                "name": "üíª Developer", 
                "role_id": 123456789012345678,
                "questions": [
                    "–Ø–∫—ñ –º–æ–≤–∏ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –∑–Ω–∞—î—Ç–µ?",
                    "–ü–æ–∫–∞–∂—ñ—Ç—å –ø—Ä–∏–∫–ª–∞–¥–∏ –∫–æ–¥—É –∞–±–æ –ø—Ä–æ–µ–∫—Ç—ñ–≤:",
                    "–°–∫—ñ–ª—å–∫–∏ —Ä–æ–∫—ñ–≤ –¥–æ—Å–≤—ñ–¥—É –≤ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—ñ?",
                    "–ß–æ–º—É —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—é —Ä–æ–ª—å?"
                ]
            },
            "moderator": {
                "name": "üõ°Ô∏è Moderator",
                "role_id": 123456789012345678,
                "questions": [
                    "–ß–æ–º—É —Ö–æ—á–µ—Ç–µ —Å—Ç–∞—Ç–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º?",
                    "–Ø–∫ –±—É–¥–µ—Ç–µ –≤–∏—Ä—ñ—à—É–≤–∞—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏?",
                    "–°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –≥–æ—Ç–æ–≤—ñ –ø—Ä–∏–¥—ñ–ª—è—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó?",
                    "–í–∞—à –¥–æ—Å–≤—ñ–¥ —É –º–æ–¥–µ—Ä–∞—Ü—ñ—ó?"
                ]
            }
        }
    },
    "server_suggestion": {
        "name": "üí° –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞",
        "emoji": "üí°", 
        "description": "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è —ñ–¥–µ—è–º–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–∞",
        "questions": [
            "–Ø–∫–∞ –≤–∞—à–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è?",
            "–Ø–∫ —Ü–µ –ø–æ–∫—Ä–∞—â–∏—Ç—å —Å–µ—Ä–≤–µ—Ä?",
            "–ß–∏ —Ä–æ–∑–≥–ª—è–¥–∞–ª–∏ –≤–∏ –º–æ–∂–ª–∏–≤—ñ –Ω–µ–¥–æ–ª—ñ–∫–∏?",
            "–î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–µ—Ç–∞–ª—ñ –∞–±–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ:"
        ]
    },
    "bug_report": {
        "name": "üêõ –ó–≤—ñ—Ç –ø—Ä–æ –±–∞–≥",
        "emoji": "üêõ",
        "description": "–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏",
        "questions": [
            "–û–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É –¥–µ—Ç–∞–ª—å–Ω–æ:",
            "–Ø–∫ –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ —Ü—é –ø–æ–º–∏–ª–∫—É?",
            "–©–æ –≤–∏ –æ—á—ñ–∫—É–≤–∞–ª–∏ –ø–æ–±–∞—á–∏—Ç–∏?",
            "–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è (—Å–∫—Ä—ñ–Ω—à–æ—Ç–∏, –ª–æ–≥–∏):"
        ]
    },
    "general_support": {
        "name": "‚ùì –ó–∞–≥–∞–ª—å–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞",
        "emoji": "‚ùì",
        "description": "–ü–∏—Ç–∞–Ω–Ω—è –∞–±–æ –¥–æ–ø–æ–º–æ–≥–∞ –≤—ñ–¥ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó",
        "questions": [
            "–û–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–±–ª–µ–º—É:",
            "–ß–∏ –Ω–∞–º–∞–≥–∞–ª–∏—Å—å –≤–∏ –≤–∏—Ä—ñ—à–∏—Ç–∏ —Ü–µ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ?",
            "–î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–µ—Ç–∞–ª—ñ:"
        ]
    }
}

class TicketTypeSelect(discord.ui.Select):
    def __init__(self):
        options = []
        for ticket_type, config in TICKET_TYPES.items():
            options.append(
                discord.SelectOption(
                    label=config["name"],
                    description=config["description"], 
                    emoji=config["emoji"],
                    value=ticket_type
                )
            )
        
        super().__init__(
            placeholder="–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç—ñ–∫–µ—Ç–∞...",
            options=options,
            min_values=1,
            max_values=1,
            custom_id="ticket_type_select_main"
        )
    
    async def callback(self, interaction: discord.Interaction):
        ticket_type = self.values[0]
        
        if ticket_type == "role_application":
            # –Ø–∫—â–æ —Ü–µ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å - –ø–æ–∫–∞–∑—É—î–º–æ –≤–∏–±—ñ—Ä —Ä–æ–ª–µ–π
            view = RoleSelectView()
            embed = discord.Embed(
                title="üé≠ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å",
                description="–û–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—å, –Ω–∞ —è–∫—É —Ö–æ—á–µ—Ç–µ –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É:",
                color=discord.Color.blue()
            )
            await interaction.response.edit_message(embed=embed, view=view)
        else:
            # –î–ª—è —ñ–Ω—à–∏—Ö —Ç–∏–ø—ñ–≤ - –≤—ñ–¥—Ä–∞–∑—É —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç—ñ–∫–µ—Ç
            await self.create_ticket(interaction, ticket_type)
    
    async def create_ticket(self, interaction: discord.Interaction, ticket_type: str, role_key: str = None):
        config = TICKET_TYPES[ticket_type]
        
        # –ù–∞–∑–≤–∞ —Ç—ñ–∫–µ—Ç–∞
        if role_key:
            ticket_name = f"{config['roles'][role_key]['name']}-{interaction.user.display_name}"
            questions = config['roles'][role_key]['questions']
        else:
            ticket_name = f"{config['name']}-{interaction.user.display_name}"
            questions = config['questions']
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–∞–Ω–∞–ª
        category = interaction.guild.get_channel(CONFIG["CATEGORY_ID"])
        if not category:
            await interaction.response.send_message("‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –¥–ª—è —Ç—ñ–∫–µ—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!", ephemeral=True)
            return
        
        # –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É
        overwrites = {
            interaction.guild.default_role: discord.PermissionOverwrite(read_messages=False),
            interaction.user: discord.PermissionOverwrite(read_messages=True, send_messages=True),
            interaction.guild.get_role(CONFIG["MODERATOR_ROLE_ID"]): discord.PermissionOverwrite(
                read_messages=True, send_messages=True, manage_messages=True
            )
        }
        
        try:
            channel = await category.create_text_channel(
                name=ticket_name.lower().replace(" ", "-"),
                overwrites=overwrites
            )
            
            # Embed –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
            embed = discord.Embed(
                title=f"{config['emoji']} {config['name']}",
                description=f"–¢—ñ–∫–µ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è {interaction.user.mention}",
                color=discord.Color.green(),
                timestamp=datetime.now()
            )
            embed.add_field(
                name="üìù –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è",
                value="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –ø–∏—Ç–∞–Ω–Ω—è. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ —á–µ—Å–Ω–æ —Ç–∞ –¥–µ—Ç–∞–ª—å–Ω–æ.",
                inline=False
            )
            embed.set_footer(text=f"ID: {interaction.user.id}")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ view –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
            if ticket_type == "role_application":
                view = RoleApplicationButtons(role_key, interaction.user.id)
            else:
                view = GeneralTicketButtons(ticket_type, interaction.user.id)
            
            message = await channel.send(
                f"üëã {interaction.user.mention} | üõ°Ô∏è <@&{CONFIG['MODERATOR_ROLE_ID']}>",
                embed=embed,
                view=view
            )
            
            # –ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–¥–∞–≤–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è
            await self.ask_questions(channel, questions, interaction.user)
            
            # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            success_embed = discord.Embed(
                title="‚úÖ –¢—ñ–∫–µ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ!",
                description=f"–í–∞—à —Ç—ñ–∫–µ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ –≤ {channel.mention}\n–ú–æ–¥–µ—Ä–∞—Ü—ñ—è –Ω–µ–∑–∞–±–∞—Ä–æ–º –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ—Ç—Å—è.",
                color=discord.Color.green()
            )
            await interaction.response.edit_message(embed=success_embed, view=None)
            
        except Exception as e:
            await interaction.response.send_message(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç–∞: {e}", ephemeral=True)
    
    async def ask_questions(self, channel: discord.TextChannel, questions: list, user: discord.Member):
        """–ó–∞–¥–∞—î –ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
        await asyncio.sleep(2)  # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞
        
        for i, question in enumerate(questions, 1):
            embed = discord.Embed(
                title=f"‚ùì –ü–∏—Ç–∞–Ω–Ω—è {i}/{len(questions)}",
                description=question,
                color=discord.Color.blue()
            )
            await channel.send(embed=embed)

class RoleSelect(discord.ui.Select):
    def __init__(self):
        options = []
        roles_config = TICKET_TYPES["role_application"]["roles"]
        
        for role_key, role_config in roles_config.items():
            options.append(
                discord.SelectOption(
                    label=role_config["name"],
                    description=f"–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ —Ä–æ–ª—å {role_config['name']}",
                    value=role_key
                )
            )
        
        super().__init__(
            placeholder="–û–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—å...",
            options=options,
            min_values=1,
            max_values=1,
            custom_id="role_select_main"
        )
    
    async def callback(self, interaction: discord.Interaction):
        role_key = self.values[0]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –º–∞—î —Ä–æ–ª—å
        role_id = TICKET_TYPES["role_application"]["roles"][role_key]["role_id"]
        role = interaction.guild.get_role(role_id)
        
        if role and role in interaction.user.roles:
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –≤–∂–µ —î —Ü—è —Ä–æ–ª—å!", 
                ephemeral=True
            )
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—ñ–∫–µ—Ç –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–æ–ª—å
        ticket_select = TicketTypeSelect()
        await ticket_select.create_ticket(interaction, "role_application", role_key)

class TicketMainView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(TicketTypeSelect())

class RoleSelectView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(RoleSelect())

class RoleApplicationButtons(discord.ui.View):
    def __init__(self, role_key: str = None, user_id: int = None):
        super().__init__(timeout=None)
        self.role_key = role_key
        self.user_id = user_id
    
    @discord.ui.button(label="‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", style=discord.ButtonStyle.green, custom_id="approve_role_btn")
    async def approve(self, interaction: discord.Interaction, button: discord.ui.Button):
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞
        if not any(role.id == CONFIG["MODERATOR_ROLE_ID"] for role in interaction.user.roles):
            await interaction.response.send_message("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤!", ephemeral=True)
            return
        
        # –Ø–∫—â–æ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö - –∑–∞–ø–∏—Ç—É—î–º–æ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if not self.role_key or not self.user_id:
            await interaction.response.send_message("‚ùå –î–∞–Ω—ñ —Ç—ñ–∫–µ—Ç–∞ –≤—Ç—Ä–∞—á–µ–Ω–æ. –ó–∞–∫—Ä–∏–π—Ç–µ –∫–∞–Ω–∞–ª —Ç–∞ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π.", ephemeral=True)
            return
        
        user = interaction.guild.get_member(self.user_id)
        if not user:
            await interaction.response.send_message("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!", ephemeral=True)
            return
        
        # –î–æ–¥–∞—î–º–æ —Ä–æ–ª—å
        role_config = TICKET_TYPES["role_application"]["roles"][self.role_key]
        role = interaction.guild.get_role(role_config["role_id"])
        
        if role:
            try:
                await user.add_roles(role)
                
                # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ç—ñ–∫–µ—Ç—ñ
                embed = discord.Embed(
                    title="‚úÖ –ó–∞—è–≤–∫—É —Å—Ö–≤–∞–ª–µ–Ω–æ!",
                    description=f"–†–æ–ª—å {role.mention} –¥–æ–¥–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user.mention}",
                    color=discord.Color.green(),
                    timestamp=datetime.now()
                )
                embed.add_field(name="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=interaction.user.mention)
                
                await interaction.response.edit_message(embed=embed, view=TicketCloseView())
                
                # DM –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                try:
                    dm_embed = discord.Embed(
                        title="üéâ –í—ñ—Ç–∞—î–º–æ!",
                        description=f"–í–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ —Ä–æ–ª—å **{role_config['name']}** —Å—Ö–≤–∞–ª–µ–Ω–æ!\n–†–æ–ª—å –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é.",
                        color=discord.Color.green()
                    )
                    await user.send(embed=dm_embed)
                except:
                    pass  # –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ DM
                
            except Exception as e:
                await interaction.response.send_message(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–æ–ª—ñ: {e}", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå –†–æ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!", ephemeral=True)
    
    @discord.ui.button(label="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", style=discord.ButtonStyle.red, custom_id="reject_role_btn")
    async def reject(self, interaction: discord.Interaction, button: discord.ui.Button):
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞
        if not any(role.id == CONFIG["MODERATOR_ROLE_ID"] for role in interaction.user.roles):
            await interaction.response.send_message("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤!", ephemeral=True)
            return
        
        # –Ø–∫—â–æ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö - –∑–∞–ø–∏—Ç—É—î–º–æ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if not self.role_key or not self.user_id:
            await interaction.response.send_message("‚ùå –î–∞–Ω—ñ —Ç—ñ–∫–µ—Ç–∞ –≤—Ç—Ä–∞—á–µ–Ω–æ. –ó–∞–∫—Ä–∏–π—Ç–µ –∫–∞–Ω–∞–ª —Ç–∞ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π.", ephemeral=True)
            return
        
        user = interaction.guild.get_member(self.user_id)
        role_config = TICKET_TYPES["role_application"]["roles"][self.role_key]
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ç—ñ–∫–µ—Ç—ñ
        embed = discord.Embed(
            title="‚ùå –ó–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ",
            description=f"–ó–∞—è–≤–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.mention if user else '–ù–µ–≤—ñ–¥–æ–º–∏–π'} –Ω–∞ —Ä–æ–ª—å **{role_config['name']}** –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.",
            color=discord.Color.red(),
            timestamp=datetime.now()
        )
        embed.add_field(name="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=interaction.user.mention)
        
        await interaction.response.edit_message(embed=embed, view=TicketCloseView())
        
        # DM –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        if user:
            try:
                dm_embed = discord.Embed(
                    title="‚ùå –ó–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ",
                    description=f"–ù–∞ –∂–∞–ª—å, –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ —Ä–æ–ª—å **{role_config['name']}** –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.\n–í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∑–∞—è–≤–∫—É –ø—ñ–∑–Ω—ñ—à–µ.",
                    color=discord.Color.red()
                )
                await user.send(embed=dm_embed)
            except:
                pass

class GeneralTicketButtons(discord.ui.View):
    def __init__(self, ticket_type: str = None, user_id: int = None):
        super().__init__(timeout=None)
        self.ticket_type = ticket_type
        self.user_id = user_id
    
    @discord.ui.button(label="‚úÖ –í–∏—Ä—ñ—à–µ–Ω–æ", style=discord.ButtonStyle.green, custom_id="resolve_ticket_btn")
    async def resolve(self, interaction: discord.Interaction, button: discord.ui.Button):
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞
        if not any(role.id == CONFIG["MODERATOR_ROLE_ID"] for role in interaction.user.roles):
            await interaction.response.send_message("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤!", ephemeral=True)
            return
        
        # –Ø–∫—â–æ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        if not self.ticket_type or not self.user_id:
            await interaction.response.send_message("‚ùå –î–∞–Ω—ñ —Ç—ñ–∫–µ—Ç–∞ –≤—Ç—Ä–∞—á–µ–Ω–æ. –ó–∞–∫—Ä–∏–π—Ç–µ –∫–∞–Ω–∞–ª —Ç–∞ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π.", ephemeral=True)
            return
        
        user = interaction.guild.get_member(self.user_id)
        config = TICKET_TYPES[self.ticket_type]
        
        embed = discord.Embed(
            title="‚úÖ –¢—ñ–∫–µ—Ç –≤–∏—Ä—ñ—à–µ–Ω–æ",
            description=f"–¢—ñ–∫–µ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.mention if user else '–ù–µ–≤—ñ–¥–æ–º–∏–π'} —Ç–∏–ø—É **{config['name']}** –≤–∏—Ä—ñ—à–µ–Ω–æ.",
            color=discord.Color.green(),
            timestamp=datetime.now()
        )
        embed.add_field(name="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=interaction.user.mention)
        
        await interaction.response.edit_message(embed=embed, view=TicketCloseView())
        
        # DM –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        if user:
            try:
                dm_embed = discord.Embed(
                    title="‚úÖ –¢—ñ–∫–µ—Ç –≤–∏—Ä—ñ—à–µ–Ω–æ",
                    description=f"–í–∞—à —Ç—ñ–∫–µ—Ç —Ç–∏–ø—É **{config['name']}** –±—É–ª–æ –≤–∏—Ä—ñ—à–µ–Ω–æ.\n–î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è!",
                    color=discord.Color.green()
                )
                await user.send(embed=dm_embed)
            except:
                pass

class TicketCloseView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label="üîí –ó–∞–∫—Ä–∏—Ç–∏ —Ç—ñ–∫–µ—Ç", style=discord.ButtonStyle.secondary, custom_id="close_ticket_btn")
    async def close_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞
        if not any(role.id == CONFIG["MODERATOR_ROLE_ID"] for role in interaction.user.roles):
            await interaction.response.send_message("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤!", ephemeral=True)
            return
        
        embed = discord.Embed(
            title="üîí –¢—ñ–∫–µ—Ç –∑–∞–∫—Ä–∏—Ç–æ",
            description="–¶–µ–π —Ç—ñ–∫–µ—Ç –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥.",
            color=discord.Color.orange()
        )
        
        await interaction.response.edit_message(embed=embed, view=None)
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(10)
        try:
            await interaction.followup.channel.delete()
        except:
            pass

class TicketSystem(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
    
    async def cog_load(self):
        """–í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ cog"""
        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ persistent views
        self.bot.add_view(TicketMainView())
        self.bot.add_view(RoleSelectView())
        self.bot.add_view(TicketCloseView())
        self.bot.add_view(RoleApplicationButtons())
        self.bot.add_view(GeneralTicketButtons())
        print("üé´ Persistent views loaded!")
    
    @app_commands.command(name="ticket", description="–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—ñ–∫–µ—Ç")
    async def create_ticket(self, interaction: discord.Interaction):
        """–ì–æ–ª–æ–≤–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—ñ–≤"""
        
        embed = discord.Embed(
            title="üé´ –°–∏—Å—Ç–µ–º–∞ —Ç—ñ–∫–µ—Ç—ñ–≤",
            description="–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç—ñ–∫–µ—Ç–∞, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏:",
            color=discord.Color.blue(),
            timestamp=datetime.now()
        )
        
        # –î–æ–¥–∞—î–º–æ –ø–æ–ª—è –∑ –æ–ø–∏—Å–æ–º –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É
        for ticket_type, config in TICKET_TYPES.items():
            embed.add_field(
                name=f"{config['emoji']} {config['name']}",
                value=config['description'],
                inline=False
            )
        
        embed.set_footer(text="–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ")
        
        view = TicketMainView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
    
    @app_commands.command(name="ticket_setup", description="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —Ç—ñ–∫–µ—Ç—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω–∏)")
    @app_commands.describe(channel="–ö–∞–Ω–∞–ª –¥–ª—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ —Ç—ñ–∫–µ—Ç—ñ–≤")
    async def setup_tickets(self, interaction: discord.Interaction, channel: discord.TextChannel = None):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Å—Ç—ñ–π–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ —Ç—ñ–∫–µ—Ç—ñ–≤"""
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("‚ùå –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É!", ephemeral=True)
            return
        
        target_channel = channel or interaction.channel
        
        embed = discord.Embed(
            title="üé´ –°–∏—Å—Ç–µ–º–∞ —Ç—ñ–∫–µ—Ç—ñ–≤",
            description="**–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –º–µ–Ω—é –Ω–∏–∂—á–µ, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—ñ–∫–µ—Ç**\n\n" +
                       "**–î–æ—Å—Ç—É–ø–Ω—ñ —Ç–∏–ø–∏ —Ç—ñ–∫–µ—Ç—ñ–≤:**",
            color=discord.Color.blue(),
            timestamp=datetime.now()
        )
        
        # –î–æ–¥–∞—î–º–æ –ø–æ–ª—è –∑ –æ–ø–∏—Å–æ–º –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É
        for ticket_type, config in TICKET_TYPES.items():
            if ticket_type == "role_application":
                roles_list = "\n".join([f"‚Ä¢ {role_config['name']}" for role_config in config['roles'].values()])
                embed.add_field(
                    name=f"{config['emoji']} {config['name']}",
                    value=f"{config['description']}\n**–î–æ—Å—Ç—É–ø–Ω—ñ —Ä–æ–ª—ñ:**\n{roles_list}",
                    inline=False
                )
            else:
                embed.add_field(
                    name=f"{config['emoji']} {config['name']}",
                    value=config['description'],
                    inline=False
                )
        
        embed.set_footer(text="üîπ –í—Å—ñ —Ç—ñ–∫–µ—Ç–∏ —Å—Ç–≤–æ—Ä—é—é—Ç—å—Å—è —è–∫ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –∫–∞–Ω–∞–ª–∏")
        
        view = TicketMainView()
        await target_channel.send(embed=embed, view=view)
        
        await interaction.response.send_message(f"‚úÖ –ü–∞–Ω–µ–ª—å —Ç—ñ–∫–µ—Ç—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ –≤ {target_channel.mention}!", ephemeral=True)

async def setup(bot):
    await bot.add_cog(TicketSystem(bot))
    print("üé´ Ticket System loaded!")