import discord
from discord import app_commands
from discord.ext import commands
import random
from datetime import datetime, timedelta
from modules.db import get_database

db = get_database()

class PidorCommand(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(name="pidor", description="–†–∞–Ω–¥–æ–º–Ω–æ —Ç–µ–≥–Ω—É—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ +10% HP –Ω–∞ 1 –≥–æ–¥–∏–Ω—É")
    async def pidor(self, interaction: discord.Interaction):
        user_id = str(interaction.user.id)
        guild_id = interaction.guild.id
        now = datetime.utcnow()

        user_data = await db.users.find_one({"user_id": user_id, "guild_id": guild_id})
        last_used_str = user_data.get("last_pidor_use") if user_data else None

        if last_used_str:
            try:
                last_used = datetime.fromisoformat(last_used_str)
                if now - last_used < timedelta(hours=1):
                    remain = timedelta(hours=1) - (now - last_used)
                    minutes = int(remain.total_seconds() // 60) + 1
                    await interaction.response.send_message(
                        f"‚è≥ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {minutes} —Ö–≤–∏–ª–∏–Ω.", ephemeral=True
                    )
                    return
            except Exception:
                pass

        members = [m for m in interaction.guild.members if not m.bot and not m.system]
        if not members:
            await interaction.response.send_message("–ù–µ–º–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –≤–∏–±–æ—Ä—É.", ephemeral=True)
            return

        target = random.choice(members)

        boost_duration = timedelta(hours=1)
        boost_expires = now + boost_duration

        await db.users.update_one(
            {"user_id": user_id, "guild_id": guild_id},
            {
                "$set": {
                    "last_pidor_use": now.isoformat(),
                    "boost": {
                        "type": "hp",
                        "multiplier": 1.10,
                        "expires_at": boost_expires.isoformat()
                    }
                }
            },
            upsert=True,
        )

        await interaction.response.send_message(
            f"üî• {target.mention} ‚Äî –ø–∏–¥–æ—Ä –¥–Ω—è! üéâ\n"
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {interaction.user.mention} –æ—Ç—Ä–∏–º—É—î +10% HP –Ω–∞ 1 –≥–æ–¥–∏–Ω—É!",
            ephemeral=False,
        )

async def setup(bot):
    await bot.add_cog(PidorCommand(bot))
