import discord
from discord.ext import commands
from discord import app_commands
from typing import Dict
from modules.db import get_database
from ._constants import RANKS, RANK_DESCRIPTIONS

db = get_database()

class LeaderboardCommand(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    def get_rank_info(self, wins: int) -> Dict:
        """–í–∏–∑–Ω–∞—á–∏—Ç–∏ —Ä–∞–Ω–≥ –≥—Ä–∞–≤—Ü—è –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø–µ—Ä–µ–º–æ–≥"""
        for i, rank in enumerate(RANKS):
            if rank["min_wins"] <= wins <= rank["max_wins"]:
                rank_copy = rank.copy()
                rank_copy["description"] = RANK_DESCRIPTIONS[i]
                return rank_copy
        return RANKS[-1]

    @app_commands.command(name="pidor_leaderboard", description="–ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤")
    async def pidor_leaderboard_command(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=False)
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–ø-15 –≥—Ä–∞–≤—Ü—ñ–≤
        top_players = await db.duel_stats.find(
            {"guild_id": interaction.guild.id}
        ).sort("wins", -1).limit(15).to_list(length=15)
        
        if not top_players:
            embed = discord.Embed(
                title="üèÜ –¢–ê–ë–õ–ò–¶–Ø –õ–Ü–î–ï–†–Ü–í",
                description="```\nüìä –©–µ –Ω—ñ—Ö—Ç–æ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–≤ –¥—É–µ–ª–µ–π –Ω–∞ —Ü—å–æ–º—É —Å–µ—Ä–≤–µ—Ä—ñ!\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /pidor_duel —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏!```",
                color=0xF1C40F
            )
            await interaction.followup.send(embed=embed)
            return
        
        embed = discord.Embed(
            title="üèÜ –¢–ê–ë–õ–ò–¶–Ø –õ–Ü–î–ï–†–Ü–í",
            color=0xF1C40F
        )
        
        medals = ["ü•á", "ü•à", "ü•â"] + ["üèÖ"] * 12
        
        leaderboard_lines = ["üìä –¢–û–ü –î–£–ï–õ–Ø–ù–¢–Ü–í\n"]
        author_found = False
        
        for i, player_stats in enumerate(top_players):
            try:
                user = interaction.guild.get_member(int(player_stats['user_id']))
                if user:
                    rank_info = self.get_rank_info(player_stats['wins'])
                    win_rate = (player_stats['wins'] / max(player_stats['wins'] + player_stats['losses'], 1)) * 100
                    
                    line = (
                        f"{medals[i]} {user.display_name:<15} | "
                        f"{rank_info['emoji']} | "
                        f"W: {player_stats['wins']:<3} | "
                        f"WR: {win_rate:>5.1f}% | "
                        f"–ü–ö: {player_stats['pk_balance']:<3}"
                    )
                    leaderboard_lines.append(line)
                    
                    if player_stats['user_id'] == str(interaction.user.id):
                        author_found = True
            except (ValueError, AttributeError):
                continue
        
        # –Ø–∫—â–æ –∞–≤—Ç–æ—Ä –Ω–µ –≤ —Ç–æ–ø—ñ, –ø–æ–∫–∞–∑–∞—Ç–∏ –π–æ–≥–æ –ø–æ–∑–∏—Ü—ñ—é
        if not author_found:
            all_players = await db.duel_stats.find(
                {"guild_id": interaction.guild.id}
            ).sort("wins", -1).to_list(length=None)
            
            for i, player_stats in enumerate(all_players, 1):
                if player_stats['user_id'] == str(interaction.user.id):
                    rank_info = self.get_rank_info(player_stats['wins'])
                    win_rate = (player_stats['wins'] / max(player_stats['wins'] + player_stats['losses'], 1)) * 100
                    
                    line = (
                        f"\n--- –¢–ò –ù–ê {i} –ú–Ü–°–¶–Ü ---\n"
                        f"üéØ {interaction.user.display_name} | "
                        f"{rank_info['emoji']} | "
                        f"W: {player_stats['wins']} | "
                        f"WR: {win_rate:.1f}% | "
                        f"–ü–ö: {player_stats['pk_balance']}"
                    )
                    leaderboard_lines.append(line)
                    break
        
        embed.description = "```\n" + "\n".join(leaderboard_lines) + "\n```"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        total_duels = await db.duel_history.count_documents({"guild_id": interaction.guild.id})
        total_players = len(top_players)
        
        embed.set_footer(text=f"–í—Å—å–æ–≥–æ –¥—É–µ–ª–µ–π: {total_duels} ‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤: {total_players}")
        
        await interaction.followup.send(embed=embed)

async def setup(bot):
    await bot.add_cog(LeaderboardCommand(bot))