import discord
from discord.ext import commands
from discord import app_commands
from typing import Dict
from modules.db import get_database
from ._constants import RANKS, RANK_DESCRIPTIONS

db = get_database()

class PidorStatsCommand(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    def get_rank_info(self, wins: int) -> Dict:
        """–í–∏–∑–Ω–∞—á–∏—Ç–∏ —Ä–∞–Ω–≥ –≥—Ä–∞–≤—Ü—è –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø–µ—Ä–µ–º–æ–≥"""
        for i, rank in enumerate(RANKS):
            if rank["min_wins"] <= wins <= rank["max_wins"]:
                rank_copy = rank.copy()
                rank_copy["description"] = RANK_DESCRIPTIONS[i]
                return rank_copy
        return RANKS[-1]

    @app_commands.command(name="pidor_stats", description="–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥—É–µ–ª–µ–π —Å–µ—Ä–≤–µ—Ä–∞")
    async def pidor_stats_command(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=False)
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        total_duels = await db.duel_history.count_documents({"guild_id": interaction.guild.id})
        total_players = await db.duel_stats.count_documents({"guild_id": interaction.guild.id})
        
        # –ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à–∏–π –≥—Ä–∞–≤–µ—Ü—å
        most_active = await db.duel_stats.find_one(
            {"guild_id": interaction.guild.id},
            sort=[("wins", -1), ("losses", -1)]
        )
        
        # –ù–∞–π–±–∞–≥–∞—Ç—à–∏–π –≥—Ä–∞–≤–µ—Ü—å
        richest_player = await db.duel_stats.find_one(
            {"guild_id": interaction.guild.id},
            sort=[("pk_balance", -1)]
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å
        from datetime import datetime, timedelta
        week_ago = datetime.utcnow() - timedelta(days=7)
        recent_duels = await db.duel_history.count_documents({
            "guild_id": interaction.guild.id,
            "timestamp": {"$gte": week_ago}
        })
        
        embed = discord.Embed(
            title="üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–†–í–ï–†–ê",
            color=0x3498DB
        )
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        embed.add_field(
            name="üéØ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            value=f"```\n‚öîÔ∏è –í—Å—å–æ–≥–æ –¥—É–µ–ª–µ–π: {total_duels}\nüë• –ê–∫—Ç–∏–≤–Ω–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤: {total_players}\nüìÖ –î—É–µ–ª–µ–π –∑–∞ —Ç–∏–∂–¥–µ–Ω—å: {recent_duels}```",
            inline=False
        )
        
        # –ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à–∏–π –≥—Ä–∞–≤–µ—Ü—å
        if most_active:
            try:
                most_active_user = interaction.guild.get_member(int(most_active['user_id']))
                if most_active_user:
                    rank_info = self.get_rank_info(most_active['wins'])
                    total_battles = most_active['wins'] + most_active['losses']
                    win_rate = (most_active['wins'] / max(total_battles, 1)) * 100
                    
                    embed.add_field(
                        name="üèÜ –ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à–∏–π –≥—Ä–∞–≤–µ—Ü—å",
                        value=f"```\n{most_active_user.display_name}\n{rank_info['emoji']} {rank_info['name']}\n‚öîÔ∏è –ë–∏—Ç–≤: {total_battles}\nüéØ –í—ñ–Ω-—Ä–µ–π—Ç: {win_rate:.1f}%```",
                        inline=True
                    )
            except (ValueError, AttributeError):
                pass
        
        # –ù–∞–π–±–∞–≥–∞—Ç—à–∏–π –≥—Ä–∞–≤–µ—Ü—å
        if richest_player:
            try:
                richest_user = interaction.guild.get_member(int(richest_player['user_id']))
                if richest_user:
                    embed.add_field(
                        name="üí∞ –ù–∞–π–±–∞–≥–∞—Ç—à–∏–π –≥—Ä–∞–≤–µ—Ü—å",
                        value=f"```\n{richest_user.display_name}\nüíé {richest_player['pk_balance']} –ü–ö\nüéí –ü—Ä–µ–¥–º–µ—Ç—ñ–≤: {len(richest_player.get('items', []))}```",
                        inline=True
                    )
            except (ValueError, AttributeError):
                pass
        
        # –†–æ–∑–ø–æ–¥—ñ–ª –∑–∞ —Ä–∞–Ω–≥–∞–º–∏
        rank_distribution = {}
        async for player in db.duel_stats.find({"guild_id": interaction.guild.id}):
            rank_info = self.get_rank_info(player['wins'])
            rank_name = rank_info['name']
            rank_distribution[rank_name] = rank_distribution.get(rank_name, 0) + 1
        
        if rank_distribution:
            rank_text = "```\n"
            for rank in RANKS:
                count = rank_distribution.get(rank['name'], 0)
                if count > 0:
                    rank_text += f"{rank['emoji']} {rank['name']}: {count}\n"
            rank_text += "```"
            
            embed.add_field(
                name="üìà –†–æ–∑–ø–æ–¥—ñ–ª –∑–∞ —Ä–∞–Ω–≥–∞–º–∏",
                value=rank_text,
                inline=False
            )
        
        # –°–µ—Ä–µ–¥–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏
        if total_players > 0:
            pipeline = [
                {"$match": {"guild_id": interaction.guild.id}},
                {"$group": {
                    "_id": None,
                    "avg_wins": {"$avg": "$wins"},
                    "avg_balance": {"$avg": "$pk_balance"},
                    "total_pk": {"$sum": "$pk_balance"}
                }}
            ]
            
            avg_stats = await db.duel_stats.aggregate(pipeline).to_list(length=1)
            if avg_stats:
                stats = avg_stats[0]
                embed.add_field(
                    name="üìä –°–µ—Ä–µ–¥–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏",
                    value=f"```\nüèÜ –°–µ—Ä–µ–¥–Ω—å–æ –ø–µ—Ä–µ–º–æ–≥: {stats['avg_wins']:.1f}\nüí∞ –°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª–∞–Ω—Å: {stats['avg_balance']:.0f} –ü–ö\nüíé –í—Å—å–æ–≥–æ –ü–ö –≤ –µ–∫–æ–Ω–æ–º—ñ—Ü—ñ: {stats['total_pk']:.0f}```",
                    inline=False
                )
        
        embed.set_footer(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ")
        embed.set_thumbnail(url=interaction.guild.icon.url if interaction.guild.icon else None)
        
        await interaction.followup.send(embed=embed)

async def setup(bot):
    await bot.add_cog(PidorStatsCommand(bot))