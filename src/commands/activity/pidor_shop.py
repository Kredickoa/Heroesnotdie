import discord
from discord.ext import commands
from discord import app_commands
from typing import Optional, Dict
from modules.db import get_database
from ._constants import SHOP_ITEMS, RANKS

db = get_database()

class ShopInventoryCommand(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    async def get_user_stats(self, user_id: int, guild_id: int) -> Dict:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        stats = await db.duel_stats.find_one({"user_id": str(user_id), "guild_id": guild_id})
        if not stats:
            stats = {
                "user_id": str(user_id),
                "guild_id": guild_id,
                "wins": 0,
                "losses": 0,
                "pk_balance": 0,
                "items": [],
                "debuffs": {},
                "daily_pk": 0,
                "last_pk_date": None
            }
            await db.duel_stats.insert_one(stats)
        return stats

    async def buy_item(self, user_id: int, guild_id: int, item_id: str) -> tuple[bool, str]:
        """–ö—É–ø–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç"""
        if item_id not in SHOP_ITEMS:
            return False, "‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–µ–¥–º–µ—Ç!"
        
        stats = await self.get_user_stats(user_id, guild_id)
        item = SHOP_ITEMS[item_id]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å
        if stats['pk_balance'] < item['price']:
            return False, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ü–ö! –ü–æ—Ç—Ä—ñ–±–Ω–æ {item['price']} –ü–ö, –∞ —É –≤–∞—Å {stats['pk_balance']} –ü–ö."
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–ª–æ—Ç–∏ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é
        max_slots = 1 + (stats['wins'] // 10)
        if len(stats['items']) >= max_slots:
            return False, f"‚ùå –Ü–Ω–≤–µ–Ω—Ç–∞—Ä –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π! –î–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ—Ç—ñ–≤: {max_slots}"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –≤–∂–µ —î —Ü–µ–π –ø—Ä–µ–¥–º–µ—Ç
        if item_id in stats['items']:
            return False, f"‚ùå –£ –≤–∞—Å –≤–∂–µ —î **{item['name']}**!"
        
        # –ö—É–ø–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç
        new_balance = stats['pk_balance'] - item['price']
        new_items = stats['items'] + [item_id]
        
        await db.duel_stats.update_one(
            {"user_id": str(user_id), "guild_id": guild_id},
            {
                "$set": {
                    "pk_balance": new_balance,
                    "items": new_items
                }
            }
        )
        
        return True, f"‚úÖ –ö—É–ø–ª–µ–Ω–æ **{item['name']}** –∑–∞ {item['price']} –ü–ö!\nüí∞ –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} –ü–ö"

    class UnifiedShopView(discord.ui.View):
        def __init__(self, user, target_user, shop_cog):
            super().__init__(timeout=None)
            self.user = user
            self.target_user = target_user
            self.shop_cog = shop_cog
            self.current_mode = "inventory"  # inventory –∞–±–æ shop
            self.current_page = 0
            self.items_per_page = 3

        async def interaction_check(self, interaction: discord.Interaction) -> bool:
            """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
            if interaction.user != self.user:
                await interaction.response.send_message("‚ùå –¶–µ –Ω–µ —Ç–≤—ñ–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å!", ephemeral=True)
                return False
            return True

        async def get_inventory_embed(self, interaction):
            """–°—Ç–≤–æ—Ä–∏—Ç–∏ embed –¥–ª—è —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é"""
            stats = await self.shop_cog.get_user_stats(self.target_user.id, interaction.guild.id)
            
            embed = discord.Embed(
                title="üéí –Ü–ù–í–ï–ù–¢–ê–†",
                color=0x7c7cf0
            )
            
            embed.set_author(
                name=f"{self.target_user.display_name}",
                icon_url=self.target_user.display_avatar.url
            )
            
            if not stats.get('items'):
                embed.description = (
                    "```ansi\n"
                    "[0;37müì¶ –Ü–Ω–≤–µ–Ω—Ç–∞—Ä –ø–æ—Ä–æ–∂–Ω—ñ–π[0m\n\n"
                    "[0;36müí° –ö—É–ø—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ[0m\n"
                    "[0;36müõçÔ∏è –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –º–∞–≥–∞–∑–∏–Ω—É –Ω–∏–∂—á–µ![0m\n"
                    "```"
                )
            else:
                # –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é
                items = stats['items']
                total_pages = (len(items) - 1) // self.items_per_page + 1
                start_idx = self.current_page * self.items_per_page
                end_idx = min(start_idx + self.items_per_page, len(items))
                page_items = items[start_idx:end_idx]
                
                # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∏
                items_text = "```ansi\n"
                for i, item_id in enumerate(page_items):
                    item_number = start_idx + i + 1
                    if item_id in SHOP_ITEMS:
                        item = SHOP_ITEMS[item_id]
                        items_text += f"[0;37m{item_number}.[0m [1;32m{item['name']}[0m\n"
                        items_text += f"   [0;32m‚úÖ {item['buff']}[0m\n"
                        items_text += f"   [0;31m‚ùå {item['debuff']}[0m\n\n"
                    else:
                        items_text += f"[0;37m{item_number}.[0m [0;31m–ù–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–µ–¥–º–µ—Ç[0m\n\n"
                items_text += "```"
                embed.description = items_text
                
                if total_pages > 1:
                    embed.set_footer(text=f"–°—Ç–æ—Ä—ñ–Ω–∫–∞ {self.current_page + 1}/{total_pages}")
            
            # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–ª–æ—Ç–∏ —Ç–∞ –±–∞–ª–∞–Ω—Å
            max_slots = 1 + (stats['wins'] // 10)
            total_value = sum(SHOP_ITEMS.get(item_id, {}).get('price', 0) for item_id in stats.get('items', []))
            
            info_text = f"```ansi\n[1;32müéí –°–ª–æ—Ç—ñ–≤: {len(stats.get('items', []))}/{max_slots}[0m\n[0;33müí∞ –ë–∞–ª–∞–Ω—Å: {stats['pk_balance']} –ü–ö[0m\n[0;35müíé –í–∞—Ä—Ç—ñ—Å—Ç—å: {total_value} –ü–ö[0m\n```"
            embed.add_field(name="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", value=info_text, inline=False)
            
            return embed

        async def get_shop_embed(self, interaction):
            """–°—Ç–≤–æ—Ä–∏—Ç–∏ embed –¥–ª—è –º–∞–≥–∞–∑–∏–Ω—É"""
            stats = await self.shop_cog.get_user_stats(self.target_user.id, interaction.guild.id)
            
            embed = discord.Embed(
                title="üõçÔ∏è –ú–ê–ì–ê–ó–ò–ù –ü–†–ï–î–ú–ï–¢–Ü–í",
                color=0x7c7cf0
            )
            
            embed.set_author(
                name=f"{self.target_user.display_name}",
                icon_url=self.target_user.display_avatar.url
            )
            
            # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–∞–ª–∞–Ω—Å
            max_slots = 1 + (stats['wins'] // 10)
            balance_info = f"```ansi\n[1;32müí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {stats['pk_balance']} –ü–ö[0m\n[0;37müéí –°–ª–æ—Ç—ñ–≤ –≤—ñ–ª—å–Ω–æ: {max_slots - len(stats['items'])}/{max_slots}[0m\n```"
            embed.add_field(name="üí≥ –í–∞—à—ñ —Ä–µ—Å—É—Ä—Å–∏", value=balance_info, inline=False)
            
            # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∏
            items = list(SHOP_ITEMS.items())
            total_pages = (len(items) - 1) // self.items_per_page + 1
            start_idx = self.current_page * self.items_per_page
            end_idx = min(start_idx + self.items_per_page, len(items))
            page_items = items[start_idx:end_idx]
            
            for item_id, item in page_items:
                # –í–∏–∑–Ω–∞—á–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å
                can_afford = stats['pk_balance'] >= item['price']
                has_space = len(stats['items']) < max_slots
                already_owns = item_id in stats['items']
                
                if already_owns:
                    status = "‚úÖ **–ö—É–ø–ª–µ–Ω–æ**"
                    color_code = "[0;32m"
                elif can_afford and has_space:
                    status = "üü¢ **–î–æ—Å—Ç—É–ø–Ω–æ**"
                    color_code = "[1;32m"
                elif not can_afford:
                    status = f"üî¥ **–ü–æ—Ç—Ä—ñ–±–Ω–æ {item['price'] - stats['pk_balance']} –ü–ö**"
                    color_code = "[0;31m"
                else:
                    status = "üü° **–ù–µ–º–∞—î –º—ñ—Å—Ü—è**"
                    color_code = "[1;33m"
                
                item_info = f"""```ansi
{color_code}{item['name']}[0m - [1;33m{item['price']} –ü–ö[0m
[0;32müíö {item['buff']}[0m
[0;31müíî {item['debuff']}[0m

{status}
```"""
                
                embed.add_field(
                    name=f"{item.get('emoji', '‚ö°')} {item['name']}",
                    value=item_info,
                    inline=True
                )
            
            if total_pages > 1:
                embed.set_footer(text=f"–°—Ç–æ—Ä—ñ–Ω–∫–∞ {self.current_page + 1}/{total_pages} ‚Ä¢ –í—Å—å–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤: {len(items)}")
            else:
                embed.set_footer(text=f"–í—Å—å–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤: {len(items)}")
            
            return embed

        async def update_view(self, interaction):
            """–û–Ω–æ–≤–∏—Ç–∏ –≤–µ—Å—å —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
            self.clear_items()
            
            if self.current_mode == "inventory":
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é
                if self.target_user == self.user:
                    # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—É –≤ –º–∞–≥–∞–∑–∏–Ω
                    shop_btn = discord.ui.Button(
                        emoji="<:1405145855178182736:1405145855178182736>",
                        style=discord.ButtonStyle.primary,
                        row=0,
                        custom_id="switch_to_shop"
                    )
                    shop_btn.callback = self.switch_to_shop
                    self.add_item(shop_btn)
                
                # –ö–Ω–æ–ø–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                refresh_btn = discord.ui.Button(
                    emoji="<:reset:1405110197248069733>",
                    style=discord.ButtonStyle.secondary,
                    row=0,
                    custom_id="refresh_inventory"
                )
                refresh_btn.callback = self.refresh_inventory
                self.add_item(refresh_btn)
                
                # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –¥–ª—è —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é
                stats = await self.shop_cog.get_user_stats(self.target_user.id, interaction.guild.id)
                items = stats.get('items', [])
                if items:
                    total_pages = (len(items) - 1) // self.items_per_page + 1
                    if total_pages > 1:
                        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
                        if self.current_page > 0:
                            prev_btn = discord.ui.Button(
                                label="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                style=discord.ButtonStyle.secondary,
                                row=1,
                                custom_id="prev_inventory"
                            )
                            prev_btn.callback = self.previous_page
                            self.add_item(prev_btn)
                        
                        # –ö–Ω–æ–ø–∫–∞ –≤–ø–µ—Ä–µ–¥
                        if self.current_page < total_pages - 1:
                            next_btn = discord.ui.Button(
                                label="–î–∞–ª—ñ ‚ñ∂Ô∏è",
                                style=discord.ButtonStyle.secondary,
                                row=1,
                                custom_id="next_inventory"
                            )
                            next_btn.callback = self.next_page
                            self.add_item(next_btn)
            
            else:  # shop mode
                # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä
                inventory_btn = discord.ui.Button(
                    label="üéí –Ü–Ω–≤–µ–Ω—Ç–∞—Ä",
                    style=discord.ButtonStyle.primary,
                    row=0,
                    custom_id="switch_to_inventory"
                )
                inventory_btn.callback = self.switch_to_inventory
                self.add_item(inventory_btn)
                
                # –ö–Ω–æ–ø–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                refresh_btn = discord.ui.Button(
                    emoji="<:reset:1405110197248069733>",
                    style=discord.ButtonStyle.secondary,
                    row=0,
                    custom_id="refresh_shop"
                )
                refresh_btn.callback = self.refresh_shop
                self.add_item(refresh_btn)
                
                # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –¥–ª—è –º–∞–≥–∞–∑–∏–Ω—É
                items = list(SHOP_ITEMS.items())
                total_pages = (len(items) - 1) // self.items_per_page + 1
                if total_pages > 1:
                    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
                    if self.current_page > 0:
                        prev_btn = discord.ui.Button(
                            label="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                            style=discord.ButtonStyle.secondary,
                            row=1,
                            custom_id="prev_shop"
                        )
                        prev_btn.callback = self.previous_page
                        self.add_item(prev_btn)
                    
                    # –ö–Ω–æ–ø–∫–∞ –≤–ø–µ—Ä–µ–¥
                    if self.current_page < total_pages - 1:
                        next_btn = discord.ui.Button(
                            label="–î–∞–ª—ñ ‚ñ∂Ô∏è",
                            style=discord.ButtonStyle.secondary,
                            row=1,
                            custom_id="next_shop"
                        )
                        next_btn.callback = self.next_page
                        self.add_item(next_btn)
                
                # –ö–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –º–∞–≥–∞–∑–∏–Ω—É
                if self.target_user == self.user:  # –ö—É–ø—É–≤–∞—Ç–∏ –º–æ–∂–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å–µ–±–µ
                    stats = await self.shop_cog.get_user_stats(self.target_user.id, interaction.guild.id)
                    start_idx = self.current_page * self.items_per_page
                    end_idx = min(start_idx + self.items_per_page, len(items))
                    page_items = items[start_idx:end_idx]
                    
                    for i, (item_id, item) in enumerate(page_items):
                        can_afford = stats['pk_balance'] >= item['price']
                        has_space = len(stats['items']) < (1 + (stats['wins'] // 10))
                        already_owns = item_id in stats['items']
                        
                        if already_owns:
                            btn_style = discord.ButtonStyle.success
                            btn_label = f"‚úÖ {item['name']}"
                            btn_disabled = True
                        elif can_afford and has_space:
                            btn_style = discord.ButtonStyle.primary
                            btn_label = f"üõí {item['name']} ({item['price']} –ü–ö)"
                            btn_disabled = False
                        else:
                            btn_style = discord.ButtonStyle.danger
                            btn_label = f"‚ùå {item['name']} ({item['price']} –ü–ö)"
                            btn_disabled = True
                        
                        btn = discord.ui.Button(
                            label=btn_label,
                            style=btn_style,
                            disabled=btn_disabled,
                            custom_id=f"buy_{item_id}",
                            row=2 + (i // 2)  # –†–æ–∑–ø–æ–¥—ñ–ª—è—Ç–∏ –ø–æ —Ä—è–¥–∫–∞—Ö
                        )
                        btn.callback = self.create_buy_callback(item_id)
                        self.add_item(btn)

        def create_buy_callback(self, item_id):
            async def buy_callback(interaction):
                success, message = await self.shop_cog.buy_item(
                    self.target_user.id, 
                    interaction.guild.id, 
                    item_id
                )
                
                if success:
                    # –û–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—ñ—Å–ª—è –ø–æ–∫—É–ø–∫–∏
                    embed = await self.get_shop_embed(interaction)
                    await self.update_view(interaction)
                    await interaction.response.edit_message(embed=embed, view=self)
                    
                    # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –ø–æ–∫—É–ø–∫—É
                    await interaction.followup.send(message, ephemeral=True)
                else:
                    await interaction.response.send_message(message, ephemeral=True)
            
            return buy_callback

        async def switch_to_shop(self, interaction):
            """–ü–µ—Ä–µ–º–∏–∫–Ω—É—Ç–∏ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω"""
            if self.target_user != self.user:
                await interaction.response.send_message("‚ùå –ú–∞–≥–∞–∑–∏–Ω –¥–æ—Å—Ç—É–ø–Ω–∏–π —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–ª–∞—Å–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é!", ephemeral=True)
                return
            
            self.current_mode = "shop"
            self.current_page = 0
            embed = await self.get_shop_embed(interaction)
            await self.update_view(interaction)
            await interaction.response.edit_message(embed=embed, view=self)

        async def switch_to_inventory(self, interaction):
            """–ü–µ—Ä–µ–º–∏–∫–Ω—É—Ç–∏ –Ω–∞ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä"""
            self.current_mode = "inventory"
            self.current_page = 0
            embed = await self.get_inventory_embed(interaction)
            await self.update_view(interaction)
            await interaction.response.edit_message(embed=embed, view=self)

        async def previous_page(self, interaction):
            """–ü–æ–ø–µ—Ä–µ–¥–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞"""
            if self.current_page > 0:
                self.current_page -= 1
                if self.current_mode == "inventory":
                    embed = await self.get_inventory_embed(interaction)
                else:
                    embed = await self.get_shop_embed(interaction)
                await self.update_view(interaction)
                await interaction.response.edit_message(embed=embed, view=self)

        async def next_page(self, interaction):
            """–ù–∞—Å—Ç—É–ø–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞"""
            if self.current_mode == "inventory":
                stats = await self.shop_cog.get_user_stats(self.target_user.id, interaction.guild.id)
                items = stats.get('items', [])
                total_pages = (len(items) - 1) // self.items_per_page + 1 if items else 1
            else:
                items = list(SHOP_ITEMS.items())
                total_pages = (len(items) - 1) // self.items_per_page + 1
            
            if self.current_page < total_pages - 1:
                self.current_page += 1
                if self.current_mode == "inventory":
                    embed = await self.get_inventory_embed(interaction)
                else:
                    embed = await self.get_shop_embed(interaction)
                await self.update_view(interaction)
                await interaction.response.edit_message(embed=embed, view=self)

        async def refresh_inventory(self, interaction):
            """–û–Ω–æ–≤–∏—Ç–∏ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä"""
            embed = await self.get_inventory_embed(interaction)
            await self.update_view(interaction)
            await interaction.response.edit_message(embed=embed, view=self)

        async def refresh_shop(self, interaction):
            """–û–Ω–æ–≤–∏—Ç–∏ –º–∞–≥–∞–∑–∏–Ω"""
            embed = await self.get_shop_embed(interaction)
            await self.update_view(interaction)
            await interaction.response.edit_message(embed=embed, view=self)

    @app_commands.command(name="pidor_shop", description="–í—ñ–¥–∫—Ä–∏—Ç–∏ –º–∞–≥–∞–∑–∏–Ω —Ç–∞ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä")
    @app_commands.describe(user="–ß–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - —Å–≤—ñ–π)")
    async def pidor_shop_command(self, interaction: discord.Interaction, user: Optional[discord.Member] = None):
        await interaction.response.defer()
        
        target_user = user or interaction.user
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —Ü–µ –±–æ—Ç
        if target_user.bot:
            await interaction.followup.send(
                "ü§ñ –ë–æ—Ç–∏ –Ω–µ –º–∞—é—Ç—å —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ–≤. –í–æ–Ω–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å –≤—Å–µ –≤ —Ö–º–∞—Ä—ñ!",
                ephemeral=True
            )
            return
        
        view = self.UnifiedShopView(interaction.user, target_user, self)
        embed = await view.get_inventory_embed(interaction)
        await view.update_view(interaction)
        
        await interaction.followup.send(embed=embed, view=view)

    # –ó–∞–ª–∏—à–∞—î–º–æ —Å—Ç–∞—Ä—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    @app_commands.command(name="pidor_inventory", description="–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –≥—Ä–∞–≤—Ü—è")
    @app_commands.describe(user="–ß–∏–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –ø–æ–∫–∞–∑–∞—Ç–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - —Å–≤—ñ–π)")
    async def pidor_inventory_command(self, interaction: discord.Interaction, user: Optional[discord.Member] = None):
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É –∫–æ–º–∞–Ω–¥—É
        await self.pidor_shop_command(interaction, user)

async def setup(bot):
    await bot.add_cog(ShopInventoryCommand(bot))