import discord
from discord import app_commands
from discord.ext import commands
from datetime import datetime, timedelta
import asyncio
import json
import math
from typing import Optional
from modules.db import get_database

db = get_database()

# –¢–∏–ø–∏ —Ç—ñ–∫–µ—Ç—ñ–≤
TICKET_TYPES = {
    "role_application": {
        "name": "–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å",
        "description": "–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–ª—ñ",
        "emoji": "<:odym:1412519796456689714>",
        "questions": [
            "–ß–æ–º—É –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—é —Ä–æ–ª—å?",
            "–ß–∏ –º–∞—î—Ç–µ –≤–∏ –¥–æ—Å–≤—ñ–¥, –ø–æ–≤'—è–∑–∞–Ω–∏–π –∑ —Ü—ñ—î—é —Ä–æ–ª–ª—é?",
            "–Ø–∫ –≤–∏ –ø–ª–∞–Ω—É—î—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é —Ä–æ–ª—å?",
            "–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ–±–µ:"
        ]
    },
    "server_suggestion": {
        "name": "–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞",
        "description": "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è —ñ–¥–µ—è–º–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–∞",
        "emoji": "<:dva:1412519805185163274>",
        "questions": [
            "–Ø–∫–∞ –≤–∞—à–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è?",
            "–Ø–∫ —Ü–µ –ø–æ–∫—Ä–∞—â–∏—Ç—å —Å–µ—Ä–≤–µ—Ä?",
            "–ß–∏ —Ä–æ–∑–≥–ª—è–¥–∞–ª–∏ –≤–∏ –º–æ–∂–ª–∏–≤—ñ –Ω–µ–¥–æ–ª—ñ–∫–∏?",
            "–î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–µ—Ç–∞–ª—ñ –∞–±–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ:"
        ]
    },
    "bug_report": {
        "name": "–ó–≤—ñ—Ç –ø—Ä–æ –±–∞–≥",
        "description": "–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏",
        "emoji": "<:try:1412519816245547038>",
        "questions": [
            "–û–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É –¥–µ—Ç–∞–ª—å–Ω–æ:",
            "–Ø–∫ –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ —Ü—é –ø–æ–º–∏–ª–∫—É?",
            "–©–æ –≤–∏ –æ—á—ñ–∫—É–≤–∞–ª–∏ –ø–æ–±–∞—á–∏—Ç–∏?",
            "–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è (—Å–∫—Ä—ñ–Ω—à–æ—Ç–∏, –ª–æ–≥–∏):"
        ]
    },
    "general_support": {
        "name": "–ó–∞–≥–∞–ª—å–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞",
        "description": "–ü–∏—Ç–∞–Ω–Ω—è –∞–±–æ –¥–æ–ø–æ–º–æ–≥–∞ –≤—ñ–¥ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó",
        "emoji": "<:chetyri:1412519826274127973>",
        "questions": [
            "–û–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–±–ª–µ–º—É:",
            "–ß–∏ –Ω–∞–º–∞–≥–∞–ª–∏—Å—å –≤–∏ –≤–∏—Ä—ñ—à–∏—Ç–∏ —Ü–µ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ?",
            "–î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–µ—Ç–∞–ª—ñ:"
        ]
    },
    "complaint": {
        "name": "–°–∫–∞—Ä–≥–∞",
        "description": "–ü–æ–¥–∞—Ç–∏ —Å–∫–∞—Ä–≥—É –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ —Å–∏—Ç—É–∞—Ü—ñ—é",
        "emoji": "<:pyat:1412519858960339064>",
        "questions": [
            "–ù–∞ –∫–æ–≥–æ –∞–±–æ —â–æ –≤–∏ —Å–∫–∞—Ä–∂–∏—Ç–µ—Å—å?",
            "–©–æ —Å—Ç–∞–ª–æ—Å—è? –û–ø–∏—à—ñ—Ç—å —Å–∏—Ç—É–∞—Ü—ñ—é:",
            "–ß–∏ —î —É –≤–∞—Å –¥–æ–∫–∞–∑–∏ (—Å–∫—Ä—ñ–Ω—à–æ—Ç–∏, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)?",
            "–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:"
        ]
    }
}

# –£—Ç–∏–ª—ñ—Ç–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
async def get_guild_config(guild_id: int):
    config = await db.ticket_config.find_one({"guild_id": guild_id})
    if not config:
        default_config = {
            "guild_id": guild_id,
            "moderator_role_ids": [],
            "category_id": None,
            "log_channel_id": None,
            "available_roles": []
        }
        await db.ticket_config.insert_one(default_config)
        return default_config
    
    # –ú—ñ–≥—Ä–∞—Ü—ñ—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É
    if "moderator_role_id" in config and "moderator_role_ids" not in config:
        moderator_role_ids = [config["moderator_role_id"]] if config.get("moderator_role_id") else []
        config["moderator_role_ids"] = moderator_role_ids
        await db.ticket_config.update_one(
            {"guild_id": guild_id},
            {"$set": {"moderator_role_ids": moderator_role_ids}, "$unset": {"moderator_role_id": ""}}
        )
    
    return config

async def update_guild_config(guild_id: int, updates: dict):
    await db.ticket_config.update_one(
        {"guild_id": guild_id},
        {"$set": updates},
        upsert=True
    )

async def save_ticket_stat(guild_id: int):
    today = datetime.now().strftime('%Y-%m-%d')
    await db.ticket_stats.update_one(
        {"guild_id": guild_id, "date": today},
        {"$inc": {"count": 1}},
        upsert=True
    )

async def get_week_stats(guild_id: int):
    stats = []
    for i in range(7):
        date = (datetime.now() - timedelta(days=6-i)).strftime('%Y-%m-%d')
        stat = await db.ticket_stats.find_one({"guild_id": guild_id, "date": date})
        count = stat["count"] if stat else 0
        stats.append((date, count))
    return stats

def has_moderator_permissions(interaction: discord.Interaction, guild_config: dict) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
    if not guild_config.get("moderator_role_ids"):
        return interaction.user.guild_permissions.administrator
    return any(role.id in guild_config["moderator_role_ids"] for role in interaction.user.roles)

async def send_dm_notification(user: discord.Member, embed: discord.Embed):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î DM –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
    try:
        await user.send(embed=embed)
    except:
        pass

async def log_ticket_action(guild: discord.Guild, guild_config: dict, embed: discord.Embed):
    """–õ–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ–π –∑ —Ç—ñ–∫–µ—Ç–∞–º–∏"""
    if not guild_config.get("log_channel_id"):
        return
    log_channel = guild.get_channel(guild_config["log_channel_id"])
    if log_channel:
        try:
            await log_channel.send(embed=embed)
        except:
            pass

# –ù–æ–≤—ñ –∫–ª–∞—Å–∏ –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó —Ä–æ–ª–µ–π
class RolesPaginationView(discord.ui.View):
    def __init__(self, guild: discord.Guild, guild_config: dict, mode: str, page: int = 0):
        super().__init__(timeout=600)
        self.guild = guild
        self.guild_config = guild_config
        self.mode = mode  # "ticket_roles" or "moderator_roles"
        self.page = page
        self.selected_roles = set()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ä–æ–ª—ñ
        if mode == "ticket_roles":
            # –î–ª—è —Ç—ñ–∫–µ—Ç —Ä–æ–ª–µ–π –ø–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ —Ä–æ–ª—ñ –∫—Ä—ñ–º @everyone, –±–æ—Ç—ñ–≤ —Ç–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π
            self.all_roles = [
                role for role in guild.roles 
                if not role.is_default() and not role.is_bot_managed() and not role.is_integration()
            ]
        else:  # moderator_roles
            # –î–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å—å–∫–∏—Ö —Ä–æ–ª–µ–π –ø–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ —Ä–æ–ª—ñ –∫—Ä—ñ–º @everyone
            self.all_roles = [role for role in guild.roles if not role.is_default()]
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –ø–æ–∑–∏—Ü—ñ—î—é (–Ω–∞–π–≤–∏—â—ñ —Ä–æ–ª—ñ —Å–ø–æ—á–∞—Ç–∫—É)
        self.all_roles.sort(key=lambda r: r.position, reverse=True)
        
        self.roles_per_page = 20
        self.total_pages = math.ceil(len(self.all_roles) / self.roles_per_page)
        
        self.update_view()
    
    def get_page_roles(self):
        start = self.page * self.roles_per_page
        end = start + self.roles_per_page
        return self.all_roles[start:end]
    
    def update_view(self):
        self.clear_items()
        
        # –î–æ–¥–∞—î–º–æ —Å–µ–ª–µ–∫—Ç –º–µ–Ω—é –∑ —Ä–æ–ª—è–º–∏ –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        page_roles = self.get_page_roles()
        if page_roles:
            options = []
            for role in page_roles:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ä–æ–ª—å –≤–∂–µ –¥–æ–¥–∞–Ω–∞
                if self.mode == "ticket_roles":
                    is_selected = role.id in self.guild_config.get("available_roles", [])
                else:
                    is_selected = role.id in self.guild_config.get("moderator_role_ids", [])
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ä–æ–ª—å –≤–∏–±—Ä–∞–Ω–∞ –≤ –ø–æ—Ç–æ—á–Ω—ñ–π —Å–µ—Å—ñ—ó
                session_selected = role.id in self.selected_roles
                
                label = role.name
                if len(label) > 100:
                    label = label[:97] + "..."
                
                description = f"–ü–æ–∑–∏—Ü—ñ—è: {role.position}"
                if is_selected:
                    description += " ‚Ä¢ –í–∂–µ –¥–æ–¥–∞–Ω–∞"
                elif session_selected:
                    description += " ‚Ä¢ –û–±—Ä–∞–Ω–∞"
                
                options.append(discord.SelectOption(
                    label=label,
                    value=str(role.id),
                    description=description,
                    emoji="‚úÖ" if session_selected else ("üîπ" if is_selected else None)
                ))
            
            role_select = RolePageSelect(self.mode, options)
            role_select.parent_view = self
            self.add_item(role_select)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
        if self.total_pages > 1:
            # –ü–æ–ø–µ—Ä–µ–¥–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞
            prev_button = discord.ui.Button(
                label="‚óÄÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è",
                style=discord.ButtonStyle.secondary,
                disabled=self.page == 0
            )
            prev_button.callback = self.prev_page
            self.add_item(prev_button)
            
            # –ù–∞—Å—Ç—É–ø–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
            next_button = discord.ui.Button(
                label="–ù–∞—Å—Ç—É–ø–Ω–∞ ‚ñ∂Ô∏è",
                style=discord.ButtonStyle.secondary,
                disabled=self.page >= self.total_pages - 1
            )
            next_button.callback = self.next_page
            self.add_item(next_button)
        
        # –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
        if self.selected_roles:
            save_button = discord.ui.Button(
                label=f"–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏ ({len(self.selected_roles)})",
                style=discord.ButtonStyle.green,
                emoji="üíæ"
            )
            save_button.callback = self.save_changes
            self.add_item(save_button)
        
        clear_button = discord.ui.Button(
            label="–û—á–∏—Å—Ç–∏—Ç–∏ –≤–∏–±—ñ—Ä",
            style=discord.ButtonStyle.secondary,
            emoji="üóëÔ∏è",
            disabled=not self.selected_roles
        )
        clear_button.callback = self.clear_selection
        self.add_item(clear_button)
        
        cancel_button = discord.ui.Button(
            label="–°–∫–∞—Å—É–≤–∞—Ç–∏",
            style=discord.ButtonStyle.red,
            emoji="‚ùå"
        )
        cancel_button.callback = self.cancel
        self.add_item(cancel_button)
    
    async def prev_page(self, interaction: discord.Interaction):
        self.page = max(0, self.page - 1)
        self.update_view()
        await self.update_message(interaction)
    
    async def next_page(self, interaction: discord.Interaction):
        self.page = min(self.total_pages - 1, self.page + 1)
        self.update_view()
        await self.update_message(interaction)
    
    async def save_changes(self, interaction: discord.Interaction):
        if self.mode == "ticket_roles":
            current_roles = set(self.guild_config.get("available_roles", []))
            new_roles = list(current_roles | self.selected_roles)  # –û–±'—î–¥–Ω—É—î–º–æ –º–Ω–æ–∂–∏–Ω–∏
            await update_guild_config(self.guild.id, {"available_roles": new_roles})
            
            added_roles = [self.guild.get_role(role_id) for role_id in self.selected_roles]
            added_roles = [role for role in added_roles if role]
            
            embed = discord.Embed(
                title="–†–æ–ª—ñ –¥–ª—è —Ç—ñ–∫–µ—Ç—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ",
                description=f"–î–æ–¥–∞–Ω–æ {len(added_roles)} —Ä–æ–ª–µ–π",
                color=0x57f287
            )
            
            if added_roles:
                role_list = [f"+ {role.mention}" for role in added_roles]
                embed.add_field(
                    name="–î–æ–¥–∞–Ω—ñ —Ä–æ–ª—ñ",
                    value="\n".join(role_list[:10]) + (f"\n... —Ç–∞ —â–µ {len(role_list) - 10}" if len(role_list) > 10 else ""),
                    inline=False
                )
            
            embed.add_field(
                name="–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å",
                value=f"{len(new_roles)} —Ä–æ–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∑–∞—è–≤–æ–∫",
                inline=True
            )
        
        else:  # moderator_roles
            current_roles = set(self.guild_config.get("moderator_role_ids", []))
            new_roles = list(current_roles | self.selected_roles)  # –û–±'—î–¥–Ω—É—î–º–æ –º–Ω–æ–∂–∏–Ω–∏
            await update_guild_config(self.guild.id, {"moderator_role_ids": new_roles})
            
            added_roles = [self.guild.get_role(role_id) for role_id in self.selected_roles]
            added_roles = [role for role in added_roles if role]
            
            embed = discord.Embed(
                title="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å—å–∫—ñ —Ä–æ–ª—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ",
                description=f"–î–æ–¥–∞–Ω–æ {len(added_roles)} —Ä–æ–ª–µ–π",
                color=0x57f287
            )
            
            if added_roles:
                role_list = [f"+ {role.mention}" for role in added_roles]
                embed.add_field(
                    name="–î–æ–¥–∞–Ω—ñ —Ä–æ–ª—ñ",
                    value="\n".join(role_list[:10]) + (f"\n... —Ç–∞ —â–µ {len(role_list) - 10}" if len(role_list) > 10 else ""),
                    inline=False
                )
            
            embed.add_field(
                name="–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å",
                value=f"{len(new_roles)} –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å—å–∫–∏—Ö —Ä–æ–ª–µ–π",
                inline=True
            )
        
        await interaction.response.edit_message(embed=embed, view=None)
    
    async def clear_selection(self, interaction: discord.Interaction):
        self.selected_roles.clear()
        self.update_view()
        await self.update_message(interaction)
    
    async def cancel(self, interaction: discord.Interaction):
        embed = discord.Embed(
            title="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ",
            description="–ó–º—ñ–Ω–∏ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ",
            color=0xfee75c
        )
        await interaction.response.edit_message(embed=embed, view=None)
    
    async def update_message(self, interaction: discord.Interaction):
        embed = self.create_embed()
        await interaction.response.edit_message(embed=embed, view=self)
    
    def create_embed(self):
        if self.mode == "ticket_roles":
            title = "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–ª–µ–π –¥–ª—è —Ç—ñ–∫–µ—Ç—ñ–≤"
            description = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—ñ, –Ω–∞ —è–∫—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –º–æ–∂—É—Ç—å –ø–æ–¥–∞–≤–∞—Ç–∏ –∑–∞—è–≤–∫–∏"
        else:
            title = "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å—å–∫–∏—Ö —Ä–æ–ª–µ–π"
            description = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—ñ, —è–∫—ñ –º–æ–∂—É—Ç—å –∫–µ—Ä—É–≤–∞—Ç–∏ —Ç—ñ–∫–µ—Ç–∞–º–∏"
        
        embed = discord.Embed(
            title=title,
            description=description,
            color=0x2b2d31
        )
        
        embed.add_field(
            name="–°—Ç–æ—Ä—ñ–Ω–∫–∞",
            value=f"{self.page + 1}/{self.total_pages}",
            inline=True
        )
        
        embed.add_field(
            name="–í—Å—å–æ–≥–æ —Ä–æ–ª–µ–π",
            value=f"{len(self.all_roles)}",
            inline=True
        )
        
        embed.add_field(
            name="–û–±—Ä–∞–Ω–æ –∑–∞—Ä–∞–∑",
            value=f"{len(self.selected_roles)}",
            inline=True
        )
        
        if self.selected_roles:
            selected_roles_list = []
            for role_id in list(self.selected_roles)[:5]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5
                role = self.guild.get_role(role_id)
                if role:
                    selected_roles_list.append(role.name)
            
            selected_text = "\n".join(selected_roles_list)
            if len(self.selected_roles) > 5:
                selected_text += f"\n... —Ç–∞ —â–µ {len(self.selected_roles) - 5}"
            
            embed.add_field(
                name="–û–±—Ä–∞–Ω—ñ —Ä–æ–ª—ñ",
                value=selected_text,
                inline=False
            )
        
        embed.set_footer(text="–û–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—ñ –∑—ñ —Å–ø–∏—Å–∫—É –Ω–∏–∂—á–µ")
        return embed

class RolePageSelect(discord.ui.Select):
    def __init__(self, mode: str, options: list):
        self.mode = mode
        self.parent_view = None
        super().__init__(
            placeholder="–û–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—ñ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è...",
            options=options,
            min_values=0,
            max_values=len(options)
        )
    
    async def callback(self, interaction: discord.Interaction):
        for value in self.values:
            role_id = int(value)
            if role_id in self.parent_view.selected_roles:
                self.parent_view.selected_roles.discard(role_id)  # –í–∏–¥–∞–ª—è—î–º–æ —è–∫—â–æ –≤–∂–µ —î
            else:
                self.parent_view.selected_roles.add(role_id)  # –î–æ–¥–∞—î–º–æ —è–∫—â–æ –Ω–µ–º–∞—î
        
        self.parent_view.update_view()
        embed = self.parent_view.create_embed()
        await interaction.response.edit_message(embed=embed, view=self.parent_view)

class RemoveRolesView(discord.ui.View):
    def __init__(self, guild: discord.Guild, guild_config: dict, mode: str):
        super().__init__(timeout=600)
        self.guild = guild
        self.guild_config = guild_config
        self.mode = mode
        self.selected_roles = set()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Ä–æ–ª—ñ
        if mode == "ticket_roles":
            role_ids = guild_config.get("available_roles", [])
        else:
            role_ids = guild_config.get("moderator_role_ids", [])
        
        self.current_roles = []
        for role_id in role_ids:
            role = guild.get_role(role_id)
            if role:
                self.current_roles.append(role)
        
        self.current_roles.sort(key=lambda r: r.position, reverse=True)
        
        self.update_view()
    
    def update_view(self):
        self.clear_items()
        
        if not self.current_roles:
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–ø—Ü—ñ—ó –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        options = []
        for role in self.current_roles:
            label = role.name
            if len(label) > 100:
                label = label[:97] + "..."
            
            description = f"–ü–æ–∑–∏—Ü—ñ—è: {role.position}"
            if role.id in self.selected_roles:
                description += " ‚Ä¢ –û–±—Ä–∞–Ω–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è"
            
            options.append(discord.SelectOption(
                label=label,
                value=str(role.id),
                description=description,
                emoji="‚ùå" if role.id in self.selected_roles else "üîπ"
            ))
        
        # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ –≥—Ä—É–ø–∏ –ø–æ 25
        for i in range(0, len(options), 25):
            chunk_options = options[i:i+25]
            remove_select = RemoveRoleSelect(self.mode, chunk_options)
            remove_select.parent_view = self
            self.add_item(remove_select)
        
        # –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
        if self.selected_roles:
            remove_button = discord.ui.Button(
                label=f"–í–∏–¥–∞–ª–∏—Ç–∏ –æ–±—Ä–∞–Ω—ñ ({len(self.selected_roles)})",
                style=discord.ButtonStyle.red,
                emoji="üóëÔ∏è"
            )
            remove_button.callback = self.remove_selected
            self.add_item(remove_button)
        
        cancel_button = discord.ui.Button(
            label="–°–∫–∞—Å—É–≤–∞—Ç–∏",
            style=discord.ButtonStyle.secondary,
            emoji="‚ùå"
        )
        cancel_button.callback = self.cancel
        self.add_item(cancel_button)
    
    async def remove_selected(self, interaction: discord.Interaction):
        if self.mode == "ticket_roles":
            current_roles = set(self.guild_config.get("available_roles", []))
            new_roles = list(current_roles - self.selected_roles)
            await update_guild_config(self.guild.id, {"available_roles": new_roles})
            
            removed_roles = [self.guild.get_role(role_id) for role_id in self.selected_roles]
            removed_roles = [role for role in removed_roles if role]
            
            embed = discord.Embed(
                title="–†–æ–ª—ñ –≤–∏–¥–∞–ª–µ–Ω–æ",
                description=f"–í–∏–¥–∞–ª–µ–Ω–æ {len(removed_roles)} —Ä–æ–ª–µ–π –∑ —Ç—ñ–∫–µ—Ç—ñ–≤",
                color=0xed4245
            )
            
            if removed_roles:
                role_list = [f"- {role.mention}" for role in removed_roles]
                embed.add_field(
                    name="–í–∏–¥–∞–ª–µ–Ω—ñ —Ä–æ–ª—ñ",
                    value="\n".join(role_list[:10]) + (f"\n... —Ç–∞ —â–µ {len(role_list) - 10}" if len(role_list) > 10 else ""),
                    inline=False
                )
            
            embed.add_field(
                name="–ó–∞–ª–∏—à–∏–ª–æ—Å—å —Ä–æ–ª–µ–π",
                value=f"{len(new_roles)} —Ä–æ–ª–µ–π",
                inline=True
            )
        
        else:  # moderator_roles
            current_roles = set(self.guild_config.get("moderator_role_ids", []))
            new_roles = list(current_roles - self.selected_roles)
            await update_guild_config(self.guild.id, {"moderator_role_ids": new_roles})
            
            removed_roles = [self.guild.get_role(role_id) for role_id in self.selected_roles]
            removed_roles = [role for role in removed_roles if role]
            
            embed = discord.Embed(
                title="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å—å–∫—ñ —Ä–æ–ª—ñ –≤–∏–¥–∞–ª–µ–Ω–æ",
                description=f"–í–∏–¥–∞–ª–µ–Ω–æ {len(removed_roles)} —Ä–æ–ª–µ–π",
                color=0xed4245
            )
            
            if removed_roles:
                role_list = [f"- {role.mention}" for role in removed_roles]
                embed.add_field(
                    name="–í–∏–¥–∞–ª–µ–Ω—ñ —Ä–æ–ª—ñ",
                    value="\n".join(role_list[:10]) + (f"\n... —Ç–∞ —â–µ {len(role_list) - 10}" if len(role_list) > 10 else ""),
                    inline=False
                )
            
            embed.add_field(
                name="–ó–∞–ª–∏—à–∏–ª–æ—Å—å —Ä–æ–ª–µ–π",
                value=f"{len(new_roles)} —Ä–æ–ª–µ–π",
                inline=True
            )
        
        await interaction.response.edit_message(embed=embed, view=None)
    
    async def cancel(self, interaction: discord.Interaction):
        embed = discord.Embed(
            title="–í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ",
            description="–†–æ–ª—ñ –Ω–µ –∑–º—ñ–Ω–µ–Ω–æ",
            color=0xfee75c
        )
        await interaction.response.edit_message(embed=embed, view=None)
    
    def create_embed(self):
        if self.mode == "ticket_roles":
            title = "–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–ª–µ–π –∑ —Ç—ñ–∫–µ—Ç—ñ–≤"
            description = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—ñ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è"
        else:
            title = "–í–∏–¥–∞–ª–µ–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å—å–∫–∏—Ö —Ä–æ–ª–µ–π"
            description = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—ñ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è"
        
        embed = discord.Embed(
            title=title,
            description=description,
            color=0xed4245
        )
        
        embed.add_field(
            name="–í—Å—å–æ–≥–æ —Ä–æ–ª–µ–π",
            value=f"{len(self.current_roles)}",
            inline=True
        )
        
        embed.add_field(
            name="–û–±—Ä–∞–Ω–æ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è",
            value=f"{len(self.selected_roles)}",
            inline=True
        )
        
        return embed

class RemoveRoleSelect(discord.ui.Select):
    def __init__(self, mode: str, options: list):
        self.mode = mode
        self.parent_view = None
        super().__init__(
            placeholder="–û–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—ñ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è...",
            options=options,
            min_values=0,
            max_values=len(options)
        )
    
    async def callback(self, interaction: discord.Interaction):
        for value in self.values:
            role_id = int(value)
            if role_id in self.parent_view.selected_roles:
                self.parent_view.selected_roles.discard(role_id)
            else:
                self.parent_view.selected_roles.add(role_id)
        
        self.parent_view.update_view()
        embed = self.parent_view.create_embed()
        await interaction.response.edit_message(embed=embed, view=self.parent_view)

# –ó–∞–ª–∏—à–∞—î–º–æ –≤—Å—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∫–ª–∞—Å–∏ –±–µ–∑ –∑–º—ñ–Ω
class TicketTypeSelect(discord.ui.Select):
    def __init__(self):
        options = []
        for ticket_type, config in TICKET_TYPES.items():
            options.append(
                discord.SelectOption(
                    label=config["name"],
                    description=config["description"], 
                    value=ticket_type,
                    emoji=config["emoji"]
                )
            )
        
        super().__init__(
            placeholder="–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç—ñ–∫–µ—Ç–∞...",
            options=options,
            custom_id="ticket_type_select_main"
        )
    
    async def callback(self, interaction: discord.Interaction):
        ticket_type = self.values[0]
        guild_config = await get_guild_config(interaction.guild.id)
        
        if ticket_type == "role_application":
            if not guild_config["available_roles"]:
                await interaction.response.send_message(
                    "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ —â–µ –Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ä–æ–ª—ñ –¥–ª—è –∑–∞—è–≤–æ–∫.", 
                    ephemeral=True
                )
                return
            
            available_roles = [interaction.guild.get_role(role_id) 
                             for role_id in guild_config["available_roles"]]
            available_roles = [role for role in available_roles if role and not role.is_bot_managed()]
            
            if not available_roles:
                await interaction.response.send_message(
                    "–í—Å—ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ —Ä–æ–ª—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –∞–±–æ –≤–∏–¥–∞–ª–µ–Ω—ñ.", 
                    ephemeral=True
                )
                return
            
            view = RoleSelectView(interaction.guild, available_roles)
            embed = discord.Embed(
                title="–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å",
                description="–û–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—å, –Ω–∞ —è–∫—É —Ö–æ—á–µ—Ç–µ –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É:",
                color=0x2b2d31
            )
            await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
        else:
            await self.create_ticket(interaction, ticket_type)
    
    async def create_ticket(self, interaction: discord.Interaction, ticket_type: str, role_id: int = None):
        config = TICKET_TYPES[ticket_type]
        guild_config = await get_guild_config(interaction.guild.id)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —î –≤—ñ–¥–∫—Ä–∏—Ç–∏–π —Ç—ñ–∫–µ—Ç
        existing_ticket = await db.tickets.find_one({
            "guild_id": interaction.guild.id,
            "user_id": interaction.user.id,
            "ticket_type": ticket_type,
            "status": "open"
        })
        
        if existing_ticket:
            channel = interaction.guild.get_channel(existing_ticket["channel_id"])
            if channel:
                await interaction.response.send_message(
                    f"–£ –≤–∞—Å –≤–∂–µ —î –≤—ñ–¥–∫—Ä–∏—Ç–∏–π —Ç—ñ–∫–µ—Ç: {channel.mention}",
                    ephemeral=True
                )
                return
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É
        category = await self.get_or_create_category(interaction.guild, guild_config)
        if not category:
            await interaction.response.send_message(
                "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è —Ç—ñ–∫–µ—Ç—ñ–≤", 
                ephemeral=True
            )
            return
        
        # –ù–∞–∑–≤–∞ —Ç—ñ–∫–µ—Ç–∞ (—Å–ø—Ä–æ—â–µ–Ω–∞)
        if role_id:
            role = interaction.guild.get_role(role_id)
            ticket_name = f"—Ä–æ–ª—å-{role.name if role else 'unknown'}"
        else:
            config_name = config['name'].lower().replace(' ', '-')
            ticket_name = config_name
        
        ticket_name = f"{ticket_name}-{interaction.user.id}"[:50]
        
        # –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É
        overwrites = {
            interaction.guild.default_role: discord.PermissionOverwrite(read_messages=False),
            interaction.user: discord.PermissionOverwrite(
                read_messages=True, send_messages=True, attach_files=True, embed_links=True
            ),
        }
        
        # –î–æ–¥–∞—î–º–æ –≤—Å—ñ —Ä–æ–ª—ñ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ñ–≤
        for mod_role_id in guild_config["moderator_role_ids"]:
            mod_role = interaction.guild.get_role(mod_role_id)
            if mod_role:
                overwrites[mod_role] = discord.PermissionOverwrite(
                    read_messages=True, send_messages=True, manage_messages=True,
                    attach_files=True, embed_links=True
                )
        
        try:
            channel = await category.create_text_channel(
                name=ticket_name.lower().replace(" ", "-"),
                overwrites=overwrites
            )
            
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É
            ticket_data = {
                "guild_id": interaction.guild.id,
                "channel_id": channel.id,
                "user_id": interaction.user.id,
                "ticket_type": ticket_type,
                "role_id": role_id,
                "created_at": datetime.now(),
                "status": "open"
            }
            await db.tickets.insert_one(ticket_data)
            
            # –û—Å–Ω–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            embed = discord.Embed(
                title=f"{config['name']}",
                description=f"**–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:** {interaction.user.mention}\n**–°—Ç–≤–æ—Ä–µ–Ω–æ:** <t:{int(datetime.now().timestamp())}:F>",
                color=0x2b2d31,
                timestamp=datetime.now()
            )
            
            if role_id:
                role = interaction.guild.get_role(role_id)
                embed.add_field(
                    name="–ó–∞–ø–∏—Ç—É–≤–∞–Ω–∞ —Ä–æ–ª—å",
                    value=f"{role.mention if role else '–ù–µ–≤—ñ–¥–æ–º–∞ —Ä–æ–ª—å'}",
                    inline=True
                )
            
            embed.set_footer(text=f"ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {interaction.user.id}")
            embed.set_thumbnail(url=interaction.user.display_avatar.url)
            
            # –í–∏–±—ñ—Ä view
            if ticket_type == "role_application":
                view = RoleApplicationButtons(role_id, interaction.user.id, channel.id)
            else:
                view = GeneralTicketButtons(ticket_type, interaction.user.id, channel.id)
            
            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —É–ø–æ–º–∏–Ω–∞–Ω–Ω—è–º–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ñ–≤
            mentions = [interaction.user.mention]
            for mod_role_id in guild_config["moderator_role_ids"]:
                mod_role = interaction.guild.get_role(mod_role_id)
                if mod_role:
                    mentions.append(mod_role.mention)
            
            mention_text = " | ".join(mentions)
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await channel.send(mention_text, embed=embed, view=view)
            
            # –ü–∏—Ç–∞–Ω–Ω—è
            await self.ask_questions(channel, config['questions'])
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            await save_ticket_stat(interaction.guild.id)
            
            # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            success_embed = discord.Embed(
                title="–¢—ñ–∫–µ—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ",
                description=f"**–í–∞—à —Ç—ñ–∫–µ—Ç:** {channel.mention}\n\n" +
                           f"–¢–∏–ø: {config['name']}\n" +
                           f"–û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó",
                color=0x57f287
            )
            
            if interaction.response.is_done():
                await interaction.edit_original_response(embed=success_embed, view=None)
            else:
                await interaction.response.send_message(embed=success_embed, view=None, ephemeral=True)
            
            # –õ–æ–≥
            log_embed = discord.Embed(
                title="–ù–æ–≤–∏–π —Ç—ñ–∫–µ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ",
                color=0x2b2d31,
                timestamp=datetime.now()
            )
            log_embed.add_field(name="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á", value=f"{interaction.user.mention} (`{interaction.user.id}`)", inline=True)
            log_embed.add_field(name="–¢–∏–ø", value=config['name'], inline=True)
            log_embed.add_field(name="–ö–∞–Ω–∞–ª", value=channel.mention, inline=True)
            log_embed.set_thumbnail(url=interaction.user.display_avatar.url)
            await log_ticket_action(interaction.guild, guild_config, log_embed)
            
        except Exception as e:
            error_message = f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç–∞: {e}"
            if interaction.response.is_done():
                await interaction.edit_original_response(content=error_message, embed=None, view=None)
            else:
                await interaction.response.send_message(error_message, ephemeral=True)
    
    async def get_or_create_category(self, guild: discord.Guild, guild_config: dict):
        """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –∞–±–æ —Å—Ç–≤–æ—Ä—é—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è —Ç—ñ–∫–µ—Ç—ñ–≤"""
        if guild_config["category_id"]:
            category = guild.get_channel(guild_config["category_id"])
            if category:
                return category
        
        for cat in guild.categories:
            if cat.name.lower() in ["tickets", "—Ç—ñ–∫–µ—Ç–∏", "—Ç–∏–∫–µ—Ç—ã"]:
                await update_guild_config(guild.id, {"category_id": cat.id})
                return cat
        
        try:
            category = await guild.create_category("–¢—ñ–∫–µ—Ç–∏")
            await update_guild_config(guild.id, {"category_id": category.id})
            return category
        except:
            return None
    
    async def ask_questions(self, channel: discord.TextChannel, questions: list):
        """–ó–∞–¥–∞—î –ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
        await asyncio.sleep(3)
        
        questions_embed = discord.Embed(
            title="–ê–Ω–∫–µ—Ç–∞",
            description="–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è:",
            color=0x2b2d31
        )
        
        for i, question in enumerate(questions, 1):
            questions_embed.add_field(
                name=f"–ü–∏—Ç–∞–Ω–Ω—è {i}",
                value=question,
                inline=False
            )
        
        await channel.send(embed=questions_embed)

class RoleSelectView(discord.ui.View):
    def __init__(self, guild: discord.Guild, available_roles: list):
        super().__init__(timeout=600)
        
        options = []
        available_roles.sort(key=lambda r: r.position, reverse=True)
        
        for role in available_roles[:25]:
            options.append(
                discord.SelectOption(
                    label=role.name,
                    description=f"–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ —Ä–æ–ª—å {role.name}",
                    value=str(role.id)
                )
            )
        
        select = discord.ui.Select(
            placeholder="–û–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—å...",
            options=options
        )
        
        async def select_callback(select_interaction):
            role_id = int(select.values[0])
            role = select_interaction.guild.get_role(role_id)
            
            if not role or role in select_interaction.user.roles:
                await select_interaction.response.send_message(
                    f"{'–†–æ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!' if not role else f'–£ –≤–∞—Å –≤–∂–µ —î —Ä–æ–ª—å {role.mention}!'}", 
                    ephemeral=True
                )
                return
            
            ticket_select = TicketTypeSelect()
            await ticket_select.create_ticket(select_interaction, "role_application", role_id)
        
        select.callback = select_callback
        self.add_item(select)

class RejectModal(discord.ui.Modal, title="–ü—Ä–∏—á–∏–Ω–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è"):
    def __init__(self, role_id: int, user_id: int, channel_id: int):
        super().__init__(timeout=300)
        self.role_id = role_id
        self.user_id = user_id
        self.channel_id = channel_id
    
    reason = discord.ui.TextInput(
        label="–ü—Ä–∏—á–∏–Ω–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏",
        placeholder="–í–∫–∞–∂—ñ—Ç—å —á–æ–º—É –∑–∞—è–≤–∫—É –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ...",
        required=True,
        max_length=1000,
        style=discord.TextStyle.paragraph
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        user = interaction.guild.get_member(self.user_id)
        role = interaction.guild.get_role(self.role_id)
        
        await db.tickets.update_one(
            {"channel_id": self.channel_id},
            {"$set": {
                "status": "rejected", 
                "rejected_by": interaction.user.id, 
                "rejected_at": datetime.now(),
                "reject_reason": self.reason.value
            }}
        )
        
        embed = discord.Embed(
            title="–ó–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ",
            description=f"**–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:** {user.mention if user else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–∫–∏–Ω—É–≤ —Å–µ—Ä–≤–µ—Ä'}\n" +
                       f"**–†–æ–ª—å:** {role.mention if role else '–†–æ–ª—å –≤–∏–¥–∞–ª–µ–Ω–∞'}\n" +
                       f"**–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {interaction.user.mention}",
            color=0xed4245,
            timestamp=datetime.now()
        )
        embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è", value=self.reason.value, inline=False)
        
        await interaction.response.edit_message(embed=embed, view=TicketCloseView())
        
        # DM –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        if user:
            dm_embed = discord.Embed(
                title="<:palka:1412777364387135589> –ó–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ",
                description=f"–ù–∞ –∂–∞–ª—å, –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ —Ä–æ–ª—å **{role.name if role else '–Ω–µ–≤—ñ–¥–æ–º–∞ —Ä–æ–ª—å'}** –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.\n\n" +
                           f"**–°–µ—Ä–≤–µ—Ä:** {interaction.guild.name}\n" +
                           f"**–ü—Ä–∏—á–∏–Ω–∞:** {self.reason.value}\n\n" +
                           f"–í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∑–∞—è–≤–∫—É –ø—ñ–∑–Ω—ñ—à–µ",
                color=0xed4245,
                timestamp=datetime.now()
            )
            await send_dm_notification(user, dm_embed)

class TicketCloseView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label="–ó–∞–∫—Ä–∏—Ç–∏ —Ç—ñ–∫–µ—Ç", style=discord.ButtonStyle.secondary, custom_id="close_ticket_final")
    async def close_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        guild_config = await get_guild_config(interaction.guild.id)
        
        if not has_moderator_permissions(interaction, guild_config):
            await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤!", ephemeral=True)
            return
        
        await db.tickets.update_one(
            {"channel_id": interaction.channel.id},
            {"$set": {"status": "closed", "closed_by": interaction.user.id, "closed_at": datetime.now()}}
        )
        
        embed = discord.Embed(
            title="–¢—ñ–∫–µ—Ç –∑–∞–∫—Ä–∏–≤–∞—î—Ç—å—Å—è",
            description=f"–¢—ñ–∫–µ—Ç –∑–∞–∫—Ä–∏—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {interaction.user.mention}\n\n" +
                       f"–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è: <t:{int(datetime.now().timestamp())}:F>\n" +
                       f"–ö–∞–Ω–∞–ª –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...",
            color=0xfee75c,
            timestamp=datetime.now()
        )
        embed.set_footer(text="–î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —Ç—ñ–∫–µ—Ç—ñ–≤")
        
        await interaction.response.edit_message(embed=embed, view=None)
        
        # –õ–æ–≥
        log_embed = discord.Embed(
            title="–¢—ñ–∫–µ—Ç –∑–∞–∫—Ä–∏—Ç–æ",
            color=0xfee75c,
            timestamp=datetime.now()
        )
        log_embed.add_field(name="–ö–∞–Ω–∞–ª", value=f"#{interaction.channel.name}", inline=True)
        log_embed.add_field(name="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=interaction.user.mention, inline=True)
        await log_ticket_action(interaction.guild, guild_config, log_embed)
        
        await asyncio.sleep(15)
        try:
            await interaction.channel.delete(reason=f"–¢—ñ–∫–µ—Ç –∑–∞–∫—Ä–∏—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {interaction.user}")
        except:
            pass

class RoleApplicationButtons(discord.ui.View):
    def __init__(self, role_id: int = None, user_id: int = None, channel_id: int = None):
        super().__init__(timeout=None)
        self.role_id = role_id
        self.user_id = user_id
        self.channel_id = channel_id
    
    @discord.ui.button(label="–°—Ö–≤–∞–ª–∏—Ç–∏ –∑–∞—è–≤–∫—É", style=discord.ButtonStyle.green, custom_id="approve_role_application")
    async def approve(self, interaction: discord.Interaction, button: discord.ui.Button):
        guild_config = await get_guild_config(interaction.guild.id)
        
        if not has_moderator_permissions(interaction, guild_config):
            await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤!", ephemeral=True)
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ –±–∞–∑–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if not all([self.role_id, self.user_id]):
            ticket_data = await db.tickets.find_one({"channel_id": interaction.channel.id})
            if ticket_data:
                self.role_id = ticket_data.get("role_id")
                self.user_id = ticket_data.get("user_id")
        
        user = interaction.guild.get_member(self.user_id)
        role = interaction.guild.get_role(self.role_id)
        
        if not user or not role:
            await interaction.response.send_message("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–±–æ —Ä–æ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ!", ephemeral=True)
            return
        
        try:
            await user.add_roles(role, reason=f"–°—Ö–≤–∞–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {interaction.user}")
            
            await db.tickets.update_one(
                {"channel_id": interaction.channel.id},
                {"$set": {"status": "approved", "approved_by": interaction.user.id, "approved_at": datetime.now()}}
            )
            
            embed = discord.Embed(
                title="–ó–∞—è–≤–∫—É —Å—Ö–≤–∞–ª–µ–Ω–æ",
                description=f"**–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:** {user.mention}\n**–†–æ–ª—å:** {role.mention}\n**–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {interaction.user.mention}",
                color=0x57f287,
                timestamp=datetime.now()
            )
            embed.add_field(
                name="–í—ñ—Ç–∞—î–º–æ",
                value=f"–†–æ–ª—å **{role.name}** —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
                inline=False
            )
            
            await interaction.response.edit_message(embed=embed, view=TicketCloseView())
            
            # DM –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            dm_embed = discord.Embed(
                title="<:palka:1412777364387135589> –ó–∞—è–≤–∫—É —Å—Ö–≤–∞–ª–µ–Ω–æ",
                description=f"–í–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ —Ä–æ–ª—å **{role.name}** —Å—Ö–≤–∞–ª–µ–Ω–æ\n\n" +
                           f"**–°–µ—Ä–≤–µ—Ä:** {interaction.guild.name}\n" +
                           f"**–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {interaction.user.mention}\n\n" +
                           f"–†–æ–ª—å –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é",
                color=0x57f287,
                timestamp=datetime.now()
            )
            await send_dm_notification(user, dm_embed)
            
        except Exception as e:
            await interaction.response.send_message(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–æ–ª—ñ: {e}", ephemeral=True)
    
    @discord.ui.button(label="–í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∑–∞—è–≤–∫—É", style=discord.ButtonStyle.red, custom_id="reject_role_application")
    async def reject(self, interaction: discord.Interaction, button: discord.ui.Button):
        guild_config = await get_guild_config(interaction.guild.id)
        
        if not has_moderator_permissions(interaction, guild_config):
            await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤!", ephemeral=True)
            return
        
        if not all([self.role_id, self.user_id]):
            ticket_data = await db.tickets.find_one({"channel_id": interaction.channel.id})
            if ticket_data:
                self.role_id = ticket_data.get("role_id")
                self.user_id = ticket_data.get("user_id")
        
        modal = RejectModal(self.role_id, self.user_id, interaction.channel.id)
        await interaction.response.send_modal(modal)

class GeneralTicketButtons(discord.ui.View):
    def __init__(self, ticket_type: str = None, user_id: int = None, channel_id: int = None):
        super().__init__(timeout=None)
        self.ticket_type = ticket_type
        self.user_id = user_id
        self.channel_id = channel_id
    
    @discord.ui.button(label="–í–∏—Ä—ñ—à–µ–Ω–æ", style=discord.ButtonStyle.green, custom_id="resolve_general_ticket")
    async def resolve(self, interaction: discord.Interaction, button: discord.ui.Button):
        # –î–æ–∑–≤–æ–ª—è—î–º–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∑–∞–∫—Ä–∏–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—ñ —Ç—ñ–∫–µ—Ç–∏
        if not all([self.ticket_type, self.user_id]):
            ticket_data = await db.tickets.find_one({"channel_id": interaction.channel.id})
            if ticket_data:
                self.ticket_type = ticket_data.get("ticket_type")
                self.user_id = ticket_data.get("user_id")
        
        user = interaction.guild.get_member(self.user_id)
        config = TICKET_TYPES.get(self.ticket_type, {"name": "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø"})
        
        await db.tickets.update_one(
            {"channel_id": interaction.channel.id},
            {"$set": {"status": "resolved", "resolved_by": interaction.user.id, "resolved_at": datetime.now()}}
        )
        
        embed = discord.Embed(
            title="–¢—ñ–∫–µ—Ç –≤–∏—Ä—ñ—à–µ–Ω–æ",
            description=f"**–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:** {user.mention if user else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–∫–∏–Ω—É–≤ —Å–µ—Ä–≤–µ—Ä'}\n" +
                       f"**–¢–∏–ø —Ç—ñ–∫–µ—Ç–∞:** {config['name']}\n" +
                       f"**–í–∏—Ä—ñ—à–∏–≤:** {interaction.user.mention}",
            color=0x57f287,
            timestamp=datetime.now()
        )
        embed.add_field(
            name="–°—Ç–∞—Ç—É—Å",
            value="–¢—ñ–∫–µ—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏—Ä—ñ—à–µ–Ω–æ —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è",
            inline=False
        )
        
        await interaction.response.edit_message(embed=embed, view=TicketCloseView())
        
        # DM –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        if user:
            dm_embed = discord.Embed(
                title="<:palka:1412777364387135589> –¢—ñ–∫–µ—Ç –≤–∏—Ä—ñ—à–µ–Ω–æ",
                description=f"–í–∞—à —Ç—ñ–∫–µ—Ç —Ç–∏–ø—É **{config['name']}** –±—É–ª–æ –≤–∏—Ä—ñ—à–µ–Ω–æ.\n\n" +
                           f"**–°–µ—Ä–≤–µ—Ä:** {interaction.guild.name}\n" +
                           f"**–í–∏—Ä—ñ—à–∏–≤:** {interaction.user.mention}\n\n" +
                           f"–î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è!",
                color=0x57f287,
                timestamp=datetime.now()
            )
            await send_dm_notification(user, dm_embed)

class TicketMainView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(TicketTypeSelect())

class TicketSystem(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
    
    async def cog_load(self):
        self.bot.add_view(TicketMainView())
        self.bot.add_view(RoleApplicationButtons())
        self.bot.add_view(GeneralTicketButtons())
        self.bot.add_view(TicketCloseView())
    
    # –ì—Ä—É–ø–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç—ñ–∫–µ—Ç—ñ–≤
    ticket_group = app_commands.Group(name="ticket", description="–ö–æ–º–∞–Ω–¥–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–æ—é —Ç—ñ–∫–µ—Ç—ñ–≤")
    
    @ticket_group.command(name="panel", description="–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–Ω–µ–ª—å —Ç—ñ–∫–µ—Ç—ñ–≤")
    @app_commands.describe(
        channel="–ö–∞–Ω–∞–ª –¥–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–Ω–µ–ª—å (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø–æ—Ç–æ—á–Ω–∏–π)",
        log_channel="–ö–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ–π",
        category="–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –¥–ª—è —Ç—ñ–∫–µ—Ç—ñ–≤",
        setup_moderators="–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å—å–∫—ñ —Ä–æ–ª—ñ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ"
    )
    async def create_panel(self, interaction: discord.Interaction, 
                          channel: discord.TextChannel = None,
                          log_channel: discord.TextChannel = None,
                          category: discord.CategoryChannel = None,
                          setup_moderators: bool = False):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É!", ephemeral=True)
            return
        
        target_channel = channel or interaction.channel
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
        changes_made = []
        updates = {}
        
        if log_channel:
            updates["log_channel_id"] = log_channel.id
            changes_made.append(f"–ö–∞–Ω–∞–ª –ª–æ–≥—ñ–≤: {log_channel.mention}")
        
        if category:
            updates["category_id"] = category.id
            changes_made.append(f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è —Ç—ñ–∫–µ—Ç—ñ–≤: {category.name}")
        
        if updates:
            await update_guild_config(interaction.guild.id, updates)
        
        # –ì–æ–ª–æ–≤–Ω–∏–π embed —Å–∏—Å—Ç–µ–º–∏ —Ç—ñ–∫–µ—Ç—ñ–≤
        main_embed = discord.Embed(
            title="<:palka:1412777364387135589> –°–∏—Å—Ç–µ–º–∞ —Ç—ñ–∫–µ—Ç—ñ–≤ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏",
            color=0x2b2d31,
            timestamp=datetime.now()
        )
        
        # –î–æ—Å—Ç—É–ø–Ω—ñ —Ç–∏–ø–∏ —Ç—ñ–∫–µ—Ç—ñ–≤
        types_text = (
            "**<:odym:1412519796456689714> –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å** | –ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–ª—ñ\n"
            "**<:dva:1412519805185163274> –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞** | –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è —ñ–¥–µ—è–º–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–∞\n"
            "**<:try:1412519816245547038> –ó–≤—ñ—Ç –ø—Ä–æ –±–∞–≥** | –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏\n"
            "**<:chetyri:1412519826274127973> –ó–∞–≥–∞–ª—å–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞** | –ü–∏—Ç–∞–Ω–Ω—è –∞–±–æ –¥–æ–ø–æ–º–æ–≥–∞ –≤—ñ–¥ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó\n"
            "**<:pyat:1412519858960339064> –°–∫–∞—Ä–≥–∞** | –ü–æ–¥–∞—Ç–∏ —Å–∫–∞—Ä–≥—É –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ —Å–∏—Ç—É–∞—Ü—ñ—é"
        )
        
        main_embed.add_field(
            name="<:palka:1412777364387135589> ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ñ —Ç–∏–ø–∏ —Ç—ñ–∫–µ—Ç—ñ–≤ :",
            value=types_text,
            inline=False
        )
        
        # –ü—Ä–∞–≤–∏–ª–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
        rules_text = (
            "**‚Äî** –û–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω–∏–π —Ç—ñ–∫–µ—Ç –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
            "**‚Äî** –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ —á–µ—Å–Ω–æ —Ç–∞ –¥–µ—Ç–∞–ª—å–Ω–æ\n"
            "**‚Äî** –ë—É–¥—å—Ç–µ –≤–≤—ñ—á–ª–∏–≤–∏–º–∏ –∑ –º–æ–¥–µ—Ä–∞—Ü—ñ—î—é\n"
            "**‚Äî** –ù–µ —Å—Ç–≤–æ—Ä—é–π—Ç–µ —Ç—ñ–∫–µ—Ç–∏ –±–µ–∑ –ø–æ—Ç—Ä–µ–±–∏"
        )
        
        main_embed.add_field(
            name="<:palka:1412777364387135589> ‚Ä¢ –ü—Ä–∞–≤–∏–ª–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è :",
            value=rules_text,
            inline=False
        )
        
        view = TicketMainView()
        await target_channel.send(embed=main_embed, view=view)
        
        success_embed = discord.Embed(
            title="–ü–∞–Ω–µ–ª—å —Ç—ñ–∫–µ—Ç—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ",
            description=f"–ü–∞–Ω–µ–ª—å —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–º—ñ—â–µ–Ω–æ –≤ {target_channel.mention}",
            color=0x57f287
        )
        
        if changes_made:
            success_embed.add_field(
                name="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ",
                value="\n".join(changes_made),
                inline=False
            )
        
        if setup_moderators:
            guild_config = await get_guild_config(interaction.guild.id)
            view = RolesPaginationView(interaction.guild, guild_config, "moderator_roles")
            embed = view.create_embed()
            success_embed.add_field(
                name="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ñ–≤",
                value="–û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å—å–∫—ñ —Ä–æ–ª—ñ –≤ –º–µ–Ω—é –Ω–∏–∂—á–µ",
                inline=False
            )
            await interaction.response.send_message(embed=success_embed, ephemeral=True)
            await interaction.followup.send(embed=embed, view=view, ephemeral=True)
        else:
            await interaction.response.send_message(embed=success_embed, ephemeral=True)
    
    @ticket_group.command(name="moderators", description="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å—å–∫–∏—Ö —Ä–æ–ª–µ–π")
    @app_commands.describe(action="–î—ñ—è –∑ —Ä–æ–ª—è–º–∏")
    @app_commands.choices(action=[
        app_commands.Choice(name="–î–æ–¥–∞—Ç–∏ —Ä–æ–ª—ñ", value="add"),
        app_commands.Choice(name="–í–∏–¥–∞–ª–∏—Ç–∏ —Ä–æ–ª—ñ", value="remove"),
        app_commands.Choice(name="–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫", value="list"),
        app_commands.Choice(name="–û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ", value="clear")
    ])
    async def moderators(self, interaction: discord.Interaction, action: str):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É!", ephemeral=True)
            return
        
        guild_config = await get_guild_config(interaction.guild.id)
        
        if action == "list":
            if not guild_config.get("moderator_role_ids"):
                embed = discord.Embed(
                    title="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å—å–∫—ñ —Ä–æ–ª—ñ",
                    description="–ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å—å–∫–∏—Ö —Ä–æ–ª–µ–π.\n–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –∫–µ—Ä—É–≤–∞—Ç–∏ —Ç—ñ–∫–µ—Ç–∞–º–∏.",
                    color=0xfee75c
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
            
            embed = discord.Embed(title="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å—å–∫—ñ —Ä–æ–ª—ñ", color=0x2b2d31)
            
            roles_list = []
            valid_roles = []
            for i, role_id in enumerate(guild_config["moderator_role_ids"], 1):
                role = interaction.guild.get_role(role_id)
                if role:
                    roles_list.append(f"{i}. {role.mention}")
                    valid_roles.append(role_id)
                else:
                    roles_list.append(f"{i}. –†–æ–ª—å –≤–∏–¥–∞–ª–µ–Ω–∞ (ID: {role_id})")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ñ—ñ–≥ —è–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤–∏–¥–∞–ª–µ–Ω—ñ —Ä–æ–ª—ñ
            if len(valid_roles) != len(guild_config["moderator_role_ids"]):
                await update_guild_config(interaction.guild.id, {"moderator_role_ids": valid_roles})
            
            embed.add_field(
                name=f"–†–æ–ª–µ–π: {len(valid_roles)}",
                value="\n".join(roles_list) if roles_list else "–ù–µ–º–∞—î —Ä–æ–ª–µ–π",
                inline=False
            )
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
        
        elif action == "add":
            view = RolesPaginationView(interaction.guild, guild_config, "moderator_roles")
            embed = view.create_embed()
            await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
        
        elif action == "remove":
            if not guild_config.get("moderator_role_ids"):
                embed = discord.Embed(
                    title="–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–ª–µ–π",
                    description="–ù–µ–º–∞—î —Ä–æ–ª–µ–π –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è",
                    color=0xed4245
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
            
            view = RemoveRolesView(interaction.guild, guild_config, "moderator_roles")
            embed = view.create_embed()
            await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
        
        elif action == "clear":
            if not guild_config.get("moderator_role_ids"):
                embed = discord.Embed(
                    title="–û—á–∏—â–µ–Ω–Ω—è —Ä–æ–ª–µ–π",
                    description="–ù–µ–º–∞—î —Ä–æ–ª–µ–π –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è",
                    color=0xfee75c
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
            
            await update_guild_config(interaction.guild.id, {"moderator_role_ids": []})
            
            embed = discord.Embed(
                title="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å—å–∫—ñ —Ä–æ–ª—ñ –æ—á–∏—â–µ–Ω–æ",
                description="–í—Å—ñ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å—å–∫—ñ —Ä–æ–ª—ñ –≤–∏–¥–∞–ª–µ–Ω–æ.\n–¢–µ–ø–µ—Ä —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –∫–µ—Ä—É–≤–∞—Ç–∏ —Ç—ñ–∫–µ—Ç–∞–º–∏.",
                color=0x57f287
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
    
    @ticket_group.command(name="roles", description="–ö–µ—Ä—É–≤–∞–Ω–Ω—è —Ä–æ–ª—è–º–∏ –¥–ª—è –∑–∞—è–≤–æ–∫")
    @app_commands.describe(action="–î—ñ—è –∑ —Ä–æ–ª—è–º–∏")
    @app_commands.choices(action=[
        app_commands.Choice(name="–î–æ–¥–∞—Ç–∏ —Ä–æ–ª—ñ", value="add"),
        app_commands.Choice(name="–í–∏–¥–∞–ª–∏—Ç–∏ —Ä–æ–ª—ñ", value="remove"),
        app_commands.Choice(name="–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫", value="list"),
        app_commands.Choice(name="–û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ", value="clear")
    ])
    async def roles(self, interaction: discord.Interaction, action: str):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É!", ephemeral=True)
            return
        
        guild_config = await get_guild_config(interaction.guild.id)
        
        if action == "list":
            if not guild_config.get("available_roles"):
                embed = discord.Embed(
                    title="–†–æ–ª—ñ –¥–ª—è —Ç—ñ–∫–µ—Ç—ñ–≤",
                    description="–ù–µ–º–∞—î –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏—Ö —Ä–æ–ª–µ–π –¥–ª—è –∑–∞—è–≤–æ–∫",
                    color=0xed4245
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
            
            embed = discord.Embed(title="–î–æ—Å—Ç—É–ø–Ω—ñ —Ä–æ–ª—ñ –¥–ª—è –∑–∞—è–≤–æ–∫", color=0x2b2d31)
            
            roles_list = []
            valid_roles = []
            for i, role_id in enumerate(guild_config["available_roles"], 1):
                role = interaction.guild.get_role(role_id)
                if role:
                    roles_list.append(f"{i}. {role.mention}")
                    valid_roles.append(role_id)
                else:
                    roles_list.append(f"{i}. –†–æ–ª—å –≤–∏–¥–∞–ª–µ–Ω–∞ (ID: {role_id})")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ñ—ñ–≥ —è–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤–∏–¥–∞–ª–µ–Ω—ñ —Ä–æ–ª—ñ
            if len(valid_roles) != len(guild_config["available_roles"]):
                await update_guild_config(interaction.guild.id, {"available_roles": valid_roles})
            
            embed.add_field(
                name=f"–†–æ–ª–µ–π: {len(valid_roles)}",
                value="\n".join(roles_list) if roles_list else "–ù–µ–º–∞—î —Ä–æ–ª–µ–π",
                inline=False
            )
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
        
        elif action == "add":
            view = RolesPaginationView(interaction.guild, guild_config, "ticket_roles")
            embed = view.create_embed()
            await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
        
        elif action == "remove":
            if not guild_config.get("available_roles"):
                embed = discord.Embed(
                    title="–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–ª–µ–π",
                    description="–ù–µ–º–∞—î —Ä–æ–ª–µ–π –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è",
                    color=0xed4245
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
            
            view = RemoveRolesView(interaction.guild, guild_config, "ticket_roles")
            embed = view.create_embed()
            await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
        
        elif action == "clear":
            if not guild_config.get("available_roles"):
                embed = discord.Embed(
                    title="–û—á–∏—â–µ–Ω–Ω—è —Ä–æ–ª–µ–π",
                    description="–ù–µ–º–∞—î —Ä–æ–ª–µ–π –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è",
                    color=0xfee75c
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
            
            await update_guild_config(interaction.guild.id, {"available_roles": []})
            
            embed = discord.Embed(
                title="–†–æ–ª—ñ –¥–ª—è —Ç—ñ–∫–µ—Ç—ñ–≤ –æ—á–∏—â–µ–Ω–æ",
                description="–í—Å—ñ —Ä–æ–ª—ñ –¥–ª—è –∑–∞—è–≤–æ–∫ –≤–∏–¥–∞–ª–µ–Ω–æ.\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –Ω–µ –∑–º–æ–∂—É—Ç—å –ø–æ–¥–∞–≤–∞—Ç–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–æ–ª—ñ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö.",
                color=0x57f287
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
    
    @ticket_group.command(name="info", description="–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    @app_commands.describe(type="–¢–∏–ø —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó")
    @app_commands.choices(type=[
        app_commands.Choice(name="–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", value="settings"),
        app_commands.Choice(name="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—ñ–∫–µ—Ç—ñ–≤", value="stats")
    ])
    async def info(self, interaction: discord.Interaction, type: str):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É!", ephemeral=True)
            return
        
        if type == "settings":
            guild_config = await get_guild_config(interaction.guild.id)
            embed = discord.Embed(title="–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", color=0x2b2d31)
            
            # –†–æ–ª—ñ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ñ–≤
            if guild_config.get("moderator_role_ids"):
                mod_roles = []
                for role_id in guild_config["moderator_role_ids"]:
                    role = interaction.guild.get_role(role_id)
                    if role:
                        mod_roles.append(role.mention)
                embed.add_field(
                    name="–†–æ–ª—ñ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ñ–≤", 
                    value="\n".join(mod_roles) if mod_roles else "–ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ", 
                    inline=True
                )
            else:
                embed.add_field(name="–†–æ–ª—ñ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ñ–≤", value="–ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ", inline=True)
            
            log_channel = interaction.guild.get_channel(guild_config["log_channel_id"]) if guild_config.get("log_channel_id") else None
            category = interaction.guild.get_channel(guild_config["category_id"]) if guild_config.get("category_id") else None
            
            embed.add_field(name="–ö–∞–Ω–∞–ª –ª–æ–≥—ñ–≤", value=log_channel.mention if log_channel else "–ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ", inline=True)
            embed.add_field(name="–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", value=category.name if category else "–ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ", inline=True)
            embed.add_field(name="–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–æ–ª–µ–π", value=f"{len(guild_config.get('available_roles', []))} —Ä–æ–ª–µ–π", inline=True)
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
        
        elif type == "stats":
            # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_tickets = await db.tickets.count_documents({"guild_id": interaction.guild.id})
            open_tickets = await db.tickets.count_documents({"guild_id": interaction.guild.id, "status": "open"})
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–ø–∞–º–∏
            type_stats = {}
            for ticket_type in TICKET_TYPES.keys():
                count = await db.tickets.count_documents({
                    "guild_id": interaction.guild.id, 
                    "ticket_type": ticket_type
                })
                type_stats[ticket_type] = count
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
            week_stats = await get_week_stats(interaction.guild.id)
            week_total = sum(count for _, count in week_stats)
            
            embed = discord.Embed(
                title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—ñ–∫–µ—Ç—ñ–≤",
                color=0x2b2d31,
                timestamp=datetime.now()
            )
            
            embed.add_field(
                name="–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                value=f"**–í—Å—å–æ–≥–æ —Ç—ñ–∫–µ—Ç—ñ–≤:** {total_tickets}\n**–í—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∑–∞—Ä–∞–∑:** {open_tickets}\n**–ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤:** {week_total}",
                inline=False
            )
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞—Ö
            if any(type_stats.values()):
                type_text = []
                for ticket_type, count in type_stats.items():
                    if count > 0:
                        config = TICKET_TYPES[ticket_type]
                        type_text.append(f"{config['emoji']} {config['name']}: {count}")
                
                if type_text:
                    embed.add_field(
                        name="–ó–∞ —Ç–∏–ø–∞–º–∏",
                        value="\n".join(type_text),
                        inline=False
                    )
            
            await interaction.response.send_message(embed=embed, ephemeral=True)

async def setup(bot):
    await bot.add_cog(TicketSystem(bot))
    print("Ticket System –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")